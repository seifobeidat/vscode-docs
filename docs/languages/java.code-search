# Query: java
# Flags: RegExp
# ContextLines: 1

3535 results - 260 files

CONTRIBUTING.md:
   57  * \python
   58: * \java
   59  * \azure

  204  
  205: >**Note:** You can add an optional language identifier to enable syntax highlighting in your fenced code block. For example, ```` ```json ```` or ```` ```javascript ````. [Read more →](https://docs.github.com/get-started/writing-on-github/working-with-advanced-formatting/creating-and-highlighting-code-blocks#syntax-highlighting)
  206  
  207: An example of JavaScript source code:
  208  
  209: ```javascript
  210  function fancyAlert(arg) {

api/advanced-topics/remote-extensions.md:
  401  
  402: If you have a set of extensions that need to interact with one another, exposing functionality using a private command can help you avoid unexpected impacts. However, any objects you pass in as parameters will be "stringified" (`JSON.stringify`) before being transmitted, so the object cannot have cyclic references and will end up as a "plain old JavaScript object" on the other side.
  403  

  559  
  560: If your extension is purely written in JavaScript/TypeScript, you may not need to do anything to add support for other processor architectures or the `musl` based Alpine Linux to your extension.
  561  

api/extension-capabilities/extending-workbench.md:
  39  
  40: Webviews are highly customizable views built with HTML/CSS/JavaScript. They display next to text editors in the Editor Group areas. Read more about Webview in the [Webview guide](/api/extension-guides/webview).
  41  

api/extension-capabilities/overview.md:
  49  
  50: - Bundle common JavaScript snippets into an extension.
  51  - Tell VS Code about a new programming language.

  71  
  72: [Workbench Extensions](./extending-workbench) extend the VS Code Workbench UI. Add new right-click actions to the File Explorer, or even build a custom explorer using VS Code's [TreeView](/api/extension-guides/tree-view) API. And if your extension needs a fully customized user interface, use the [Webview API](/api/extension-guides/webview) to build your own document preview or UI using standard HTML, CSS, and JavaScript.
  73  

api/extension-guides/color-theme.md:
  54  
  55: Semantic highlighting is available for TypeScript and JavaScript in VS Code release 1.43. We expect it to be adopted by other languages soon.
  56  

api/extension-guides/command.md:
   70    vscode.languages.registerHoverProvider(
   71:     'javascript',
   72      new class implements vscode.HoverProvider {

   99    vscode.languages.registerHoverProvider(
  100:     'javascript',
  101      new class implements vscode.HoverProvider {

  208  
  209: > **Note**: There is semantic overlap between `enablement` and the `when` condition of menu items. The latter is used to prevent menus full of disabled items. For example, a command that analyzes a JavaScript regular expression should show **when** the file is JavaScript and be **enabled** only when the cursor is over a regular expression. The `when` clause prevents clutter, by not showing the command for all other language files. Preventing cluttered menus is highly recommended.
  210  

api/extension-guides/custom-editors.md:
   37  
   38: The view side of a custom editor is implemented using a [webview](/api/extension-guides/webview). This lets you build the user interface of your custom editor using standard HTML, CSS, and JavaScript. Webviews cannot access the VS Code API directly but they can talk with extensions by passing messages back and forth. Check out our [webview documentation](/api/extension-guides/webview) for more information on webviews and best practices for working with them.
   39  

  167  
  168: Finally, if updating your webviews is expensive, consider [debouncing](https://davidwalsh.name/javascript-debounce-function) the updates to your webview.
  169  

api/extension-guides/debugger-extension.md:
  363  
  364: This approach is in fact easily doable as long as your debug adapter is implemented in TypeScript/JavaScript. The basic idea is to run the debug adapter directly inside the extension and to make VS Code to connect to it instead of launching a new external debug adapter per session.
  365  

  371  - `DebugAdapterServer`: this object describes a debug adapter running as a server that communicates via a specific local or remote port. A debug adapter implementation based on the [`vscode-debugadapter`](https://www.npmjs.com/package/vscode-debugadapter) npm module supports this server mode automatically.
  372: - `DebugAdapterInlineImplementation`: this object describes a debug adapter as a JavaScript or Typescript object that implements the `vscode.DebugAdapter` interface. A debug adapter implementation based on version 1.38-pre.4 or later of the [`vscode-debugadapter`](https://www.npmjs.com/package/vscode-debugadapter) npm module implements the interface automatically.
  373  

api/extension-guides/notebook.md:
  237  
  238: * application/javascript
  239  * text/html

  248  * text/x-json
  249: * text/x-javascript
  250  * text/x-html

  584  
  585: * [vscode-nodebook](https://github.com/microsoft/vscode-nodebook): Node.js notebook with debugging support provided by VS Code's built-in JavaScript debugger and some simple protocol transformations
  586  * [vscode-simple-jupyter-notebook](https://github.com/microsoft/vscode-simple-jupyter-notebook): Jupyter notebook with debugging support provided by the existing Xeus debugger

api/extension-guides/testing.md:
  137  
  138: The `TestItem` interface is simple and doesn't have room for custom data. If you need to associate extra information with a `TestItem`, you can use a [`WeakMap`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/WeakMap):
  139  

api/extension-guides/web-extensions.md:
  117  
  118: The webpack configuration file is automatically generated by `yo code`. It bundles the source code from your extension into a single JavaScript file to be loaded in the web extension host.
  119  

  186    * `[name]` will be replaced by the key used in `entry`. So in the generated config file, it will produce `dist/web/extension.js` and `dist/web/test/suite/index.js`.
  187: * The `target` field indicates which type of environment the compiled JavaScript file will run. For web extensions, you want this to be `webworker`.
  188  * The `resolve` field contains the ability to add aliases and fallbacks for node libraries that don't work in the browser.

  473  
  474: The browser runtime environment only supports the execution of JavaScript and [WebAssembly](https://webassembly.org/). Libraries written in other programming languages need to be cross-compiled, for instance there is tooling to compile [C/C++](https://developer.mozilla.org/en-US/docs/WebAssembly/C_to_wasm) and [Rust](https://developer.mozilla.org/en-US/docs/WebAssembly/Rust_to_wasm) to WebAssembly. The [vscode-anycode](https://github.com/microsoft/vscode-anycode) extension, for example, uses [tree-sitter](https://www.npmjs.com/package/tree-sitter), which is C/C++ code compiled to WebAssembly.
  475  

api/extension-guides/webview.md:
  633  
  634: Inside of the webview, you can also set the contexts for specific areas of the HTML using the `data-vscode-context` [data attribute](https://developer.mozilla.org/docs/Learn/HTML/Howto/Use_data_attributes) (or in JavaScript with `dataset.vscodeContext`). The `data-vscode-context` value is a JSON object that specifies the contexts to set when the user right-clicks on the element. The final context is determined by going from the document root to the element that was clicked.
  635  

  670  
  671: Webviews are just like iframes, which means that they can also run scripts. JavaScript is disabled in webviews by default, but it can easily re-enable by passing in the `enableScripts: true` option.
  672  

  900  
  901: If you do need to load worker code from a JavaScript file in your extension, try using `fetch`:
  902  

  915  
  916: With `webpack`, you can use `LimitChunkCountPlugin` to force the compiled worker JavaScript to be a single file:
  917  

api/extension-guides/workspace-trust.md:
  55  
  56: The most common example of this is using a project's workspace dependencies, such as the Node.js modules stored in the local workspace. A malicious workspace might check in a compromised version of the module. Thus, this is a security risk for the user and extension. In addition, an extension may rely on JavaScript or other configuration files that control the extension or other modules' behavior. There are many other examples, such as executing an opened code file to determine its output for error reporting.
  57  

api/get-started/extension-anatomy.md:
  23  - [**Contribution Points**](/api/references/contribution-points): static declarations that you make in the `package.json` [Extension Manifest](#extension-manifest) to extend VS Code.
  24: - [**VS Code API**](/api/references/vscode-api): a set of JavaScript APIs that you can invoke in your extension code.
  25  

api/get-started/your-first-extension.md:
  13  
  14: First, use [Yeoman](https://yeoman.io/) and [VS Code Extension Generator](https://www.npmjs.com/package/generator-code) to scaffold a TypeScript or JavaScript project ready for development.
  15  

  94  
  95: ### Using JavaScript
  96  
  97: In this guide, we mainly describe how to develop VS Code extension with TypeScript because we believe TypeScript offers the best experience for developing VS Code extensions. However, if you prefer JavaScript, you can still follow along using [helloworld-minimal-sample](https://github.com/microsoft/vscode-extension-samples/tree/main/helloworld-minimal-sample).
  98  

api/language-extensions/embedded-languages.md:
   16  
   17: - JavaScript and CSS in HTML
   18: - JSX in JavaScript
   19  - Interpolation in templating languages, for example Vue, Handlebars and Razor

  239  
  240: VS Code's HTML support provides HTML, CSS, and JavaScript language features. Although the HTML and CSS language services are non-stateful, the TypeScript server powering the JavaScript language features is. We only offer basic JavaScript support inside HTML documents because it is hard to inform TypeScript of the project's state. For example, if you include a `<script>` tag that points to the `lodash` library hosted on a CDN, you will not get `_.` completions inside `<script>` tags.
  241  

  246  ```html
  247: <SCRIPT type="text/javascript">
  248    document.write ("<EM>This won't work</EM>")

  251  
  252: In this case, if the language server for the embedded JavaScript returns a result that contains `</`, it should be escaped to `<\/`.
  253  

api/language-extensions/language-configuration-guide.md:
   21  
   22: Here is a [Language Configuration sample](https://github.com/microsoft/vscode-extension-samples/tree/main/language-configuration-sample) that configures the editing experience for JavaScript files. This guide explains the content of `language-configuration.json`:
   23  

  214  
  215: ```javascript
  216  if (true) {

api/language-extensions/language-server-extension-guide.md:
   46  
   47: - Language Client: A normal VS Code extension written in JavaScript / TypeScript. This extension has access to all [VS Code Namespace API](/api/references/vscode-api).
   48  - Language Server: A language analysis tool running in a separate process.

  415        {
  416:         label: 'JavaScript',
  417          kind: CompletionItemKind.Text,

  431      } else if (item.data === 2) {
  432:       item.detail = 'JavaScript details';
  433:       item.documentation = 'JavaScript documentation';
  434      }

  514  ```
  515: TypeScript lets you write JavaScript the way you really want to.
  516: TypeScript is a typed superset of JavaScript that compiles to plain JavaScript.
  517  ANY browser. ANY host. ANY OS. Open Source.

  637  
  638: The first interesting feature a language server usually implements is validation of documents. In that sense, even a linter counts as a language server and in VS Code linters are usually implemented as language servers (see [eslint](https://github.com/microsoft/vscode-eslint) and [jshint](https://github.com/microsoft/vscode-jshint) for examples). But there is more to language servers. They can provide code completion, Find All References, or Go To Definition. The example code below adds code completion to the server. It proposes the two words 'TypeScript' and 'JavaScript'.
  639  

  653        {
  654:         label: 'JavaScript',
  655          kind: CompletionItemKind.Text,

  669      } else if (item.data === 2) {
  670:       item.detail = 'JavaScript details';
  671:       item.documentation = 'JavaScript documentation';
  672      }

  741        items: [
  742:         { label: 'JavaScript', kind: vscode.CompletionItemKind.Text },
  743          { label: 'TypeScript', kind: vscode.CompletionItemKind.Text }

api/language-extensions/overview.md:
  71  
  72: Embedded languages are common in web development. For example, CSS/JavaScript inside HTML, and GraphQL inside JavaScript/TypeScript. The [Embedded languages](/api/language-extensions/embedded-languages) topic discusses how you can make language features available to embedded languages.

api/language-extensions/programmatic-language-features.md:
  14  ```ts
  15: vscode.languages.registerHoverProvider('javascript', {
  16    provideHover(document, position, token) {

  23  
  24: As you see above, the [`vscode.languages.registerHoverProvider`](/api/references/vscode-api#languages.registerHoverProvider) API provides an easy way to provide hover contents to JavaScript files. After this extension gets activated, whenever you hover over some JavaScript code, VS Code queries all [`HoverProvider`](/api/references/vscode-api#HoverProvider) for JavaScript and shows the result in a Hover widget. The [Language Feature Listing](#language-features-listing) and illustrated gif below provides an easy way for you to locate which VS Code API / LSP Method your extension needs.
  25  

  27  
  28: - An extension provides a Language Client and a Language Server for JavaScript.
  29  - The Language Client is like any other VS Code extension, running in the Node.js Extension Host context. When it gets activated, it spawns the Language Server in another process and communicates with it through [Language Server Protocol](https://microsoft.github.io/language-server-protocol/).
  30: - You hover over JavaScript code in VS Code
  31  - VS Code informs the Language Client of the hover

api/language-extensions/semantic-highlight-guide.md:
   55  
   56: const selector = { language: 'java', scheme: 'file' }; // register for all Java documents from the local file system
   57  

  214    "semanticTokenColors": {
  215:     "variable.readonly:java": "#ff0011"
  216    }

  219  
  220: `variable.readonly:java` is called a selector and has the form `(*|tokenType)(.tokenModifier)*(:tokenLanguage)?`.
  221  

  228  - `"*.declaration": { "bold": true } // all declarations are bold`
  229: - `"class:java": { "foreground": "#0f0", "italic": true } // classes in java`
  230  

api/language-extensions/snippet-guide.md:
  24        {
  25:         "language": "javascript",
  26          "path": "./snippets.json"

api/language-extensions/syntax-highlight-guide.md:
   11  
   12: Syntax highlighting determines the color and style of source code displayed in the Visual Studio Code editor. It is responsible for colorizing keywords like `if` or `for` in JavaScript differently than strings and comments and variable names.
   13  

   44  
   45: Each token is associated with a scope that defines the context of the token. A scope is a dot separated list of identifiers that specify the context of the current token. The `+` operation in JavaScript, for example, has the scope `keyword.operator.arithmetic.js`.
   46  

   48  
   49: Scopes nest so that each token is also associated with a list of parent scopes. The example below uses the [scope inspector](#scope-inspector) to show the scope hierarchy for the `+` operator in a simple JavaScript function. The most specific scope is listed at the top, with more general parent scopes listed below:
   50  

  154  
  155: The `embeddedLanguages` contribution point maps a scope in the embedded language to a top-level language scope. In the example below, any tokens in the `meta.embedded.block.javascript` scope will be treated as JavaScript content:
  156  

  164          "embeddedLanguages": {
  165:           "meta.embedded.block.javascript": "javascript"
  166          }

  172  
  173: Now if you try to comment code or trigger snippets inside a set of tokens marked `meta.embedded.block.javascript`, they will get the correct `//` JavaScript style comment and the correct JavaScript snippets.
  174  

  232  
  233: For this example, we'll create a simple injection grammar that highlights `TODO` as a keyword in JavaScript comments. To apply our injection grammar in JavaScript files, we use the `source.js` target language scope in `injectTo`:
  234  

  248  
  249: The grammar itself is a standard TextMate grammar except for the top level `injectionSelector` entry. The `injectionSelector` is a scope selector that specifies which scopes the injected grammar should be applied in. For our example, we want to highlight the word `TODO` in all `//` comments. Using the [scope inspector](#scope-inspector), we find that JavaScript's double slash comments have the scope `comment.line.double-slash`, so our injection selector is `L:comment.line.double-slash`:
  250  

  274  
  275: An extension that highlights SQL queries in JavaScript strings, for example, may use `embeddedLanguages` to make sure all token inside the string marked `meta.embedded.inline.sql` are treated as SQL for basic language features such as bracket matching and snippet selection.
  276  

api/references/commands.md:
  17  
  18: ```javascript
  19  let uri = Uri.file('/some/path/to/folder');

api/references/contribution-points.md:
    54        {
    55:         "language": "javascript"
    56        },
    57        {
    58:         "language": "javascriptreact"
    59        }

   546  
   547:         "languages": ["javascript", "typescript", "javascriptreact", "typescriptreact"],
   548  

  1283  
  1284: Contributes [TypeScript server plugins](https://github.com/microsoft/TypeScript/wiki/Writing-a-Language-Service-Plugin) that augment VS Code's JavaScript and TypeScript support:
  1285  

  1297  
  1298: The above example extension contributes the [`typescript-styled-plugin`](https://github.com/microsoft/typescript-styled-plugin) which adds styled-component IntelliSense for JavaScript and TypeScript. This plugin will be loaded from the extension and must be installed as a normal NPM `dependency` in the extension:
  1299  

  1307  
  1308: TypeScript server plugins are loaded for all JavaScript and TypeScript files when the user is using VS Code's version of TypeScript. They are not activated if the user is using a workspace version of TypeScript, unless the plugin explicitly sets `"enableForWorkspaceTypeScriptVersions": true`.
  1309  

api/references/vscode-api.md:
     14  
     15: **VS Code API** is a set of JavaScript APIs that you can invoke in your Visual Studio Code extension. This page lists all VS Code APIs available to extension authors.
     16  

    115  
    116: <pre><code class="lang-javascript">commands.registerCommand(&#39;extension.sayHello&#39;, () =&gt; {
    117      window.showInformationMessage(&#39;Hello World!&#39;);

    701  
    702: <pre><code class="lang-javascript">export function activate(context: vscode.ExtensionContext) {
    703      let api = {

    718  
    719: <pre><code class="lang-javascript">let mathExt = extensions.getExtension(&#39;genius.math&#39;);
    720  let importedApi = mathExt.exports;

    798  
    799: <pre><code class="lang-javascript">languages.registerHoverProvider(&#39;javascript&#39;, {
    800      provideHover(document, position, token) {

    804  </code></pre>
    805: <p>Registration is done using a <a href="#DocumentSelector">document selector</a> which is either a language ID, like <code>javascript</code> or
    806  a more complex <a href="#DocumentFilter">filter</a> like <code>{ language: &#39;typescript&#39;, scheme: &#39;file&#39; }</code>. Matching a document against such

    913  doc.uri; //&#39;file:///my/file.js&#39;
    914: doc.languageId; // &#39;javascript&#39;
    915: match(&#39;javascript&#39;, doc); // 10;
    916: match({language: &#39;javascript&#39;}, doc); // 10;
    917: match({language: &#39;javascript&#39;, scheme: &#39;file&#39;}, doc); // 10;
    918  match(&#39;*&#39;, doc); // 5

    923  doc.uri; // &#39;git:/my/file.js&#39;
    924: doc.languageId; // &#39;javascript&#39;
    925: match(&#39;javascript&#39;, doc); // 10;
    926: match({language: &#39;javascript&#39;, scheme: &#39;git&#39;}, doc); // 10;
    927  match(&#39;*&#39;, doc); // 5

   4402  <ul>
   4403: <li>Convert JavaScript function to class</li>
   4404  <li>Add or remove parameter</li>

  11382  <li><code>**</code> to match any number of path segments, including none</li>
  11383: <li><code>{}</code> to group conditions (e.g. <code>**/*.{ts,js}</code> matches all TypeScript and JavaScript files)</li>
  11384  <li><code>[]</code> to declare a range of characters to match in a path segment (e.g., <code>example.[0-9]</code> to match on <code>example.0</code>, <code>example.1</code>, …)</li>

  11942  <div class="comment"><p>The language&#39;s word definition.
  11943: If the language supports Unicode identifiers (e.g. JavaScript), it is preferable
  11944  to provide a word definition that uses exclusion of known separators.

  21400  
  21401: The VS Code API represents asynchronous operations with [promises](https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Promise). From extensions, __any__ type of promise can be returned, like ES6, WinJS, A+, etc.
  21402  
  21403: Being independent of a specific promise library is expressed in the API by the `Thenable`-type. `Thenable` represents the common denominator which is the [then](https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Promise/then) method.
  21404  

  21426  
  21427: ```javascript
  21428  var listener = function(event) {

api/references/vscode-api.template:
  14  
  15: **VS Code API** is a set of JavaScript APIs that you can invoke in your Visual Studio Code extension. This page lists all VS Code APIs available to extension authors.
  16  

  28  
  29: The VS Code API represents asynchronous operations with [promises](https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Promise). From extensions, __any__ type of promise can be returned, like ES6, WinJS, A+, etc.
  30  
  31: Being independent of a specific promise library is expressed in the API by the `Thenable`-type. `Thenable` represents the common denominator which is the [then](https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Promise/then) method.
  32  

  54  
  55: ```javascript
  56  var listener = function(event) {

api/references/when-clause-contexts.md:
  83  
  84: * The right-hand side of the `=~` operator follows the same rules as regular expression literals ([reference](https://developer.mozilla.org/docs/Web/JavaScript/Guide/Regular_Expressions#creating_a_regular_expression)) in JavaScript, except characters need to follow escaping rules both of JSON strings and regular expressions. For example, a regular expression literal to match a substring `file://` would be `/file:\/\//` in JavaScript but `/file:\\/\\//` in a when clause because a backslash needs to be escaped in a JSON string and a slash needs to be escaped in the regular expression pattern.
  85  * There does not exist an operator `!=~`, but you can negate the match expression - `!(foo =~ /baz/)`.

api/working-with-extensions/bundling-extension.md:
   11  
   12: The first reason to bundle your Visual Studio Code extension is to make sure it works for everyone using VS Code on any platform. Only bundled extensions can be used in VS Code for Web environments like [github.dev](https://github.dev/) and [vscode.dev](https://vscode.dev/). When VS Code is running in the browser, it can only load one file for your extension so the extension code needs to be bundled into one single web-friendly JavaScript file. This also applies to [Notebook Output Renderers](/api/extension-guides/notebook#notebook-renderer), where VS Code will also only load one file for your renderer extension.
   13  

   15  
   16: For JavaScript, different bundlers are available. Popular ones are [rollup.js](https://rollupjs.org), [Parcel](https://parceljs.org), [esbuild](https://esbuild.github.io/), and [webpack](https://webpack.js.org/).
   17  

   59  
   60: Webpack is a JavaScript bundler but many VS Code extensions are written in TypeScript and only compiled to JavaScript. If your extension is using TypeScript, you can use the loader `ts-loader`, so that webpack can understand TypeScript. Use the following to install `ts-loader`:
   61  

   69  
   70: ```javascript
   71  //@ts-check

   92      },
   93:     resolve: { // support reading TypeScript and JavaScript files, 📖 -> https://github.com/TypeStrong/ts-loader
   94          mainFields: ['browser', 'module', 'main'], // look for `browser` entry point in imported node modules

  117  
  118: The file is [available](https://github.com/microsoft/vscode-extension-samples/blob/main/webpack-sample/webpack.config.js) as part of the [webpack-extension](https://github.com/microsoft/vscode-extension-samples/blob/main/webpack-sample) sample. Webpack configuration files are normal JavaScript modules that must export a configuration object.
  119  

  124  * The `output` configuration tells webpack where to place the generated bundle file. By convention, that is the `dist` folder. In this sample, webpack will produce a `dist/extension.js` file.
  125: * The `resolve` and `module/rules` configurations are there to support TypeScript and JavaScript input files.
  126  * The `externals` configuration is used to declare exclusions, for example files and modules that should not be included in the bundle. The `vscode` module should not be bundled because it doesn't exist on disk but is created by VS Code on-the-fly when required. Depending on the node modules that an extension uses, more exclusion may be necessary.

  153  
  154: Extension authors often write unit tests for their extension source code. With the correct architectural layering, where the extension source code doesn't depend on tests, the webpack produced bundle shouldn't contain any test code. To run unit tests, only a simple compile is necessary. In the sample, there is a `test-compile` script, which uses the TypeScript compiler to compile the extension into the `out` folder. With that intermediate JavaScript available, the following snippet for `launch.json` is enough to run tests.
  155  

  215  * Try to make the dependency static so that it can be bundled.
  216: * Exclude that dependency via the `externals` configuration. Also make sure that those JavaScript files aren't excluded from the packaged extension, using a negated [glob pattern](/docs/editor/glob-patterns) in `.vscodeignore`, for example `!node_modules/mySpecialModule`.
  217  

api/working-with-extensions/continuous-integration.md:
  243  
  244: All of the above examples refer to a hypothetical project built with [Yarn](https://yarnpkg.com/), but can be adapted to use [npm](https://www.npmjs.com/), [Grunt](https://gruntjs.com/), [Gulp](https://gulpjs.com/), or any other JavaScript build tool.

blogs/2016/02/23/introducing-chrome-debugger-for-vs-code.md:
  16  
  17: Our Chrome Debugger allows front-end developers to debug their client-side JavaScript code running inside Google Chrome directly from Visual Studio Code.
  18  

  26  
  27: In the above example, we are showing an [AngularJS](https://github.com/auchenberg/timey) app bundled and minified via [Browserify](http://browserify.org/) being debugged from VS Code. This works because our debugger understands [JavaScript Source Maps](https://www.html5rocks.com/en/tutorials/developertools/sourcemaps/), which we’ll use to enable developers to debug straight from their original source, and not the transpiled result that the browser sees. Supporting source maps also enables debugging of [TypeScript](https://www.typescriptlang.org/) straight from VS Code.
  28  

  61  
  62: [Andy Sterland](https://twitter.com/AndySterland), Senior Program Manager, JavaScript Diagnostics <br/>
  63: [Kenneth Auchenberg](https://twitter.com/auchenberg), Program Manager, JavaScript Diagnostics
  64  

blogs/2016/03/07/Feb2016Release.md:
  16  
  17: * **JavaScript**: [Salsa](https://github.com/microsoft/TypeScript/issues/4789) is now the default JavaScript/TypeScript language service, bringing support for React and React Native to VS Code.
  18  * **Code Folding**: The most requested feature in [UserVoice](https://visualstudio.uservoice.com/forums/293070-visual-studio-code/suggestions/7752321-add-code-folding-support) is now on by default.

blogs/2016/04/14/vscode-1.0.md:
  23  
  24: VS Code was initially built for developers creating web apps using JavaScript and TypeScript. But in less than 6 months since we made the product extensible, the community has built over [1000 extensions](https://marketplace.visualstudio.com/vscode) that now provide support for almost any language or runtime in VS Code. Today, a broad range of developers from individuals and startups to Fortune 500 companies, including audiences completely new to Microsoft’s tools, are all more productive with a tool that fits comfortably into their current tool chain and workflow, and supports the technologies they use, from Go and Python to React Native and C++. With this great ecosystem in place, we’re now confident in declaring our API as stable, and guaranteeing compatibility going forward.
  25  

  35  
  36: It was only a few short years ago that we kicked off what we then called the "Monaco" team. At the time, browsers were just beginning to introduce HTML5, and the race to build faster JavaScript runtimes was in full swing.
  37  

  49  
  50: Keeping our principle of using VS Code the way our customers do, we decided that the best way to deliver a rich and stable API was to build VS Code using the same API we would expose to extension developers. In fact, the core language services for JavaScript and TypeScript are actually extensions that just happen to be bundled with the distribution. Today, we use VS Code to build and debug VS Code, its extensions, and Node-based services. The same rich TypeScript editing, navigation, and debugging experiences we enjoy when building VS Code are available to everyone developing an extension for VS Code. Six months after our initial preview release, we declared VS Code to be Beta quality at Connect(); 2015, with a full extensibility model, and support in the new Visual Studio Marketplace.
  51  

blogs/2016/06/27/common-language-protocol.md:
  44  
  45: It also enables a given language server to be implemented once and have different tools take advantage of it. That's why it's exciting that the protocol has been adopted by Codenvy, who have added it to the next generation Eclipse IDE, [Eclipse Che](https://che.eclipse.org/eclipse-che-now-strategic-platform-red-hat), as well as by Red Hat, who are working to publish a standalone language server for Java which can be consumed by any tool that utilizes the protocol.
  46  

  52  
  53: This is just the start – communities for programming languages like OmniSharp (C#), JSON, C++, xText, JavaFX, and R have made commitments to release language servers for their languages in the future.  A full [list of protocol implementations](https://github.com/microsoft/language-server-protocol/wiki/Protocol-Implementations), including language servers, editors, and SDKs is available on the GitHub repo.
  54  

blogs/2016/08/22/introducing-ios-web-debugging-for-vs-code-on-windows-and-mac.md:
  19  
  20: Debugging websites running on iOS devices is accessible only to a subset of developers. For example, using the Safari Web Inspector (Safari DevTools) requires an instance of desktop Safari which only is available for macOS users. Today, we’re enabling mobile web developers to debug JavaScript running on their iOS devices directly from their editor with a new [iOS Web Debugger for Visual Studio Code](https://marketplace.visualstudio.com/items?itemName=msjsdiag.debugger-for-ios-web). This debug extension works on both **Mac and Windows**.
  21  

  58  
  59: [Kenneth Auchenberg](https://twitter.com/auchenberg), Program Manager, JavaScript Diagnostics

blogs/2016/09/14/js_roundup_1.md:
   2  Order:
   3: TOCTitle: JavaScript Extensions Part 1
   4: PageTitle: Visual Studio Code JavaScript Extensions Part 1 Sep 2016
   5: MetaDescription: Essential JavaScript extensions for Visual Studio Code.
   6  Date: 2016-09-14
   7: ShortDescription: Essential JavaScript extensions for Visual Studio Code.
   8  Author: Wade Anderson

  10  
  11: # JavaScript Extensions Part 1
  12  

  14  
  15: > This is part one in a series on JavaScript extensions.
  16  
  17: I learned JavaScript during an internship in the summer of 2013. Although not a difficult programming language, JavaScript didn't come easy. I used a lightweight editor along with the rest of my team and missed the deep language integration features of Visual Studio (C#) and Eclipse (Java).
  18  

  20  
  21: Below are some of the essential JavaScript extensions that I and many of you are using every day.
  22  

  32  
  33: Read more about setting up JavaScript linters in the VS Code [documentation](/docs/languages/javascript.md#linters).
  34  

  36  
  37: ## JavaScript (ES6) code snippets
  38  
  39: Marketplace - [JavaScript (ES6) code snippets](https://marketplace.visualstudio.com/items?itemName=xabikos.JavaScriptSnippets)
  40  

  42  
  43: VS Code comes with many built-in code snippets. The **JavaScript (ES6) code snippets** extension adds snippets for ES6 (ECMAScript 6) syntax. Here is a small sampling of the snippets provided by this extension. See the extension's [README](https://marketplace.visualstudio.com/items?itemName=xabikos.JavaScriptSnippets) to see the dozens of snippets this pack gives you.
  44  
  45: ![javascript snippets](javascript_snippets.png)
  46  
  47: You can read more about JavaScript snippets in the VS Code [documentation](/docs/languages/javascript.md#snippets). For additional snippet packs, including [Angular 1](https://marketplace.visualstudio.com/items?itemName=johnpapa.Angular1), [Angular 2](https://marketplace.visualstudio.com/items?itemName=johnpapa.Angular2), [Bootstrap 3](https://marketplace.visualstudio.com/items?itemName=wcwhitehead.bootstrap-3-snippets), [ReactJs](https://marketplace.visualstudio.com/items?itemName=xabikos.ReactSnippets), and [jQuery](https://marketplace.visualstudio.com/items?itemName=donjayamanne.jquerysnippets), check out the Marketplace's [Snippets category](https://marketplace.visualstudio.com/vscode/Snippets?sortBy=Downloads).
  48  

  54  
  55: This extension autocompletes file paths in your source code. Use this in JavaScript, HTML, CSS files and more.
  56  

blogs/2016/10/31/js_roundup_2.md:
    2  Order:
    3: TOCTitle: JavaScript Extensions Part 2
    4: PageTitle: Visual Studio Code JavaScript Extensions Part 2 Oct 2016
    5: MetaDescription: Essential JavaScript extensions for Visual Studio Code.
    6  Date: 2016-10-31
    7: ShortDescription: Essential JavaScript extensions for Visual Studio Code.
    8  Author: Wade Anderson
    9  ---
   10: # JavaScript Extensions Part 2
   11  

   13  
   14: Visual Studio Code has excellent support for JavaScript out of the box. As with other languages, JavaScript is powered by a language service. The [JavaScript language service](https://github.com/microsoft/TypeScript/wiki/JavaScript-Language-Service-in-Visual-Studio) is implemented by the TypeScript team, allowing JavaScript developers to leverage the best IntelliSense experience.
   15  
   16: But what other features can you get with VS Code? VS Code has a rich extensibility model and many features are provided through VS Code extensions. This post is a follow up to my [previous post](/blogs/2016/09/14/js_roundup_1.md) about JavaScript extensions.
   17  

   25  
   26: When you develop for the front end, you might not see the value of an integrated debugger in your editor. You use the browser's debugger right? This is where the Debugger for Chrome extension comes in. This extension lets you debug your JavaScript code in the Google Chrome browser, or any other targets that support the [Chrome Debugging Protocol](https://chromedevtools.github.io/debugger-protocol-viewer/) while staying in VS Code. No more context switching to debug!
   27  

   37  
   38: Although not necessarily a JavaScript extension, Git Project Manager is a favorite in the VS Code team. This extension scans a directory (or directories) for Git repos and allows you to switch between them easily.
   39  

   55  
   56: Internally, VS Code uses [js-beautify](https://www.npmjs.com/package/js-beautify). This extension allows you to specify a `.jsbeautifyrc` file to indicate the formatting style for your JavaScript, CSS, Sass, and HTML code.
   57  

   99  
  100: ## Creating your own JavaScript extension
  101  
  102: Not finding an extension that meets your needs. You can make your own with JavaScript or TypeScript! Check out the [documentation](/docs/extensions/overview.md) to learn more.
  103  

blogs/2016/11/15/formatters-best-practices.md:
  67  "html.format.enable": true,
  68: "javascript.format.enable": true,
  69  "typescript.format.enable": true,

blogs/2016/11/3/rollback.md:
  20  
  21: In VS Code 1.7, we released a featured called "Automatic Type Acquisition" (ATA). The purpose of ATA is to improve the JavaScript IntelliSense experience.
  22  
  23: VS Code uses the TypeScript language service to provide IntelliSense for JavaScript. The TypeScript language service uses special files called type declaration files (also known as typings files), which are published on npm under the [@types scope](https://www.npmjs.com/~types). In the past, you had to manually install type declaration files to light up IntelliSense for the dependencies in `package.json`. We know this isn't an easy chore so we teamed up with the TypeScript team to develop ATA.
  24  

blogs/2016/12/12/roundup-customize.md:
  14  
  15: You can customize Visual Studio Code in many ways. Install a new theme, add a snippet pack, or tweak your settings and keyboard shortcuts. We built VS Code to be flexible so you can make it work the way you do. You can install an extension from the VS Code [Marketplace](https://marketplace.visualstudio.com/vscode) or create your own (see [here](https://code.visualstudio.com/docs/extensions/overview) to get started writing an extension in JavaScript or TypeScript). In this blog, I want to highlight a few of my favorite extensions for customizing VS Code.
  16  

  56  
  57: Do you use snippets while writing code? Many snippets come built into VS Code and are shown in the IntelliSense suggest window while you type. When you start using a new library or framework, check the Marketplace to see if there is a snippet pack for it. There are snippet packs for many popular JavaScript frameworks.
  58  

blogs/2017/01/15/connect-nina-e2e.md:
   90  
   91: 1. Type `CMD+P` and enter `.js`, which lets you see all of the JavaScript/JSON files in the project, along with the directory they're within. Once again, this dialog supports the same "fuzzy search" as the command palette, so it's pretty flexible.
   92  

  114  
  115: ```javascript
  116  mongoose.connect(database.localUrl);

  120  
  121: ```javascript
  122  mongoose.connect(process.env.MONGO_URL || database.localUrl);

  128  
  129: This works because VS Code uses TypeScript behind the scenes (even for JavaScript!) to provide type information, which can then be used to inform the completion list as you type. VS Code is able to detect that this is a Node.js project, and as a result, automatically downloaded the TypeScript typings file for [Node.js](https://www.npmjs.com/package/@types/node) from NPM. This allows you to get completion for other Node.js globals such as `Buffer` or `setTimeout`, as well as all of the built-in modules such as `fs` and `http`.
  130  

  132  
  133: ```javascript
  134  mongoose.connection.on("error", () => { console.log("DB connection error"); });

  158  
  159: Additionally, this console is actually attached to our newly running app, so you can type JavaScript expressions, which will be evaluated in the app, and also includes auto-completion! For example, try typing `process.env` in the console to see what I mean.
  160  

  174  
  175: *Note: In addition to standard breakpoints, VS Code also supports conditional breakpoints, which allow you to customize when the app should suspend execution. To use them, simply right-click the gutter, select `Add Conditional Breakpoint...`, and specify either the JavaScript expression (e.g. `foo = "bar"`) or hit count that you'd like to condition the breakpoint on.*
  176  

  184  
  185: As mentioned, this is a MEAN app, which means its front-end and back-end are both written using JavaScript. So while we're currently debugging our back-end Node/Express code, at some point, we may need to debug our front-end/Angular code. Fortunately, VS Code has a huge ecosystem of extensions, which are easy to install, including integrated Chrome debugging.
  186  

  226  
  227: 1. Adds a new run configuration for Chrome, which will allow us to debug our front-end JavaScript code. You can hover your mouse over any of the settings that are specified to view documentation about what they do. Nice!
  228  

  248  
  249: With this setup, we can now efficiently debug front, back or full-stack JavaScript code directly within VS Code. Going further, the compound debugger concept isn't limited to just two target processes, and also isn't just limited to JavaScript, so if you're working on a micro-service app, that is potentially polyglot, you can use the exact same workflow we did above, once you've installed the necessary extensions (e.g. Go, Ruby, PHP).
  250  

blogs/2017/02/08/syntax-highlighting-optimizations.md:
   49  
   50: ```javascript
   51  tokens = [

   65  
   66: ```javascript
   67  //     0        1               2                  3                      4

   79  
   80: We'd then encode the `startIndex` (32 bits) and the `type` (16 bits) in 48 bits of [the 53 mantissa bits](https://stackoverflow.com/a/2803010) a JavaScript number has. Our tokens array would finally look like this, and the map array would be reused for the entire file:
   81  
   82: ```javascript
   83  tokens = [

  132  
  133: TextMate grammars, through their use of begin/end states, or while states, can push scopes that can span multiple tokens. Here's the same example under a JavaScript TextMate Grammar (ignoring whitespace for brevity):
  134  

  146  
  147: ```javascript
  148  tokens = [

  168  
  169: ```javascript
  170  tokens = [

  198  
  199: ```javascript
  200  //            C                     B                             A

  395  
  396: Probably most important, the number one most voted feature for the editor is [minimap support](https://github.com/microsoft/vscode/issues/4865). To render a minimap in a reasonable amount of time, we cannot use DOM nodes and CSS matching. We will probably use a canvas, and we're going to need to know the color of each token in JavaScript, so we can paint those tiny letters with the right colors.
  397  

  513  
  514: ```javascript
  515  // These are generated using the Monokai theme.

  549  
  550: The tokens are returned as an [Uint32Array](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint32Array) straight from the tokenizer. We hold on to the backing [ArrayBuffer](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/ArrayBuffer) and for the example above that takes 96 bytes in Chrome. The elements themselves should take only 32 bytes (8 x 32-bit numbers), but again we're probably observing some v8 metadata overhead.
  551  

blogs/2017/03/07/extension-pack-roundup.md:
  13  
  14: If you have followed our blog for the last year, you'll notice I write an Extension Roundup blog once a month. I like to write these blogs to let you know about the cool extensions being created in the community and to inspire you to create your own. I often put a theme around the Roundup blog: something like JavaScript extensions or CodeLens extensions (last month).
  15  

blogs/2017/05/10/build-2017-demo.md:
  39  
  40: * [Chrome Debugger](https://marketplace.visualstudio.com/items?itemName=msjsdiag.debugger-for-chrome) lets you debug your JavaScript code running in the Google Chrome browser or other targets that support the Chrome Debugging Protocol.
  41  

  47  
  48: * [ESLint](https://marketplace.visualstudio.com/items?itemName=dbaeumer.vscode-eslint) integrates [ESLint](https://eslint.org/) (a pluggable linting utility for JavaScript and JavaScript React (JSX) into VS Code.
  49  

  53  
  54: ``` javascript
  55  npm install -g vsce

blogs/2017/09/28/java-debug.md:
   2  Order:
   3: TOCTitle: Java Debugging
   4: PageTitle: Using Visual Studio Code to Debug Java Applications
   5: MetaDescription: Java Development with VS Code
   6  Date: 2017-09-28
   7: ShortDescription: Using VS Code to Debug Java Applications
   8  Author: Xiaokai He
   9  ---
  10: # Using VS Code to Debug Java Applications
  11  

  13  
  14: For Java developers on Visual Studio Code, the [Language Support for Java™ by Red Hat](https://marketplace.visualstudio.com/items?itemName=redhat.java) extension has been great for providing language features such as IntelliSense and project support. At the same time, we've also heard feedback that users would also like Java debugging. Today, we're excited to announce our ongoing collaboration with Red Hat and enabling Java developers to debug Java applications with a new lightweight [Debugger for Java](https://marketplace.visualstudio.com/items?itemName=vscjava.vscode-java-debug) based on [Java Debug Server](https://github.com/microsoft/java-debug).
  15  
  16: ![Java debug extension](java-debug-extension.png)
  17  
  18: To help Java developers to get started with VS Code quickly, we also created an [Extension Pack for Java](https://marketplace.visualstudio.com/items?itemName=vscjava.vscode-java-pack) which includes both the [Language Support for Java™ by Red Hat](https://marketplace.visualstudio.com/items?itemName=redhat.java) and [Debugger for Java](https://marketplace.visualstudio.com/items?itemName=vscjava.vscode-java-debug) extensions so you won't need to search for them individually. This is just the start to creating a modern workflow for Java and we'll be adding more features and extensions to the **Extension Pack for Java** in the future.
  19  

  24  1. In Visual Studio Code, open the **Extensions** view (`kb(workbench.view.extensions)`).
  25: 2. Type "java" to filter the list.
  26: 3. Find and install the [Extension Pack for Java](https://marketplace.visualstudio.com/items?itemName=vscjava.vscode-java-pack) or standalone [Debugger for Java](https://marketplace.visualstudio.com/items?itemName=vscjava.vscode-java-debug) extension if you already have [Language Support for Java™ by Red Hat](https://marketplace.visualstudio.com/items?itemName=redhat.java) installed.
  27  
  28: You also install the **Extension Pack for Java** directly from this blog post:
  29  
  30: <a class="install-extension-btn" href="vscode:extension/vscjava.vscode-java-pack">Install the Extension Pack for Java</a>
  31  
  32: After reloading VS Code, open a folder that contains a Java project and follow below steps:
  33  
  34: 1. Prepare the project. Open a `.java` file, and the Java extensions will be activated. Maven, Gradle and Eclipse projects are supported. Project build is automatically handled by the extensions, no need to be triggered manually.
  35: 2. Start debugging. Switch to **Run** view (`kb(workbench.view.debug)`) and open `launch.json` to add a debug configuration for Java.
  36  3. Fill in the `mainClass` for `Launch` setting or `hostName` and `port` for `Attach`.

  38  
  39: ![Debugging Java Application](java-debug.gif)
  40  

  44  
  45: - **Launch/Attach** - You can either launch the Java project within VS Code or attach to any running JVM process in debug mode, locally or remotely.
  46  - **Breakpoints** - Conditional breakpoints by Hit Count is supported and can easily be set using the inline breakpoint settings window. This allows you to conveniently add conditional breakpoints to your code, directly in the source viewer, without requiring a modal window. Break on exceptions is also supported.

  55  
  56: - Checkout more about [Java on VS Code](/docs/languages/java.md)
  57  

  59  
  60: Please share your feedback and ask questions to help us improve. You can contact us on [Gitter](https://gitter.im/Microsoft/vscode-java-debug).
  61  
  62: Xiaokai He, [@JavaOnAzure](https://twitter.com/JavaOnAzure)

blogs/2017/10/03/terminal-renderer.md:
  35  
  36: The [`<canvas>` HTML element](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/canvas) allows drawing graphics and text using a JavaScript API.
  37  

blogs/2017/11/16/connect.md:
  31  
  32: * **Java and Python support** - We're getting serious about [Python](/docs/languages/python) and [Java](/docs/languages/java) for VS Code by staffing full time teams.  There was a nice demo of this support in the Visual Studio General Session showing debugging of an Azure Java Function and running Python unit tests.
  33  

blogs/2017/12/20/chrome-debugging.md:
  14  
  15: Over the recent months, we have been busy improving the Chrome debugging experience for Visual Studio Code, and today we are happy to release three new features that we think will make client-side JavaScript debugging in VS Code easier and more reliable.
  16  
  17: If you aren't familiar with the Microsoft [Debugger for Chrome](https://marketplace.visualstudio.com/items?itemName=msjsdiag.debugger-for-chrome) extension, it allows you to debug your client-side JavaScript running in Google Chrome. This adds a new aspect to VS Code's existing JavaScript debugging experience, where out-of-the-box you can debug your server-side JavaScript in Node.js. Having both debuggers installed allows you to do seamless full-stack JavaScript debugging.
  18  

  24  
  25: Multiple connections means that you now can debug your JavaScript from VS Code while using the DOM Explorer, profiler or any other tool inside Chrome DevTools, without getting disconnected!
  26  

  32  
  33: We think being able to combine VS Code and Chrome DevTools is an extremely powerful experience. It enables you to pick the right tool for the scenario, without being forced to make the hard choice of replacing one tool with another. VS Code lets you debug JavaScript in your editor, but we also recognize that some users prefer to debug JavaScript from DevTools, so instead of trying to replace DevTools, we instead see this as an opportunity to integrate.
  34  

  38  
  39: Synchronized stepping allows you to debug your JavaScript source code in VS Code and Chrome DevTools at the same time, and gives you the opportunity to seamlessly jump between the two tools. From within each tool, you can step-in, continue, and debug your JavaScript without worrying about the other debugger getting out of sync.
  40  

  49  
  50: Another feature we have been working on with [our friends in Visual Studio](https://github.com/microsoft/vscode-chrome-debug-core/pull/241) is the ab` to the debug console, as Express.js does by default.  If the application logs a different message, then you should set the `pattern` property of the [dockerServerReadyAction](/docs/containers/debug-common.md#dockerserverreadyaction-object-properties) object of the debug launch configuration to a [JavaScript regular expression](https://developer.mozilla.org/docs/Web/JavaScript/Guide/Regular_Expressions) that matches that message. The regular expression should include a capture group that corresponds to the port on which the application is listening.
  121  

docs/containers/debug-python.md:
  105  
  106: - `pattern`: If the application logs a different message than shown above, set the `pattern` property of the [dockerServerReadyAction](/docs/containers/debug-common.md#dockerserverreadyaction-object-properties) object to a [JavaScript regular expression](https://developer.mozilla.org/docs/Web/JavaScript/Guide/Regular_Expressions) that matches that message. The regular expression should include a capture group that corresponds to the port on which the application is listening.
  107  - `uriFormat`: By default, the Docker extension will open the main page of the browser (however that is determined by the application). If you want the browser to open a specific page like the example above, the `uriFormat` property of the [dockerServerReadyAction](/docs/containers/debug-common.md#dockerserverreadyaction-object-properties) object should be set to a format string with two string tokens to indicate the protocol and port substitution.

docs/containers/overview.md:
  37  
  38: The extension can scaffold Docker files for most popular development languages (C#, Node.js, Python, Ruby, Go, and Java) and customizes the generated Docker files accordingly. When these files are created, we also create the necessary artifacts to provide debugging support for Node.js, Python, and .NET (C#).
  39  

docs/copilot/ai-powered-suggestions.md:
  28  
  29: Notice in the following example how Copilot suggests an implementation of the `calculateDaysBetweenDates` JavaScript function by using dimmed *ghost text*:
  30  
  31: ![JavaScript ghost text suggestion.](images/inline-suggestions/js-suggest.png)
  32  

  36  
  37: ![JavaScript ghost text suggestion.](images/inline-suggestions/ts-suggest-parameter-names.png)
  38  

  93  
  94: Or check out the [VS Code Copilot Series](https://www.youtube.com/playlist?list=PLj6YeMhvp2S5_hvBl2SE-7YCHYlLQ0bPt) on YouTube, where you can find more introductory content and programming-specific videos for using Copilot with [Python](https://www.youtube.com/watch?v=DSHfHT5qnGc), [C#](https://www.youtube.com/watch?v=VsUQlSyQn1E), [Java](https://www.youtube.com/watch?v=zhCB95cE0HY), [PowerShell](https://www.youtube.com/watch?v=EwtRzAFiXEM), and more.

docs/copilot/copilot-chat.md:
  290  
  291: Or check out the [VS Code Copilot Series](https://www.youtube.com/playlist?list=PLj6YeMhvp2S5_hvBl2SE-7YCHYlLQ0bPt) on YouTube, where you can find more introductory content and programming-specific videos for using Copilot with [Python](https://www.youtube.com/watch?v=DSHfHT5qnGc), [C#](https://www.youtube.com/watch?v=VsUQlSyQn1E), [Java](https://www.youtube.com/watch?v=zhCB95cE0HY), [PowerShell](https://www.youtube.com/watch?v=EwtRzAFiXEM), and more.
  292  

docs/copilot/getting-started-chat.md:
  50  
  51:     The response contains step-by-step instructions for setting up an Express.js app. Notice that the output combines code blocks with shell commands, and JavaScript code.
  52  

  60  
  61: Even to create a simple Express.js application involves creating multiple files: a JavaScript file to set up the server, a `package.json`, HTML (template) files, and more. Rather than asking Copilot to generate each individual file, you can instruct it to create an entire workspace for you.
  62  

docs/copilot/overview.md:
   56  
   57:     ![Inline chat suggests the implementation of a 'CalculateDaysBetweenDates' JavaScript function](images/overview/js-suggest.png)
   58  

   60  
   61: * **Provide guidance and support for common coding tasks and challenges**. Ask Copilot about syntax or general programming concepts without requiring to navigate documentation or search online forums. Copilot gives responses in natural language format or in code snippet format. For example, you can ask questions such as "what is recursion?" or "how to create a singleton in Java?".
   62  

  132  
  133: Or check out the [VS Code Copilot Series](https://www.youtube.com/playlist?list=PLj6YeMhvp2S5_hvBl2SE-7YCHYlLQ0bPt) on YouTube, where you can find more introductory content and programming-specific videos for using Copilot with [Python](https://www.youtube.com/watch?v=DSHfHT5qnGc), [C#](https://www.youtube.com/watch?v=VsUQlSyQn1E), [Java](https://www.youtube.com/watch?v=zhCB95cE0HY), [PowerShell](https://www.youtube.com/watch?v=EwtRzAFiXEM), and more.

docs/csharp/cs-dev-kit-faq.md:
  191  
  192: If you're trying to debug .NET Console Applications, Blazor Server Apps, Blazor WebAssembly, or Web Applications, make sure to select the **C#** option. The other options may be part of other extensions such as **Node** for JavaScript debugging or **Python** for Python debugging, and are not part of C# Dev Kit.
  193  

docs/csharp/intellicode.md:
  51  
  52: To get IntelliCode whole-line autocompletions for Python, JavaScript, and TypeScript in VS Code, install the general [IntelliCode](https://marketplace.visualstudio.com/items?itemName=VisualStudioExptTeam.vscodeintellicode) extension. The general extension also ranks methods and properties in the IntelliSense list with stars for Python and SQL, in addition to the languages supported for whole-line autocomplete.
  53  

docs/datascience/jupyter-notebooks.md:
  238  
  239: More complex filtering can be done by typing a [regular expression](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Regular_Expressions):
  240  

docs/datascience/overview.md:
  46  
  47: Learn C#, F#, Powershell, JavaScript, HTML, SQL, KQL (Kusto Query Language), and [Mermaid](https://mermaid.js.org/intro/) with the [Polyglot Notebooks](https://marketplace.visualstudio.com/items?itemName=ms-dotnettools.dotnet-interactive-vscode) extension.
  48  

docs/devcontainers/containers.md:
  294  
  295: > **Note:** Additional configuration will already be added to the container based on what's in the base image. For example, we add the `streetsidesoftware.code-spell-checker` extension above, and the container will also include `"dbaeumer.vscode-eslint"` as [that's part of `mcr.microsoft.com/devcontainers/typescript-node`](https://github.com/devcontainers/images/blob/main/src/javascript-node/.devcontainer/devcontainer.json#L27). This happens automatically when pre-building using `devcontainer.json`, which you may read more about in the [pre-build section](#prebuilding-dev-container-images).
  296  

  529  
  530: For example, adding this to `.devcontainer/devcontainer.json` will set the Java home path:
  531  

  537          "settings": {
  538:             "java.home": "/docker-java-home"
  539          }

docs/devcontainers/create-dev-container.md:
   64  
   65: > **Note:** Additional configuration will already be added to the container based on what's in the base image. For example, we add the `streetsidesoftware.code-spell-checker` extension above, and the container will also include `"dbaeumer.vscode-eslint"` as [that's part of `mcr.microsoft.com/devcontainers/typescript-node`](https://github.com/devcontainers/images/blob/main/src/javascript-node/.devcontainer/devcontainer.json#L27). This happens automatically when pre-building using devcontainer.json, which you may read more about in the [pre-build section](/docs/devcontainers/containers.md#prebuilding-dev-container-images).
   66  

  190  ```docker
  191: FROM mcr.microsoft.com/devcontainers/javascript-node:0-18
  192  RUN apt-get update && export DEBIAN_FRONTEND=noninteractive \

  263  * [Existing Docker Compose](https://github.com/devcontainers/templates/tree/main/src/docker-existing-docker-compose) - Includes a set of files that you can drop into an existing project that will reuse a `docker-compose.yml` file in the root of your project.
  264: * [Node.js & MongoDB](https://github.com/devcontainers/templates/tree/main/src/javascript-node-mongo) -  A Node.js container that connects to a MongoDB database in a different container.
  265  * [Python & PostgreSQL](https://github.com/devcontainers/templates/tree/main/src/postgres) -  A Python container that connects to PostgreSQL in a different container.

  354  
  355: You can see an example of `network_mode: service:db` in the [Node.js and MongoDB example dev container](https://github.com/devcontainers/templates/tree/main/src/javascript-node-mongo).
  356  

  445  
  446: As an example, a badge to open [https://github.com/microsoft/vscode-remote-try-java](https://github.com/microsoft/vscode-remote-try-java) would look like:
  447  
  448  ```markdown
  449: [![Open in Dev Containers](https://img.shields.io/static/v1?label=Dev%20Containers&message=Open&color=blue&logo=visualstudiocode)](https://vscode.dev/redirect?url=vscode://ms-vscode-remote.remote-containers/cloneInVolume?url=https://github.com/microsoft/vscode-remote-try-java)
  450  ```

  454  ```markdown
  455: If you already have VS Code and Docker installed, you can click the badge above or [here](https://vscode.dev/redirect?url=vscode://ms-vscode-remote.remote-containers/cloneInVolume?url=https://github.com/microsoft/vscode-remote-try-java) to get started. Clicking these links will cause VS Code to automatically install the Dev Containers extension if needed, clone the source code into a container volume, and spin up a dev container for use.
  456  ```

docs/devcontainers/tutorial.md:
   70  
   71: **Note**: There are other dev container samples such as `vscode-remote-try-python` or `vscode-remote-try-java`, but this tutorial will use `vscode-remote-try-node`.
   72  

  116  
  117: In the example we just explored, the project has a `.devcontainer` folder with a `devcontainer.json` inside. The `devcontainer.json` uses the image `mcr.microsoft.com/devcontainers/javascript-node:0-18`. You can explore this image in greater detail in the [devcontainers/images](https://github.com/devcontainers/images/tree/main/src/javascript-node) repo.
  118  
  119: First, your image is built from the supplied Dockerfile or image name, which would be `mcr.microsoft.com/devcontainers/javascript-node:0-18` in this example. Then a container is created and started using some of the settings in the `devcontainer.json`. Finally your Visual Studio Code environment is installed and configured again according to settings in the `devcontainer.json`. For example, the dev container in this example installs the `streetsidesoftware.code-spell-checker` extension.
  120  
  121: > **Note:** Additional configuration will already be added to the container based on what's in the base image. For example, we see the `streetsidesoftware.code-spell-checker` extension above, and the container will also include `"dbaeumer.vscode-eslint"` as [that's part of `mcr.microsoft.com/devcontainers/typescript-node`](https://github.com/devcontainers/images/blob/main/src/javascript-node/.devcontainer/devcontainer.json#L27). This happens automatically when pre-building using devcontainer.json, which you may read more about in the [pre-build section](/docs/devcontainers/containers.md#prebuilding-dev-container-images).
  122  

  136      // Or use a Dockerfile or Docker Compose file. More info: https://containers.dev/guide/dockerfile
  137:     "image": "mcr.microsoft.com/devcontainers/javascript-node:0-18",
  138  

docs/editor/codebasics.md:
  257  
  258: We'll always offer word completion, but for the rich [languages](/docs/languages/overview.md), such as JavaScript, JSON, HTML, CSS, SCSS, Less, C# and TypeScript, we offer a true IntelliSense experience. If a language service knows possible completions, the IntelliSense suggestions will pop up as you type. You can always manually trigger it with `kb(editor.action.triggerSuggest)`.  By default, `kbstyle(Tab)` or `kbstyle(Enter)` are the accept keyboard triggers but you can also [customize these key bindings](/docs/getstarted/keybindings.md).
  259  

  263  
  264: JavaScript and TypeScript developers can take advantage of the [npmjs](https://www.npmjs.com) type declaration (typings) file repository to get IntelliSense for common JavaScript libraries (Node.js, React, Angular). You can find a good explanation on using type declaration files in the [JavaScript language](/docs/languages/javascript.md#intellisense) topic and the [Node.js](/docs/nodejs/nodejs-tutorial.md) tutorial.
  265  

  276  
  277: VS Code has default formatters for JavaScript, TypeScript, JSON, HTML, and CSS. Each language has specific formatting options (for example, `html.format.indentInnerHtml`) which you can tune to your preference in your user or workspace [settings](/docs/getstarted/settings.md). You can also disable the default language formatter if you have another extension installed that provides formatting for the same language.
  278  

  332  F#|`//#region` or `(#region)`|`//#endregion` or `(#endregion)`
  333: Java|`//#region` or `//<editor-fold>`|`//#endregion` or `//</editor-fold>`
  334  Markdown|`<!-- #region -->`|`<!-- #endregion -->`

  338  Python|`#region` or `# region`|`#endregion` or `# endregion`
  339: TypeScript/JavaScript|`//#region` |`//#endregion`
  340  Visual Basic|`#Region`|`#End Region`

docs/editor/debugging.md:
   18  
   19: VS Code has built-in debugging support for the [Node.js](https://nodejs.org/) runtime and can debug JavaScript, TypeScript, or any other language that gets transpiled to JavaScript.
   20  

   32  
   33: It is helpful to first create a sample Node.js application before reading about debugging. You can follow the [Node.js walkthrough](/docs/nodejs/nodejs-tutorial.md) to install Node.js and create a simple "Hello World" JavaScript application (`app.js`). Once you have a simple application set up, this page will take you through VS Code debugging features.
   34  

  184  
  185: **Note**: Logpoints are supported by VS Code's built-in Node.js debugger, but can be implemented by other debug extensions. The [Python](/docs/python/python-tutorial.md) and [Java](/docs/java/java-tutorial.md) extensions, for example, support Logpoints.
  186  

  464  
  465: ```javascript
  466  var express = require('express');

  538  * [Python](/docs/python/debugging.md)
  539: * [Java](/docs/java/java-debugging.md)
  540  

docs/editor/editingevolved.md:
  165  
  166: Some languages provide inlay hints: that is additional information about source code that is rendered inline. This is usually used to show inferred types. The sample below shows inlay hints that display the inferred types of JavaScript variables and function return types.
  167  

docs/editor/emmet.md:
   62  "emmet.includeLanguages": {
   63:   "javascript": "javascriptreact",
   64    "razor": "html",

  215    "emmet.includeLanguages": {
  216:     "javascript": "javascriptreact",
  217      "plaintext": "pug"

  264  
  265:   **Note:** In the `always` mode, the new Emmet implementation is not context aware. For example, if you are editing a JavaScript React file, you will get Emmet suggestions not only when writing markup but also while writing JavaScript.
  266  

docs/editor/extension-marketplace.md:
  65  
  66: This has been just one example of how to install and use an extension. The VS Code Marketplace has thousands of extensions supporting hundreds of programming languages and tasks. Everything from full featured language support for [Java](https://marketplace.visualstudio.com/items?itemName=redhat.java), [Python](https://marketplace.visualstudio.com/items?itemName=ms-python.python), [Go](https://marketplace.visualstudio.com/items?itemName=golang.Go), and [C++](https://marketplace.visualstudio.com/items?itemName=ms-vscode.cpptools) to simple extensions that [create GUIDs](https://marketplace.visualstudio.com/items?itemName=nwallace.createGUID), change the [color theme](https://marketplace.visualstudio.com/items?itemName=PKief.material-icon-theme), or add [virtual pets](https://marketplace.visualstudio.com/items?itemName=tonybaloney.vscode-pets) to the editor.
  67  

docs/editor/intellisense.md:
   17  
   18: Visual Studio Code IntelliSense is provided for JavaScript, TypeScript, JSON, HTML, CSS, SCSS, and Less out of the box. VS Code supports word based completions for any programming language but can also be configured to have richer IntelliSense by installing a language extension.
   19  

   27  
   28: You can trigger IntelliSense in any editor window by typing `kb(editor.action.triggerSuggest)` or by typing a trigger character (such as the dot character (`kbstyle(.)`) in JavaScript).
   29  

   43  
   44: When applicable, a language service will surface the underlying types in the quick info and method signatures. In the image above, you can see several `any` types. Because JavaScript is dynamic and doesn't need or enforce types, `any` suggests that the variable can be of any type.
   45  

   47  
   48: The JavaScript code below illustrates IntelliSense completions. IntelliSense gives both inferred proposals and the global identifiers of the project. The inferred symbols are presented first, followed by the global identifiers (shown by the Word icon).
   49  

   85  
   86: ```javascript
   87  {

   94  
   95:      // Controls whether suggestions should be accepted on commit characters. For example, in JavaScript, the semi-colon (`;`) can be a commit character that accepts a suggestion and types that character.
   96      "editor.acceptSuggestionOnCommitCharacter": true,

  203  
  204: > **Tip:** For configuring and troubleshooting JavaScript IntelliSense, see the [JavaScript documentation](/docs/languages/javascript.md#intellisense).
  205  

  211  
  212: * [JavaScript](/docs/languages/javascript.md) - Get the most out of your JavaScript development, including configuring IntelliSense.
  213  * [Node.js](/docs/nodejs/nodejs-tutorial.md) - See an example of IntelliSense in action in the Node.js walkthrough.

  223  
  224: This can be caused by a variety of reasons. First, try restarting VS Code. If the problem persists, consult the language extension's documentation. For JavaScript specific troubleshooting, please see the [JavaScript language topic](/docs/languages/javascript.md#intellisense).
  225  

  229  
  230: This issue is caused by missing type declaration (typings) files in JavaScript. You can check if a type declaration file package is available for a specific library by using the [TypeSearch](https://microsoft.github.io/TypeSearch) site. There is more information about this issue in the [JavaScript language topic](/docs/languages/javascript.md#intellisense). For other languages, please consult the extension's documentation.

docs/editor/profiles.md:
  142  
  143: Since profiles are remembered per workspace, they are a great way to customize VS Code for a specific programming language. For example, you can create a JavaScript frontend profile that includes the extensions, settings, and customizations you use for JavaScript development in one workspace, and have a Python backend profile that includes the extensions, settings, and customizations you use for Python development in another workspace. Using this approach, you can easily switch between workspaces and always have VS Code configured the right way.
  144  

  256  
  257: * [ESLint](https://marketplace.visualstudio.com/items?itemName=dbaeumer.vscode-eslint) - Integrates ESLint JavaScript into VS Code.
  258  * [Dev Containers](https://marketplace.visualstudio.com/items?itemName=ms-vscode-remote.remote-containers) - Create custom development environments inside a Docker container.

  261  * [EditorConfig for VS Code](https://marketplace.visualstudio.com/items?itemName=EditorConfig.EditorConfig) - EditorConfig Support for Visual Studio Code.
  262: * [JavaScript (ES6) code snippets](https://marketplace.visualstudio.com/items?itemName=xabikos.JavaScriptSnippets) - Code snippets for JavaScript in ES6 syntax.
  263  * [Jest](https://marketplace.visualstudio.com/items?itemName=Orta.vscode-jest) -  Use Facebook's [jest](https://jestjs.io) testing framework.

  286      },
  287:     "[javascript]": {
  288          "editor.defaultFormatter": "esbenp.prettier-vscode"

  303  * [EditorConfig for VS Code](https://marketplace.visualstudio.com/items?itemName=EditorConfig.EditorConfig) - EditorConfig Support for Visual Studio Code.
  304: * [ESLint](https://marketplace.visualstudio.com/items?itemName=dbaeumer.vscode-eslint) - Integrates ESLint JavaScript into VS Code.
  305: * [JavaScript (ES6) code snippets](https://marketplace.visualstudio.com/items?itemName=xabikos.JavaScriptSnippets) - Code snippets for JavaScript in ES6 syntax.
  306  * [Jest](https://marketplace.visualstudio.com/items?itemName=Orta.vscode-jest) - Use Facebook's [jest](https://jestjs.io) testing framework.

  330      },
  331:     "[javascript]": {
  332          "editor.defaultFormatter": "esbenp.prettier-vscode"

  339  
  340: ### Java General Profile Template
  341  
  342: The Java General profile is a good starting point for all Java work. It customizes the layout to improve the Java experience and comes with the following extensions from the [Extension Pack for Java](https://marketplace.visualstudio.com/items?itemName=vscjava.vscode-java-pack):
  343  
  344: * [Debugger for Java](https://marketplace.visualstudio.com/items?itemName=vscjava.vscode-java-debug) - A lightweight Java debugger.
  345  * [IntelliCode](https://marketplace.visualstudio.com/items?itemName=VisualStudioExptTeam.vscodeintellicode) - AI-assisted development.
  346  * [IntelliCode API Usage Examples](https://marketplace.visualstudio.com/items?itemName=VisualStudioExptTeam.intellicode-api-usage-examples) - Provides code examples for over 100K different APIs.
  347: * [Language Support for Java(TM) by Red Hat](https://marketplace.visualstudio.com/items?itemName=redhat.java) - Fundamental Java language support, Linting, Intellisense, formatting, refactoring.
  348: * [Maven for Java](https://marketplace.visualstudio.com/items?itemName=vscjava.vscode-maven) - Manage [Maven](https://maven.apache.org) projects and builds.
  349: * [Project Manager for Java](https://marketplace.visualstudio.com/items?itemName=vscjava.vscode-java-dependency) - Manage Java projects within VS Code.
  350: * [Test Runner for Java](https://marketplace.visualstudio.com/items?itemName=vscjava.vscode-java-test) - Run and debug JUnit or TestNG test cases.
  351  
  352: ### Java Spring Profile Template
  353  
  354: The Java Spring profile is a good starting point for all Java and Spring developers. It builds on the Java General profile and add the following extensions from the [Spring Boot Extension Pack](https://marketplace.visualstudio.com/items?itemName=vmware.vscode-boot-dev-pack):
  355  
  356: * [Spring Boot Dashboard](https://marketplace.visualstudio.com/items?itemName=vscjava.vscode-spring-boot-dashboard) - Provides Spring Boot live data visualization and observation in your running Spring applications.
  357  * [Spring Boot Tools](https://marketplace.visualstudio.com/items?itemName=vmware.vscode-spring-boot) - Rich language support for Spring Boot files.
  358: * [Spring Initializr Java Support](https://marketplace.visualstudio.com/items?itemName=vscjava.vscode-spring-initializr) - Scaffold and generate Spring Boot Java projects.
  359  

  362  ```json
  363:     "[java]": {
  364:         "editor.defaultFormatter": "redhat.java"
  365      },
  366:     "boot-java.rewrite.reconcile": true
  367  ```

docs/editor/refactoring.md:
  17  
  18: Refactorings are provided by a language service. VS Code has built-in support for TypeScript and JavaScript refactoring through the [TypeScript](https://www.typescriptlang.org/) language service. Refactoring support for other programming languages is enabled through VS Code [extensions](/docs/editor/extension-marketplace.md) that contribute language services.
  19  

docs/editor/tasks.md:
   23  
   24: Let's start with a simple "Hello World" TypeScript program that we want to compile to JavaScript.
   25  

   48  
   49: The first entry executes the TypeScript compiler and translates the TypeScript file to a JavaScript file. When the compiler has finished, there should be a `HelloWorld.js` file. The second entry starts the TypeScript compiler in watch mode. Every save to the `HelloWorld.ts` file will regenerate the `HelloWorld.js` file.
   50  

   77  
   78: VS Code currently auto-detects tasks for the following systems: Gulp, Grunt, Jake, and npm. We are working with the corresponding extension authors to add support for Maven and the C# `dotnet` command as well. If you develop a JavaScript application using Node.js as the runtime, you usually have a `package.json` file describing your dependencies and the scripts to run. If you have cloned the [eslint-starter](https://github.com/spicydonuts/eslint-starter) example, then executing **Run Tasks** from the global menu shows the following list:
   79  

  380  
  381: As mentioned above, you can customize auto-detected tasks in the `tasks.json` file. You usually do so to modify presentation properties or to attach a problem matcher to scan the task's output for errors and warnings. You can customize a task directly from the **Run Task** list by pressing the gear icon to the right to insert the corresponding task reference into the `tasks.json` file. Assume you have the following Gulp file to lint JavaScript files using ESLint (the file is taken from [https://github.com/adametry/gulp-eslint](https://github.com/adametry/gulp-eslint)):
  382  

  608  
  609: ### Transpiling TypeScript to JavaScript
  610  
  611: The [TypeScript topic](/docs/typescript/typescript-compiling.md) includes an example that creates a task to transpile TypeScript to JavaScript and observe any related errors from within VS Code.
  612  

  631  
  632: >**Tip:** We have found the [RegEx101 playground](https://regex101.com/), which has an ECMAScript (JavaScript) flavor, to be a great way to develop and test regular expressions.
  633  

  725  {
  726:     "owner": "javascript",
  727      "fileLocation": ["relative", "${workspaceFolder}"],

  767  {
  768:     "owner": "javascript",
  769      "fileLocation": ["relative", "${workspaceFolder}"],

docs/editor/userdefinedsnippets.md:
   21  
   22: VS Code has built-in snippets for a number of languages such as: JavaScript, TypeScript, Markdown, and PHP.
   23  
   24: ![builtin javascript snippet](images/userdefinedsnippets/builtin-javascript-snippets.png)
   25  

   43  
   44: Below is an example of a `for` loop snippet for JavaScript:
   45  
   46  ```json
   47: // in file 'Code/User/snippets/javascript.json'
   48  {

   90  
   91: Single-language user-defined snippets are defined in a specific language's snippet file (for example `javascript.json`), which you can access by language identifier through **Snippets: Configure User Snippets**. A snippet is only accessible when editing the language for which it is defined.
   92  

  166  
  167: The snippet below inserts `/* Hello World */` in JavaScript files and `<!-- Hello World -->` in HTML files:
  168  

  171      "hello": {
  172:         "scope": "javascript,html",
  173          "prefix": "hello",

  240                  | '${' int ':-' else '}' | '${' int ':' else '}'
  241: regex       ::= JavaScript Regular Expression value (ctor-string)
  242: options     ::= JavaScript Regular Expression option (ctor-options)
  243  var         ::= [_a-zA-Z] [_a-zA-Z0-9]*

docs/editor/vscode-web.md:
  143  
  144: * **Good:** For most programming languages, VS Code for the Web gives you code syntax colorization, text-based completions, and bracket pair colorization. Using a [Tree-sitter](https://tree-sitter.github.io/tree-sitter) syntax tree through the [anycode extension](https://marketplace.visualstudio.com/items?itemName=ms-vscode.anycode), we're able to provide additional experiences such as **Outline/Go to Symbol** and **Symbol Search** for popular languages such as C/C++, C#, Java, PHP, Rust, and Go.
  145: * **Better:** The TypeScript, JavaScript, and Python experiences are all powered by language services that run natively in the browser. With these programming languages, you'll get the "**Good**" experience plus rich single file completions, semantic highlighting, syntax errors, and more.
  146  * **Best:** For many "webby" languages, such as JSON, HTML, CSS, and LESS, etc., the coding experience in vscode.dev is nearly identical to the desktop (including Markdown preview!).

  169  
  170: There are also extensions that run in the browser with partial support only. A good example is a language extension that [restricts its support](/docs/nodejs/working-with-javascript.md#partial-intellisense-mode) to single files or the currently opened files.
  171  

docs/editor/whyvscode.md:
  37  
  38: VS Code includes enriched built-in support for Node.js development with JavaScript and TypeScript, powered by the same underlying technologies that drive Visual Studio. VS Code also includes great tooling for web technologies such as JSX/React, HTML, CSS, SCSS, Less, and JSON.
  39  

  41  
  42: Architecturally, Visual Studio Code combines the best of web, native, and language-specific technologies. Using [Electron](https://github.com/electron/electron), VS Code combines web technologies such as JavaScript and Node.js with the speed and flexibility of native apps. VS Code uses a newer, faster version of the same industrial-strength HTML-based editor that has powered the "Monaco" cloud editor, Internet Explorer's F12 Tools, and other projects. Additionally, VS Code uses a tools service architecture that enables it to integrate with many of the same technologies that power Visual Studio, including Roslyn for .NET, TypeScript, the Visual Studio debugging engine, and more.
  43  

docs/getstarted/locales.md:
  19  
  20: >**Note**: This article explains how to change the display language in the VS Code UI via Language Packs such as French or Chinese. If you want to add programming language support, for example for C++ or Java, refer to the [Programming Languages](/docs/languages/overview.md) section of the documentation.
  21  

  93  
  94: Refer to the [Programming Languages](/docs/languages/overview.md) section to learn how to install support for programming languages, such as PHP, Python, and Java.

docs/getstarted/settings.md:
   237  
   238: You can configure language specific editor settings for multiple languages at once. The following example shows how you can customize settings for `javascript` and `typescript` languages together in your `settings.json` file:
   239  
   240  ```json
   241: "[javascript][typescript]": {
   242    "editor.maxTokenizationLineLength": 2500

   303  
   304: If you are using [multiple language-specific settings](#multiple-languagespecific-editor-settings), be aware that language-specific settings are merged and precedence is set based on the full language string (for example `"[typescript][javascript]"`) and not the individual language IDs (`typescript` and `javascript`). This means that for example, a `"[typescript][javascript]"` workspace setting will not override a `"[javascript]"` user setting.
   305  

   409  
   410:     // Controls whether suggestions should be accepted on commit characters. For example, in JavaScript, the semi-colon (`;`) can be a commit character that accepts a suggestion and types that character.
   411      "editor.acceptSuggestionOnCommitCharacter": true,

  2245  
  2246:     // Controls whether the Explorer should render folders in a compact form. In such a form, single child folders will be compressed in a combined tree element. Useful for Java package structures, for example.
  2247      "explorer.compactFolders": true,

  2928      // Enable/disable automatic closing of JSX tags.
  2929:     "javascript.autoClosingTags": true,
  2930  
  2931:     // Enable/disable default JavaScript formatter.
  2932:     "javascript.format.enable": true,
  2933  
  2934      // Defines space handling after a comma delimiter.
  2935:     "javascript.format.insertSpaceAfterCommaDelimiter": true,
  2936  
  2937      // Defines space handling after the constructor keyword.
  2938:     "javascript.format.insertSpaceAfterConstructor": false,
  2939  
  2940      // Defines space handling after function keyword for anonymous functions.
  2941:     "javascript.format.insertSpaceAfterFunctionKeywordForAnonymousFunctions": true,
  2942  
  2943      // Defines space handling after keywords in a control flow statement.
  2944:     "javascript.format.insertSpaceAfterKeywordsInControlFlowStatements": true,
  2945  
  2946      // Defines space handling after opening and before closing empty braces.
  2947:     "javascript.format.insertSpaceAfterOpeningAndBeforeClosingEmptyBraces": true,
  2948  
  2949      // Defines space handling after opening and before closing JSX expression braces.
  2950:     "javascript.format.insertSpaceAfterOpeningAndBeforeClosingJsxExpressionBraces": false,
  2951  
  2952      // Defines space handling after opening and before closing non-empty braces.
  2953:     "javascript.format.insertSpaceAfterOpeningAndBeforeClosingNonemptyBraces": true,
  2954  
  2955      // Defines space handling after opening and before closing non-empty brackets.
  2956:     "javascript.format.insertSpaceAfterOpeningAndBeforeClosingNonemptyBrackets": false,
  2957  
  2958      // Defines space handling after opening and before closing non-empty parenthesis.
  2959:     "javascript.format.insertSpaceAfterOpeningAndBeforeClosingNonemptyParenthesis": false,
  2960  
  2961      // Defines space handling after opening and before closing template string braces.
  2962:     "javascript.format.insertSpaceAfterOpeningAndBeforeClosingTemplateStringBraces": false,
  2963  
  2964      // Defines space handling after a semicolon in a for statement.
  2965:     "javascript.format.insertSpaceAfterSemicolonInForStatements": true,
  2966  
  2967      // Defines space handling after a binary operator.
  2968:     "javascript.format.insertSpaceBeforeAndAfterBinaryOperators": true,
  2969  
  2970      // Defines space handling before function argument parentheses.
  2971:     "javascript.format.insertSpaceBeforeFunctionParenthesis": false,
  2972  
  2973      // Defines whether an open brace is put onto a new line for control blocks or not.
  2974:     "javascript.format.placeOpenBraceOnNewLineForControlBlocks": false,
  2975  
  2976      // Defines whether an open brace is put onto a new line for functions or not.
  2977:     "javascript.format.placeOpenBraceOnNewLineForFunctions": false,
  2978  

  2982      //  - remove: Remove unnecessary semicolons.
  2983:     "javascript.format.semicolons": "ignore",
  2984  
  2985      // Enable/disable inlay hints for member values in enum declarations:
  2986:     "javascript.inlayHints.enumMemberValues.enabled": false,
  2987  
  2988      // Enable/disable inlay hints for implicit return types on function signatures:
  2989:     "javascript.inlayHints.functionLikeReturnTypes.enabled": false,
  2990  
  2991      // Enable/disable inlay hints for parameter names:
  2992:     "javascript.inlayHints.parameterNames.enabled": "none",
  2993  
  2994      // Suppress parameter name hints on arguments whose text is identical to the parameter name.
  2995:     "javascript.inlayHints.parameterNames.suppressWhenArgumentMatchesName": true,
  2996  
  2997      // Enable/disable inlay hints for implicit parameter types:
  2998:     "javascript.inlayHints.parameterTypes.enabled": false,
  2999  
  3000      // Enable/disable inlay hints for implicit types on property declarations:
  3001:     "javascript.inlayHints.propertyDeclarationTypes.enabled": false,
  3002  
  3003      // Enable/disable inlay hints for implicit variable types:
  3004:     "javascript.inlayHints.variableTypes.enabled": false,
  3005  
  3006      // Suppress type hints on variables whose name is identical to the type name.
  3007:     "javascript.inlayHints.variableTypes.suppressWhenTypeMatchesName": true,
  3008  
  3009      // Specify glob patterns of files to exclude from auto imports.
  3010:     "javascript.preferences.autoImportFileExcludePatterns": [],
  3011  

  3016      //  - project-relative: Prefers a non-relative import only if the relative import path would leave the package or project directory.
  3017:     "javascript.preferences.importModuleSpecifier": "shortest",
  3018  

  3023      //  - js: Do not shorten path endings; include the `.js` or `.ts` extension.
  3024:     "javascript.preferences.importModuleSpecifierEnding": "auto",
  3025  
  3026      // Preferred style for JSX attribute completions.
  3027:     //  - auto: Insert `={}` or `=""` after attribute names based on the prop type. See `javascript.preferences.quoteStyle` to control the type of quotes used for string attributes.
  3028      //  - braces: Insert `={}` after attribute names.
  3029      //  - none: Only insert attribute names.
  3030:     "javascript.preferences.jsxAttributeCompletionStyle": "auto",
  3031  

  3035      //  - double: Always use double quotes: `"`
  3036:     "javascript.preferences.quoteStyle": "auto",
  3037  
  3038      // When on a JSX tag, try to rename the matching tag instead of renaming the symbol.
  3039:     "javascript.preferences.renameMatchingJsxTags": true,
  3040  

  3042      // Enable/disable introducing aliases for object shorthand properties during renames.
  3043:     "javascript.preferences.renameShorthandProperties": true,
  3044  
  3045      // Enable/disable introducing aliases for object shorthand properties during renames.
  3046:     "javascript.preferences.useAliasesForRenames": true,
  3047  
  3048      // Makes Go to Definition avoid type declaration files when possible by triggering Go to Source Definition instead. This allows Go to Source Definition to be triggered with the mouse gesture.
  3049:     "javascript.preferGoToSourceDefinition": false,
  3050  
  3051:     // Enable/disable references CodeLens in JavaScript files.
  3052:     "javascript.referencesCodeLens.enabled": false,
  3053  
  3054:     // Enable/disable references CodeLens on all functions in JavaScript files.
  3055:     "javascript.referencesCodeLens.showOnAllFunctions": false,
  3056  
  3057      // Enable/disable auto import suggestions.
  3058:     "javascript.suggest.autoImports": true,
  3059  
  3060      // Enable/disable snippet completions for class members.
  3061:     "javascript.suggest.classMemberSnippets.enabled": true,
  3062  
  3063      // Complete functions with their parameter signature.
  3064:     "javascript.suggest.completeFunctionCalls": false,
  3065  
  3066      // Enable/disable suggestion to complete JSDoc comments.
  3067:     "javascript.suggest.completeJSDocs": true,
  3068  
  3069      // Enabled/disable autocomplete suggestions.
  3070:     "javascript.suggest.enabled": true,
  3071  
  3072      // Enable/disable showing completions on potentially undefined values that insert an optional chain call. Requires strict null checks to be enabled.
  3073:     "javascript.suggest.includeAutomaticOptionalChainCompletions": true,
  3074  
  3075      // Enable/disable auto-import-style completions on partially-typed import statements.
  3076:     "javascript.suggest.includeCompletionsForImportStatements": true,
  3077  
  3078      // Enable/disable generating `@returns` annotations for JSDoc templates.
  3079:     "javascript.suggest.jsdoc.generateReturns": true,
  3080  
  3081:     // Enable/disable including unique names from the file in JavaScript suggestions. Note that name suggestions are always disabled in JavaScript code that is semantically checked using `@ts-check` or `checkJs`.
  3082:     "javascript.suggest.names": true,
  3083  
  3084      // Enable/disable suggestions for paths in import statements and require calls.
  3085:     "javascript.suggest.paths": true,
  3086  
  3087:     // Enable/disable suggestion diagnostics for JavaScript files in the editor.
  3088:     "javascript.suggestionActions.enabled": true,
  3089  

  3093      //  - never: Never rename paths and don't prompt.
  3094:     "javascript.updateImportsOnFileMove.enabled": "prompt",
  3095  
  3096:     // Enable/disable JavaScript validation.
  3097:     "javascript.validate.enable": true,
  3098  
  3099:     // Enable/disable semantic checking of JavaScript files. Existing `jsconfig.json` or `tsconfig.json` files override this setting.
  3100      "js/ts.implicitProjectConfig.checkJs": false,
  3101  
  3102:     // Enable/disable `experimentalDecorators` in JavaScript files that are not part of a project. Existing `jsconfig.json` or `tsconfig.json` files override this setting.
  3103      "js/ts.implicitProjectConfig.experimentalDecorators": false,

  3107  
  3108:     // Enable/disable strict function types in JavaScript and TypeScript files that are not part of a project. Existing `jsconfig.json` or `tsconfig.json` files override this setting.
  3109      "js/ts.implicitProjectConfig.strictFunctionTypes": true,
  3110  
  3111:     // Enable/disable strict null checks in JavaScript and TypeScript files that are not part of a project. Existing `jsconfig.json` or `tsconfig.json` files override this setting.
  3112      "js/ts.implicitProjectConfig.strictNullChecks": true,
  3113  
  3114:     // Set target JavaScript language version for emitted JavaScript and include library declarations.
  3115      "js/ts.implicitProjectConfig.target": "ES2020",

  3218  
  3219:     // Sets the locale used to report JavaScript and TypeScript errors. Defaults to use VS Code's locale.
  3220      "typescript.locale": "auto",

  3313  
  3314:     // Enabled/disable occasional surveys that help us improve VS Code's JavaScript and TypeScript support.
  3315      "typescript.surveys.enabled": true,

  3371      // Controls which files are searched by Go to Symbol in Workspace.
  3372:     //  - allOpenProjects: Search all open JavaScript or TypeScript projects for symbols.
  3373:     //  - currentProject: Only search for symbols in the current JavaScript or TypeScript project.
  3374      "typescript.workspaceSymbols.scope": "allOpenProjects",

  4719  
  4720:     // Configure settings to be overridden for the javascript language.
  4721:     "[javascript]":  {
  4722          "editor.maxTokenizationLineLength": 2500

  5071      // Enable Emmet abbreviations in languages that are not supported by default. Add a mapping here between the language and Emmet supported language.
  5072:     //  For example: `{"vue-html": "html", "javascript": "javascriptreact"}`
  5073      "emmet.includeLanguages": {},

  5495  
  5496: // JavaScript Debugger
  5497  

  5502      //  - disabled: Auto attach is disabled and not shown in status bar.
  5503:     "debug.javascript.autoAttachFilter": "disabled",
  5504  
  5505:     // Configures glob patterns for determining when to attach in "smart" `debug.javascript.autoAttachFilter` mode. `$KNOWN_TOOLS$` is replaced with a list of names of common test and code runners.
  5506:     "debug.javascript.autoAttachSmartPattern": [
  5507          "${workspaceFolder}/**",

  5512      // When debugging a remote web app, configures whether to automatically tunnel the remote server to your local machine.
  5513:     "debug.javascript.automaticallyTunnelRemoteServer": true,
  5514  
  5515      // Whether to stop when conditional breakpoints throw an error.
  5516:     "debug.javascript.breakOnConditionalError": false,
  5517  
  5518      // Where a "Run" and "Debug" code lens should be shown in your npm scripts. It may be on "all", scripts, on "top" of the script section, or "never".
  5519:     "debug.javascript.codelens.npmScripts": "top",
  5520  
  5521:     // Options used when debugging open links clicked from inside the JavaScript Debug Terminal. Can be set to "off" to disable this behavior, or "always" to enable debugging in all terminals.
  5522:     "debug.javascript.debugByLinkOptions": "on",
  5523  
  5524      // The default `runtimeExecutable` used for launch configurations, if unspecified. This can be used to config custom paths to Node.js or browser installations.
  5525:     "debug.javascript.defaultRuntimeExecutable": {
  5526          "pwa-node": "node"

  5529      // Default options used when debugging a process through the `Debug: Attach to Node.js Process` command.
  5530:     "debug.javascript.pickAndAttachOptions": {},
  5531  

  5533      // A common case to disable certificate verification can be done by passing `{ "https": { "rejectUnauthorized": false } }`.
  5534:     "debug.javascript.resourceRequestOptions": {},
  5535  
  5536:     // Default launch options for the JavaScript debug terminal and npm scripts.
  5537:     "debug.javascript.terminalOptions": {},
  5538  
  5539      // Configures whether sourcemapped file where the original file can't be read will automatically be unmapped. If this is false (default), a prompt is shown.
  5540:     "debug.javascript.unmapMissingSources": false,
  5541  

docs/getstarted/telemetry.md:
  129  
  130: The built-in **TypeScript and JavaScript Language Features** extension queries the `@types` domain at `https://registry.npmjs.org`.
  131  

docs/getstarted/themes.md:
  128  
  129: Some languages (currently: TypeScript, JavaScript, Java) provide semantic tokens. Semantic tokens are based on the language service's symbol understanding and are more accurate than the syntax tokens coming from the TextMate grammars that are driven by regular expressions. The semantic highlighting that is computed from the semantic tokens goes on top of syntax highlighting and can correct and enrich the highlighting as seen in the following example:
  130  

docs/getstarted/userinterface.md:
  124  
  125: >**Tip:** You can hide derived resources files, like `*.meta` in Unity, or `*.js` in a TypeScript project. For Unity to exclude the `*.cs.meta` files, the pattern to choose would be: `"**/*.cs.meta": true`. For TypeScript, you can exclude generated JavaScript for TypeScript files with: `"**/*.js": {"when": "$(basename).ts"}`.
  126  

docs/introvideos/codeediting.md:
  28    * **View** > **Explorer** (`kb(workbench.view.explorer)`)
  29: * Install the Node.js runtime to execute JavaScript code.
  30    * Find Node.js for your platform at [https://nodejs.org](https://nodejs.org)

  60  * [Tasks](/docs/editor/tasks.md) - Create tasks to use external tools inside VS Code.
  61: * [JavaScript Linters](/docs/languages/javascript.md#linters) - Install linters for JavaScript.
  62  * [Code Folding](/docs/editor/codebasics.md#folding) - See the details of source code folding.

docs/java/extensions.md:
    2  Order: 13
    3: Area: java
    4  TOCTitle: Extensions
    5  ContentId: 6076911c-276b-41a3-8510-0022c03c0ef6
    6: PageTitle: Java extensions for Visual Studio Code
    7  DateApproved: 1/4/2022
    8: MetaDescription: Popular Java extensions for Visual Studio Code
    9  ---
   10: # Java extensions for Visual Studio Code
   11  
   12: Thanks to the great Java community around Visual Studio Code, you can use a wide range of extensions to enhance your Java development experience.
   13  

   15  
   16: In this topic, we recommend a list of popular extensions helpful for different Java development scenarios.
   17  
   18: ## Fundamental Java development
   19  
   20: If you are looking for core Java development experience on Visual Studio Code (including Java code auto-completion, running / debugging / testing Java applications, Java project management, etc.), we recommend the [Extension Pack for Java](https://marketplace.visualstudio.com/items?itemName=vscjava.vscode-java-pack). This extension pack contains a list of popular Java extensions for fundamental Java development:
   21  
   22: 1. [Language Support for Java™ by Red Hat](https://marketplace.visualstudio.com/items?itemName=redhat.java)
   23: 2. [Debugger for Java](https://marketplace.visualstudio.com/items?itemName=vscjava.vscode-java-debug)
   24: 3. [Test Runner for Java](https://marketplace.visualstudio.com/items?itemName=vscjava.vscode-java-test)
   25: 4. [Maven for Java](https://marketplace.visualstudio.com/items?itemName=vscjava.vscode-maven)
   26: 5. [Project Manager for Java](https://marketplace.visualstudio.com/items?itemName=vscjava.vscode-java-dependency)
   27  6. [Visual Studio IntelliCode](https://marketplace.visualstudio.com/items?itemName=VisualStudioExptTeam.vscodeintellicode)
   28  
   29: <a class="install-extension-btn" href="vscode:extension/vscjava.vscode-java-pack">Install the Extension Pack for Java</a>
   30  
   31: To get started with this extension pack, you can visit [Getting Started with Java](/docs/java/java-tutorial.md) tutorial.
   32  

   36  
   37: Spring Boot is an open source, microservice-based Java web framework that is very popular among Java developers. There are great extensions provided by VMware and Microsoft for Spring Boot development.
   38  

   41  1. [Spring Boot Tools](https://marketplace.visualstudio.com/items?itemName=vmware.vscode-spring-boot)
   42: 2. [Spring Initializr Java Support](https://marketplace.visualstudio.com/items?itemName=vscjava.vscode-spring-initializr)
   43: 3. [Spring Boot Dashboard](https://marketplace.visualstudio.com/items?itemName=vscjava.vscode-spring-boot-dashboard)
   44  

   46  
   47: More Spring Boot related information can be found at the [Spring Boot](/docs/java/java-spring-boot.md) page.
   48  
   49: ## Gradle for Java
   50  
   51: Visual Studio Code offers support Gradle support via the [Gradle for Java](https://marketplace.visualstudio.com/items?itemName=vscjava.vscode-gradle) extension. To learn more how to use this extension, visit the [Gradle section](/docs/java/java-build.md#gradle) on Build Tools page.
   52  

   56  
   57: To learn more about how to work with Java application servers on Visual Studio Code, refer to the [Application Server](/docs/java/java-tomcat-jetty.md) page.
   58  

   65  
   66: ## Keymaps for other Java IDEs
   67  
   68: There are some extensions from the community for developers who might be used to the keyboard shortcuts from other Java IDEs.
   69  

  102  
  103: ## Search for other Java extensions
  104  
  105: If the extensions above do not meet your requirement, you can also search for other Java related extensions within Visual Studio Code. Here are the steps:
  106  
  107  1. Go to the **Extensions** view (`kb(workbench.view.extensions)`).
  108: 2. Filter the extensions list by typing "java".
  109  
  110: ![Java Extensions](images/extensions/extensions.png)
  111  
  112: We also appreciate contributions to any of our existing extensions and we hope you'll create new Java extensions if you don't find what you're looking for in the Marketplace.

docs/java/java-build.md:
    2  Order: 6
    3: Area: java
    4  TOCTitle: Build Tools
    5  ContentId: 6ba93ee8-33d7-483a-a3b0-82241cedecbf
    6: PageTitle: Maven and Gradle support for Java in Visual Studio Code
    7  DateApproved: 12/10/2021
    8: MetaDescription: Maven and Gradle support for Java in Visual Studio Code
    9  MetaSocialImage:

   11  
   12: # Java build tools in VS Code
   13  
   14: This document is an overview of how to work with your Java build tools in Visual Studio Code. It covers the [Maven for Java](https://marketplace.visualstudio.com/items?itemName=vscjava.vscode-maven) and [Gradle for Java](https://marketplace.visualstudio.com/items?itemName=vscjava.vscode-gradle) extensions as well as other tools.
   15  
   16: If you run into any issues when using the features below, you can contact us by entering an [issue](https://github.com/microsoft/vscode-java-pack/issues).
   17  

   19  
   20: [Maven](https://maven.apache.org/) is a software tool that helps you manage Java projects and automate application builds. The [Maven for Java](https://marketplace.visualstudio.com/items?itemName=vscjava.vscode-maven) extension for Visual Studio Code provides fully integrated Maven support, allowing you to explore Maven projects, execute Maven commands, and perform the goals of build lifecycle and plugins. We recommend installing the [Extension Pack for Java](https://marketplace.visualstudio.com/items?itemName=vscjava.vscode-java-pack), which includes Maven support and other important Java development features.
   21  
   22: <a class="install-extension-btn" href="vscode:extension/vscjava.vscode-java-pack">Install the Extension Pack for Java</a>
   23  

   27  
   28: ![Maven Explorer](images/java-build/maven-explorer.png)
   29  

   34  <video autoplay loop muted playsinline controls title="Resolve unknown type">
   35:   <source src="/docs/java/java-build/maven-resolve-unknown-type.mp4" type="video/mp4">
   36  </video>

   42  <video autoplay loop muted playsinline controls title="Add a new dependency to POM file">
   43:   <source src="/docs/java/java-build/maven-pom-editing.mp4" type="video/mp4">
   44  </video>

   48  <video autoplay loop muted playsinline controls title="Generate effective POM">
   49:   <source src="/docs/java/java-build/maven-effective-pom.mp4" type="video/mp4">
   50  </video>

   54  <video autoplay loop muted playsinline controls title="Add a dependency">
   55:   <source src="/docs/java/java-build/maven-add-dependency.mp4" type="video/mp4">
   56  </video>

   60  <video autoplay loop muted playsinline controls title="Add dependency through project view">
   61:   <source src="/docs/java/java-build/maven-add-dependency-2.mp4" type="video/mp4">
   62  </video>

   66  <video autoplay loop muted playsinline controls title="Inspect Maven dependency tree">
   67:   <source src="/docs/java/java-build/maven-dependency-tree.mp4" type="video/mp4">
   68  </video>

   74  <video autoplay loop muted playsinline controls title="Run Maven goals">
   75:   <source src="/docs/java/java-build/maven-run.mp4" type="video/mp4">
   76  </video>

   85  <video autoplay loop muted playsinline controls title="Run goals from Maven history">
   86:   <source src="/docs/java/java-build/maven-history.mp4" type="video/mp4">
   87  </video>

   91  <video autoplay loop muted playsinline controls title="Specify favorite commands">
   92:   <source src="/docs/java/java-build/maven-favorite-command.mp4" type="video/mp4">
   93  </video>

   97  <video autoplay loop muted playsinline controls title="Easy way to access goals within each plugin">
   98:   <source src="/docs/java/java-build/maven-plugin-goal.mp4" type="video/mp4">
   99  </video>
  100  
  101: To debug Maven goals, right-click on a goal and start debugging. The Maven extension will call the Java debugger with the right parameters. This is a handy, time-saving feature.
  102  
  103  <video autoplay loop muted playsinline controls title="Debug Maven goals">
  104:   <source src="/docs/java/java-build/debug-maven-plugin-goals.mp4" type="video/mp4">
  105  </video>

  114  
  115:    ![Create Maven Project](images/java-build/create-maven-project.png)
  116  
  117: 2. Open the **Command Palette** (`kb(workbench.action.showCommands)`), search for **Create Java Project** command.
  118  
  119:    <video autoplay loop muted playsinline controls title="Create Java Project Command">
  120:      <source src="/docs/java/java-build/maven-archetype-command.mp4" type="video/mp4">
  121     </video>

  125     <video autoplay loop muted playsinline controls title="Create Maven Project Command">
  126:      <source src="/docs/java/java-build/maven-archetype-folder.mp4" type="video/mp4">
  127     </video>

  130  
  131: VS Code supports Gradle Java project (not including Android) via the [Gradle for Java](https://marketplace.visualstudio.com/items?itemName=vscjava.vscode-gradle) extension. The extension provides a visual interface for your Gradle build, you can use this interface to view Gradle Tasks and Project dependencies, or run Gradle Tasks as VS Code Tasks. The extension also offers a better Gradle build file authoring experience including syntax highlighting, error reporting, and auto-completion.
  132  

  137  <video autoplay loop muted playsinline controls title="Gradle tasks view">
  138:   <source src="/docs/java/java-build/gradle-tasks.mp4" type="video/mp4">
  139  </video>

  143  <video autoplay loop muted playsinline controls title="Pin a Gradle task">
  144:   <source src="/docs/java/java-build/gradle-pinned-recent-tasks.mp4" type="video/mp4">
  145  </video>

  150  
  151: ![Gradle Dependencies](images/java-build/gradle-dependencies.png)
  152  

  157  <video autoplay loop muted playsinline controls title="Managing Gradle Daemon">
  158:   <source src="/docs/java/java-build/gradle-daemons.mp4" type="video/mp4">
  159  </video>

  166  
  167: ![Gradle Highlighting](images/java-build/gradle-highlighting.png)
  168  

  170  
  171: ![Gradle Outline](images/java-build/gradle-outline.png)
  172  

  174  
  175: ![Gradle Problems](images/java-build/gradle-problems.png)
  176  

  179  <video autoplay loop muted playsinline controls title="Auto completion for Gradle file">
  180:   <source src="/docs/java/java-build/gradle-auto-completion.mp4" type="video/mp4">
  181  </video>

  185  <video autoplay loop muted playsinline controls title="Auto completion for new dependency for Gradle">
  186:   <source src="/docs/java/java-build/gradle-dependency-completion.mp4" type="video/mp4">
  187  </video>

  198  
  199: * [Java editing](/docs/java/java-editing.md) - Explore the editing features for Java in VS Code.
  200: * [Java debugging](/docs/java/java-debugging.md) - Find out how to debug your Java project with VS Code.
  201: * [Java testing](/docs/java/java-testing.md) - Use VS Code for your JUnit and TestNG cases.
  202: * [Java extensions](/docs/java/extensions.md) - Learn about more useful Java extensions for 

docs/java/java-debugging.md:
    2  Order: 7
    3: Area: java
    4  TOCTitle: Run and Debug
    5  ContentId: 929e5410-3bfe-4107-b331-565afe5d341f
    6: PageTitle: Run and Debug Java in Visual Studio Code
    7  DateApproved: 12/9/2021
    8: MetaDescription: See how you can run and debug your Java source code locally, and in the cloud.
    9  MetaSocialImage:

   11  
   12: # Running and debugging Java
   13  
   14: Visual Studio Code allows you to debug Java applications through the [Debugger for Java](https://marketplace.visualstudio.com/items?itemName=vscjava.vscode-java-debug) extension. It's a lightweight Java debugger based on [Java Debug Server](https://github.com/microsoft/java-debug), which extends the [Language Support for Java™ by Red Hat](https://marketplace.visualstudio.com/items?itemName=redhat.java).
   15  

   29  
   30: The Java debugger is an open-source project, which welcomes contributors to collaborate through GitHub repositories:
   31  
   32: - [Debugger for Java](https://github.com/microsoft/vscode-java-debug)
   33: - [Java Debug Server for Visual Studio Code](https://github.com/microsoft/java-debug)
   34  
   35: If you run into any issues when using the features below, you can contact us by entering an [issue](https://github.com/microsoft/vscode-java-pack/issues).
   36  

   38  
   39: To get the complete Java language support in Visual Studio Code, you can install the [Extension Pack for Java](https://marketplace.visualstudio.com/items?itemName=vscjava.vscode-java-pack), which includes the Debugger for Java extension.
   40  
   41: <a class="install-extension-btn" href="vscode:extension/vscjava.vscode-java-pack">Install the Extension Pack for Java</a>
   42  
   43: >For details on how to get started with the extension pack, you can review the [Getting Started with Java](/docs/java/java-tutorial.md) tutorial.
   44  

   50  
   51: ![Debug Menu](images/java-debugging/run-debug-button.png)
   52  

   54  
   55: For more details on how to create the `launch.json`, read [Launch configurations](/docs/editor/debugging.md#launch-configurations); for more details on configuration options for Java, you can read [Configuration options](/docs/java/java-debugging.md#configuration-options).
   56  

   58  
   59: The debugger extension provides multiple ways to run and debug your Java application.
   60  

   64  
   65: ![CodeLens](images/java-debugging/java-codelens.png)
   66  

   68  
   69: Another way to start debugging is to select **Run Java** or **Debug Java** menu from the top editor title bar.
   70  
   71: ![EditorMenu](images/java-debugging/run-menu.png)
   72  

   78  
   79: In addition to support for debugging Java projects managed by build tools, VS Code also supports for debugging single Java files without any project.
   80  
   81: <video autoplay loop muted playsinline controls title="Debugging a single Main.java file">
   82:   <source src="/docs/java/java-debugging/single-file-debugging.mp4" type="video/mp4">
   83  </video>

   86  
   87: The default Debug Console in VS Code doesn't support inputs. If your program need inputs from a terminal, you can use the Integrated Terminal (`kb(workbench.action.terminal.toggleTerminal)`) within VS Code or an external terminal to launch it. You can also use the user setting `java.debug.settings.console` to configure a global console for all Java debug sessions.
   88  
   89: <video autoplay loop muted playsinline controls title="Debugging a Java app that takes input via the Integrated Terminal">
   90:   <source src="/docs/java/java-debugging/launch-in-terminal.mp4" type="video/mp4">
   91  </video>

   94  
   95: The Debugger for Java supports various breakpoints, such as line breakpoints, conditional breakpoints, data breakpoints, logpoints.
   96  

  101  <video autoplay loop muted playsinline controls title="Setting a conditional breakpoint when i==1000">
  102:   <source src="/docs/java/java-debugging/conditional-bp.mp4" type="video/mp4">
  103  </video>

  108  
  109: ![Data Breakpoint](images/java-debugging/data-breakpoint.png)
  110  

  112  
  113: [Logpoints](/blogs/2018/07/12/introducing-logpoints-and-auto-attach.md#introducing-logpoints) is also supported by Java Debugger. Logpoints allow you to send output to Debug Console without editing code. They're different from breakpoints because they don't stop the execution flow of your application.
  114  
  115  <video autoplay loop muted playsinline controls title="Adding a Logpoint that outputs the value of result.size to the Debug Console">
  116:   <source src="/docs/java/java-debugging/logpoints.mp4" type="video/mp4">
  117  </video>

  131  <video autoplay loop muted playsinline controls title="Add an expression to the WATCH window to display the owner object">
  132:   <source src="/docs/java/java-debugging/expression-evaluation.mp4" type="video/mp4">
  133  </video>

  136  
  137: Another advanced feature the debugger supports is 'Hot Code' replacement. Hot Code Replace (HCR) is a debugging technique whereby the Debugger for Java transmits the class changes over the debugging channel to another Java Virtual Machine (JVM). HCR facilitates experimental development and fosters iterative trial-and-error coding. With this new feature, you can start a debugging session and change a Java file in your development environment, and the debugger will replace the code in the running JVM. No restart is required, which is why it's called "hot". Below is an illustration of how you can use HCR with Debugger for Java in VS Code.
  138  
  139  <video autoplay loop muted playsinline controls title="Using Hot Code replacement to change string output during a debug session">
  140:   <source src="/docs/java/java-debugging/hcr.mp4" type="video/mp4">
  141  </video>
  142  
  143: You may use the debug setting `java.debug.settings.hotCodeReplace` to control how to trigger Hot Code Replace. The possible setting values are:
  144  

  152  
  153: <video autoplay loop muted playsinline controls title="Adding a stepfilter to avoid stepping into java.lang.ClassLoader">
  154:   <source src="/docs/java/java-debugging/step-filter.mp4" type="video/mp4">
  155  </video>

  161  <video autoplay loop muted playsinline controls title="Adding various configuration options to the workspace launch.json file">
  162:   <source src="/docs/java/java-debugging/launch-configuration.mp4" type="video/mp4">
  163  </video>
  164  
  165: Consult the documentation for the [Language Support for Java™ by Red Hat](https://marketplace.visualstudio.com/items?itemName=redhat.java) extension for help with setting up your project.
  166  
  167: For many commonly used setups, there are samples available in [VS Code Java Debugger Configuration](https://github.com/microsoft/vscode-java-debug/blob/main/Configuration.md). The document explains how the Java debugger automatically generates configurations for you, and if you need to modify them, how to do so with Main class, different arguments, environment, attaching to other Java processes, and usage of more advanced features.
  168  

  172  
  173: - `mainClass` (required) - The fully qualified class name (for example [java module name/]com.xyz.MainApp) or the java file path of the program entry.
  174  - `args` - The command-line arguments passed to the program. Use `"${command:SpecifyProgramArgs}"` to prompt for program arguments. It accepts a string or an array of string.

  187    - `/path/to/append` - Append the specified path to the classpaths.
  188: - `encoding` - The `file.encoding` setting for the JVM. If not specified, 'UTF-8' will be used. Possible values can be found in [Supported Encodings](https://docs.oracle.com/javase/8/docs/technotes/guides/intl/encoding.doc.html).
  189  - `vmArgs` - The extra options and system properties for the JVM (for example -Xms\<size\> -Xmx\<size\> -D\<name\>=\<value\>), it accepts a string or an array of string.
  190: - `projectName` - The preferred project in which the debugger searches for classes. There could be duplicated class names in different projects. This setting also works when the debugger looks for the specified main class when launching a program. It is required when the workspace has multiple Java projects, otherwise the expression evaluation and conditional breakpoint may not work.
  191  - `cwd` - The working directory of the program. Defaults to `${workspaceFolder}`.

  194  - `stopOnEntry` - Automatically pause the program after launching.
  195: - `console` - The specified console to launch the program. If not specified, use the console specified by the `java.debug.settings.console` user setting.
  196    - `internalConsole` - VS Code Debug Console (input stream not supported).

  199  - `shortenCommandLine` - When the project has long classpath or big VM arguments, the command line to launch the program may exceed the maximum command-line string limitation allowed by the OS. This configuration item provides multiple approaches to shorten the command line. Defaults to `auto`.
  200:   - `none` - Launch the program with the standard command line 'java {options} classname {args}'.
  201:   - `jarmanifest` - Generate the classpath parameters to a temporary classpath.jar file, and launch the program with the command line 'java -cp classpath.jar classname {args}'.
  202:   - `argfile` - Generate the classpath parameters to a temporary argument file, and launch the program with the command line 'java @argfile {args}'. This value only applies to Java 9 and higher.
  203    - `auto` - Automatically detect the command-line length and determine whether to shorten the command line via an appropriate approach.

  205    - `classNameFilters` - [**Deprecated** - replaced by `skipClasses`] Skip the specified classes when stepping. Class names should be fully qualified. Wildcard is supported.
  206:   - `skipClasses` - Skip the specified classes when stepping. You could use the built-in variables such as '$JDK' and '$Libraries' to skip a group of classes, or add a specific class name expression, for example `java.*`, `*.Foo`.
  207    - `skipSynthetics` - Skip synthetic methods when stepping.

  215  - `processId` - Use process picker to select a process to attach, or Process ID as integer.
  216:   - `${command:PickJavaProcess}` - Use process picker to select a process to attach.
  217    - An integer PID - Attach to the specified local process.

  219  - `sourcePaths` - The extra source directories of the program. The debugger looks for source code from project settings by default. This option allows the debugger to look for source code in extra directories.
  220: - `projectName` - The preferred project in which the debugger searches for classes. There could be duplicated class names in different projects. It is required when the workspace has multiple Java projects, otherwise the expression evaluation and conditional breakpoint may not work.
  221  - `stepFilters` - Skip specified classes or methods when stepping.
  222    - `classNameFilters` - [**Deprecated** - replaced by `skipClasses`] Skip the specified classes when stepping. Class names should be fully qualified. Wildcard is supported.
  223:   - `skipClasses` - Skip the specified classes when stepping. You could use the built-in variables such as '$JDK' and '$Libraries' to skip a group of classes, or add a specific class name expression, for example `java.*`, `*.Foo`.
  224    - `skipSynthetics` - Skip synthetic methods when stepping.

  229  
  230: - `java.debug.logLevel`: Minimum level of debugger logs that are sent to VS Code, defaults to `warn`.
  231: - `java.debug.settings.showHex`: Show numbers in hex format in **Variables**, defaults to `false`.
  232: - `java.debug.settings.showStaticVariables`: Show static variables in **Variables**, defaults to `false`.
  233: - `java.debug.settings.showQualifiedNames`: Show fully qualified class names in **Variables**, defaults to `false`.
  234: - `java.debug.settings.showLogicalStructure`: Show the logical structure for the Collection and Map classes in **Variables**, defaults to `true`.
  235: - `java.debug.settings.showToString`: Show 'toString()' value for all classes that override 'toString' method in **Variables**, defaults to `true`.
  236: - `java.debug.settings.maxStringLength`: The maximum length of strings displayed in **Variables** or **Debug Console**. Strings longer than this limit will be trimmed. The default is `0`, which means no trim is performed.
  237: - `java.debug.settings.hotCodeReplace`: Reload the changed Java classes during debugging, defaults to `manual`. Make sure `java.autobuild.enabled` is not disabled for the [Java Language Support extension](https://github.com/redhat-developer/vscode-java). See the [Hot Code Replace wiki page](https://github.com/microsoft/vscode-java-debug/wiki/Hot-Code-Replace) for more information about usages and limitations.
  238    - manual - Click the toolbar to apply the changes.

  240    - never - Never apply the changes.
  241: - `java.debug.settings.enableHotCodeReplace`: Enable Hot Code Replace for Java code. Make sure the auto build is not disabled for [VS Code Java](https://github.com/redhat-developer/vscode-java). See the [Hot Code Replace wiki page](https://github.com/microsoft/vscode-java-debug/wiki/Hot-Code-Replace) for more information about usages and limitations.
  242: - `java.debug.settings.enableRunDebugCodeLens`: Enable the CodeLens provider for the run and debug buttons over main entry points, defaults to `true`.
  243: - `java.debug.settings.forceBuildBeforeLaunch`: Force building the workspace before launching java program, defaults to `true`.
  244: - `java.debug.settings.console`: The specified console to launch a Java program, defaults to `integratedTerminal`. If you want to customize the console for a specific debug session, please modify the `console` configuration in `launch.json`.
  245    - `internalConsole` - VS Code Debug Console (input stream not supported).

  247    - `externalTerminal` - External terminal that can be configured in user settings.
  248: - `java.debug.settings.exceptionBreakpoint.skipClasses`: Skip the specified classes when breaking on exception. You could use the built-in variables such as '$JDK' and '$Libraries' to skip a group of classes, or add a specific class name expression, for example `java.*`, `*.Foo`.
  249: - `java.debug.settings.stepping.skipClasses`: Skip the specified classes when stepping. You could use the built-in variables such as '$JDK' and '$Libraries' to skip a group of classes, or add a specific class name expression, for example `java.*`, `*.Foo`.
  250: - `java.debug.settings.stepping.skipSynthetics`: Skip synthetic methods when stepping.
  251: - `java.debug.settings.stepping.skipStaticInitializers`: Skip static initializer methods when stepping.
  252: - `java.debug.settings.stepping.skipConstructors`: Skip constructor methods when stepping.
  253: - `java.debug.settings.jdwp.limitOfVariablesPerJdwpRequest`: The maximum number of variables or fields that can be requested in one JDWP request. The higher the value, the less frequently debuggee will be requested when expanding the variable view. Also a large number can cause JDWP request timeout. Defaults to 100.
  254: - `java.debug.settings.jdwp.requestTimeout`: The timeout (ms) of JDWP request when the debugger communicates with the target JVM. Defaults to 3000.
  255: - `java.debug.settings.vmArgs`: The default VM arguments to launch the Java program. For example, use '-Xmx1G -ea' to increase the heap size to 1 GB and enable assertions. If you want to customize the VM arguments for a specific debug session, you can modify the 'vmArgs' config in `launch.json`.
  256: - `java.silentNotification`: Controls whether notifications can be used to report progress. If true, use status bar to report progress instead. Defaults to `false`.
  257  

  259  
  260: If you encounter issues when using the debugger, a detailed troubleshooting guide can be found in the [vscode-java-debug GitHub repository](https://github.com/microsoft/vscode-java-debug/blob/main/Troubleshooting.md).
  261  

  263  
  264: - Java Language Support extension fails to start.
  265  - Build failed, do you want to continue?
  266: - *.java isn't on the classpath. Only syntax errors will be reported.
  267  - Program Error: Could not find or load main class X.

  272  - Cannot find a class with the main method.
  273: - No delegateCommandHandler for vscode.java.startDebugSession when starting Debugger.
  274  - Failed to resolve classpath.

  278  
  279: You can find the full list of issues at the [vscode-java-debug](https://github.com/microsoft/vscode-java-debug/issues) repository. You can submit a [bug or feature suggestion](https://github.com/microsoft/vscode-java-debug/issues/new) and participate in the community driven [vscode-java-debug Gitter channel](https://gitter.im/Microsoft/vscode-java-debug).
  280  

  286  
  287: And for Java:
  288  
  289: - [Java testing](/docs/java/java-testing.md) - Test Java within VS Code with the Java Test Runner extension.
  290: - [Java extensions](/docs/java/extensions.md) - Learn about more useful Java extensions for VS Code.

docs/java/java-editing.md:
    2  Order: 2
    3: Area: java
    4  TOCTitle: Navigate and Edit
    5  ContentId: 843e139a-9e3c-4b4f-95d1-32a9a7480e8e
    6: PageTitle: Navigate and edit Java Source Code in Visual Studio Code
    7  DateApproved: 12/9/2021
    8: MetaDescription: Navigate and edit Java Source Code in Visual Studio Code
    9  ---
   10: # Navigate and edit Java source code
   11  
   12: Visual Studio Code is a source code editor first and foremost with rich editing [features](/docs/editor/codebasics.md). In this document, we will go through a few Java-specific features, which are helpful when working with Java.
   13  
   14: If you run into any issues when using the features below, you can contact us by entering an [issue](https://github.com/microsoft/vscode-java-pack/issues).
   15  

   17  
   18: With the [Outline view](/docs/getstarted/userinterface.md#outline-view), you can conveniently navigate the members within the current file. [Projects view](/docs/java/java-project.md#projects-view) also provide a great overview of your project. As a Java editor, it also supports Call Hierarchy, Type Hierarchy, Definition Navigation, Search Types in Workspace, etc.
   19  

   28  <video autoplay loop muted playsinline controls title="Search for symbols in the workspace">
   29:   <source src="/docs/java/java-editing/search-in-workspace.mp4" type="video/mp4">
   30  </video>

   36  <video autoplay loop muted playsinline controls title="Search for symbols in current file">
   37:   <source src="/docs/java/java-editing/search-in-file.mp4" type="video/mp4">
   38  </video>

   55  
   56: ![Spring Navigation](images/java-editing/goto-super.png)
   57  
   58  <video autoplay loop muted playsinline controls title="Go to super implementation">
   59:   <source src="/docs/java/java-editing/goto-super-implementation.mp4" type="video/mp4">
   60  </video>

   65  
   66: ![Call Hierarchy Peek](images/java-editing/call-hierarchy.png)
   67  

   69  
   70: ![Call Hierarchy Menu](images/java-editing/call-hierarchy.gif)
   71  

   73  
   74: A Type Hierarchy view shows the inheritance relationships between Java Objects. You can right-click on a type and pick **Show Type Hierarchy**.
   75  
   76  <video autoplay loop muted playsinline controls title="Type hierarchy">
   77:   <source src="/docs/java/java-editing/type-hierarchy.mp4" type="video/mp4">
   78  </video>

   84  <video autoplay loop muted playsinline controls title="Folding regions">
   85:   <source src="/docs/java/java-editing/folding-range.mp4" type="video/mp4">
   86  </video>

   95  <video autoplay loop muted playsinline controls title="Smart selections">
   96:   <source src="/docs/java/java-editing/smart-selection.mp4" type="video/mp4">
   97  </video>

  100  
  101: Syntax highlighting is an important feature that allows you to read code more efficiently. With the help of [Semantic Highlighting](https://github.com/microsoft/vscode/wiki/Semantic-Highlighting-Overview), VS Code can provide more accurate source code coloring based on symbol information from the Java language service.
  102  

  104  
  105: ![Semantic Highlighting](images/java-editing/semantic-highlighting.png)
  106  
  107: You can learn more about the details of Java semantic highlighting on the [Java Language Support extension wiki](https://github.com/redhat-developer/vscode-java/wiki/Semantic-Highlighting).
  108  

  117  
  118: ![Spring Navigation](images/java-editing/spring-navigation.png)
  119  
  120: To learn more about Spring Boot support with Visual Studio Code, read [Spring Boot in Visual Studio Code](/docs/java/java-spring-boot.md).
  121  

  126  <video autoplay loop muted playsinline controls title="Code editing">
  127:   <source src="/docs/java/java-editing/code-editing.mp4" type="video/mp4">
  128  </video>
  129  
  130: Java support in Visual Studio Code detects issues within your code automatically, and provides you with Quick Fix suggestions.
  131  
  132  <video autoplay loop muted playsinline controls title="Quick fix suggestions">
  133:   <source src="/docs/java/java-editing/quick-fix.mp4" type="video/mp4">
  134  </video>
  135  
  136: For more details about refactoring and code actions, see [Refactoring and Source Actions](/docs/java/java-refactoring.md).
  137  

  139  
  140: Code completion in Visual Studio Code for Java is provided by [Language Support for Java™ by Red Hat](https://marketplace.visualstudio.com/items?itemName=redhat.java). The extension is powered by the same [Java development tools (JDT)](https://www.eclipse.org/jdt/) behind Eclipse, so you can expect the same level of support.
  141  
  142: In addition, there's also AI-assisted IntelliSense called [IntelliCode](https://visualstudio.microsoft.com/services/intellicode/). It saves you time by putting what you're most likely to use at the top of your completion list. IntelliCode recommendations are based on thousands of open-source projects on GitHub each with over 100 stars, so it's trained on the most common usages from high-quality projects. When combined with the context of your code, the completion list is tailored to promote those practices. Here's IntelliCode for Java in action.
  143  
  144  <video autoplay loop muted playsinline controls title="IntelliSense code completion suggestions">
  145:   <source src="/docs/java/java-editing/intellicode.mp4" type="video/mp4">
  146  </video>
  147  
  148: IntelliCode works well with popular Java libraries and frameworks like Java SE and Spring. It will help you whether you are doing monolithic web apps or modern microservices.
  149  

  151  
  152: VS Code supports applying templates when you create a Java source file. When you create a `.java` file in the File Explorer, the language server will automatically generate the class body, and fill the package info for you:
  153  
  154  <video autoplay loop muted playsinline controls title="Create new file">
  155:   <source src="/docs/java/java-editing/create-new-file.mp4" type="video/mp4">
  156  </video>

  159  
  160: Visual Studio Code supports a wide range of popular Java code snippets to make you more productive, such as class/interface, syserr, sysout, if/else, try/catch, static main method. Using information from Java language server, it also provides a preview of the code snippet during the selection.
  161  

  164  
  165: ![Code Snippet](images/java-editing/code-snippet.png)
  166  

docs/java/java-faq.md:
    2  Order: 14
    3: Area: java
    4  TOCTitle: FAQ
    5  ContentId: 2ad03b46-0779-4c9a-897e-6e6b628f598a
    6: PageTitle: Java on Visual Studio Code FAQ and Wiki
    7  DateApproved: 8/31/2021
    8: MetaDescription: Java on Visual Studio Code Frequent Asked Questions and Troubleshooting Guide
    9  ---

   11  
   12: Thanks for your interest in Java on Visual Studio Code! This FAQ will hopefully answer some of the questions you may have.
   13  
   14: ## Are these Java extensions open source?
   15  
   16: Yes. All the [Java Extensions](/docs/java/extensions.md) provided by Red Hat, Microsoft, and VMware are open source, as well as most extensions supported by the community. You can find their corresponding repositories on GitHub from the Marketplace pages.
   17  
   18: ## Are there any other features coming to Java on Visual Studio Code?
   19  

   23  
   24: We do have limited capacity within the team and we'd really like to encourage more contributions from the great Java community. If you're passionate about your idea and would like to help fellow Java developers, you're welcome to join us! Some areas worth considering including Gradle support, code analysis and test coverage tools, profiler, and additional framework support including DropWizard, JavaFX, JPA, Play, Akka, OSGi.
   25  

   29  
   30: ## Where can I find the latest progress of Java support on Visual Studio Code?
   31  
   32: You can follow us on the [Java at Microsoft](https://devblogs.microsoft.com/java/) blog, which will keep you updated on our progress.
   33  
   34: While you're using Java within VS Code, you may also see a **Release Notes** section after you update the [Extension Pack for Java](https://marketplace.visualstudio.com/items?itemName=vscjava.vscode-java-pack). The notes will give you an overview on the notable updates included in the extensions.
   35  
   36: ## How can I use Visual Studio Code with new Java versions?
   37  
   38: Thanks to the upstream update from JDT, you can now build your project up to Java 14 with VS Code as well. To use the experimental/preview language features, you need to modify your project settings.
   39  

   61  sourceCompatibility = 14
   62: tasks.withType(JavaCompile) {
   63      options.compilerArgs += '--enable-preview'

   69  
   70: > Note: If you are modifying a project that was already opened in VS Code, you may need to force clean the workspace and reload. To do so, run command **Java: Clean Java Language Server Workspace**.
   71  

   73  
   74: When using the Java Language Support (redhat.java) extension behind a corporate proxy, you might need to let the Java Language server know how to connect to the Internet, in order to download build runtimes, Java dependencies, and their sources through that proxy.
   75  
   76: This is done by configuring the `java.jdt.ls.vmargs` setting in VS Code preferences (all on one line):
   77  

   79  {
   80: "java.jdt.ls.vmargs": "-Dhttp.proxyHost=webproxy.corp.net -Dhttp.proxyPort=proxyport -Dhttp.proxyUser=user -Dhttp.proxyPassword=password -Dhttps.proxyHost=webproxy.corp.net -Dhttps.proxyPort=proxyport -Dhttps.proxyUser=user -Dhttps.proxyPassword=password"
   81  }

   85  
   86: Currently we don't plan to extend the Java support to Visual Studio. There are already great IDEs for Java and we're focusing on VS Code to provide a lightweight experience in a polyglot editor.
   87  
   88: ## Does VS Code Java support other display languages?
   89  
   90: Currently we support Chinese in addition to English for a few extensions including [Debugger for Java](https://marketplace.visualstudio.com/items?itemName=vscjava.vscode-java-debug), [Test Runner for Java](https://marketplace.visualstudio.com/items?itemName=vscjava.vscode-java-test), [Maven for Java](https://marketplace.visualstudio.com/items?itemName=vscjava.vscode-maven), [Project Manager for Java](https://marketplace.visualstudio.com/items?itemName=vscjava.vscode-java-dependency). To learn how to switch the VS Code display language, see [Display Languages](/docs/getstarted/locales.md).
   91  

   93  
   94: ## How to troubleshoot and contribute to the Java Language Server
   95  
   96: You can visit the [Java for Visual Studio Code wiki](https://github.com/redhat-developer/vscode-java/wiki) to find answers regarding:
   97  
   98: 1. ["Classpath is incomplete" warning](https://github.com/redhat-developer/vscode-java/wiki/%22Classpath-is-incomplete%22-warning)
   99: 2. [Annotation Processing support for Maven projects](https://github.com/redhat-developer/vscode-java/wiki/Annotation-Processing-support-for-Maven-projects)
  100: 3. [Contribute a Java extension](https://github.com/redhat-developer/vscode-java/wiki/Contribute-a-Java-Extension)
  101: 4. [Formatter settings](https://github.com/redhat-developer/vscode-java/wiki/Formatter-settings)
  102: 5. [Lombok Support](https://github.com/redhat-developer/vscode-java/wiki/Lombok-support)
  103: 6. [Using a Proxy](https://github.com/redhat-developer/vscode-java/wiki/Using-a-Proxy)
  104: 7. [Troubleshooting](https://github.com/redhat-developer/vscode-java/wiki/Troubleshooting)

docs/java/java-gui.md:
   2  Order: 12
   3: Area: java
   4  TOCTitle: GUI Applications
   5  ContentId: 517db620-d166-4f72-99c1-fa046710dffe
   6: PageTitle: Develop Java GUI Applications in Visual Studio Code
   7  DateApproved: 10/11/2022
   8: MetaDescription: How to develop Java GUI Applications (JavaFX, AWT, Swing) in Visual Studio Code
   9  ---

  12  
  13: You can develop Java GUI applications in Visual Studio Code easily. To achieve that, you need to install the [Extension Pack for Java](https://marketplace.visualstudio.com/items?itemName=vscjava.vscode-java-pack), which includes all the required extensions to develop Java GUI applications.
  14  
  15: <a class="install-extension-btn" href="vscode:extension/vscjava.vscode-java-pack">Install the Extension Pack for Java</a>
  16  
  17: If you run into any issues when using the features below, you can contact us by entering an [issue](https://github.com/microsoft/vscode-java-pack/issues).
  18  
  19: ## Develop JavaFX applications
  20  
  21: ### Create a new JavaFX project
  22  
  23: You can create a new JavaFX application with just a few steps in VS Code:
  24  
  25: - Step 1: Install the [Extension Pack for Java](https://marketplace.visualstudio.com/items?itemName=vscjava.vscode-java-pack).
  26: - Step 2: In Visual Studio Code, open the Command Palette (`kb(workbench.action.showCommands)`) and then select the command **Java: Create Java Project**.
  27: - Step 3: Select the option **JavaFX** in the list, follow the wizard, which will help you scaffold a new JavaFX project via Maven Archetype.
  28  
  29: ![create JavaFX project](images/java-gui/create-javafx.png)
  30  
  31: ### Run the JavaFX application
  32  
  33: > Note: The following guidance only works for projects managed by Maven. The generated project requires at least JDK 11 to launch it. Please make sure you have JDK 11 installed locally and set the installation path to the setting [`java.configuration.runtimes`](https://github.com/redhat-developer/vscode-java#project-jdks).
  34  
  35: To run the JavaFX application, you can open the **Maven** Explorer, expand `hellofx` > `Plugins` > `javafx` and run the Maven goal: `javafx:run`.
  36  
  37: > **Note**: Make sure you have installed the [Maven for Java](https://marketplace.visualstudio.com/items?itemName=vscjava.vscode-maven) extension. If you cannot find the **Maven** explorer, open the Command Palette (`kb(workbench.action.showCommands)`) and then select the command **Explorer: Focus on Maven View**.
  38  
  39: <video autoplay loop muted playsinline controls title="Run JavaFX application">
  40:   <source src="/docs/java/java-gui/run-javafx.mp4" type="video/mp4">
  41  </video>
  42  
  43: ### More JavaFX examples
  44  
  45: More JavaFX project examples can be found in the [openjfx samples repository](https://github.com/openjfx/samples/tree/master/IDE/VSCode), which covers different project structures (such as Gradle and unmanaged folder projects). There is documentation on each sample to describe how to run the program.
  46  

  48  
  49: By default, the types from the Abstract Window Toolkit (AWT) are hidden. You may notice that code completions are not working when you are developing an AWT application. To enable completions, you can open the Command Palette  (`kb(workbench.action.showCommands)`) and then select the command **Java: Help Center**. Go to the **Student** section and select **Enable AWT Development**.
  50  
  51  <video autoplay loop muted playsinline controls title="Develop AWT application">
  52:   <source src="/docs/java/java-gui/enable-awt.mp4" type="video/mp4">
  53  </video>
  54  
  55: > Note: This action will update a setting, `java.completion.filteredTypes` at the workspace level in `.vscode\settings.json`, so please make sure a workspace is opened in VS Code.
  56  
  57: You can use the sample code below to run a simple Java AWT application in VS Code.
  58  
  59: ```java
  60: import java.awt.*;
  61: import java.awt.event.*;
  62  

  88  
  89: You can find more Swing samples in the [Oracle Swing documentation](https://docs.oracle.com/javase/tutorial/uiswing/examples/components/index.html).

docs/java/java-linting.md:
    2  Order: 4
    3: Area: java
    4  TOCTitle: Formatting and Linting
    5  ContentId: dd4fa82e-0021-404c-87e4-3b69f1e12463
    6: PageTitle: Formatting, linting, and code analysis for Java in Visual Studio Code
    7  DateApproved: 12/12/2021
    8: MetaDescription: Formatting, linting, and code analysis for Java in Visual Studio Code
    9  ---
   10: # Java formatting and linting
   11  
   12: [Language Support for Java™ by Red Hat](https://marketplace.visualstudio.com/items?itemName=redhat.java) also provides [formatting settings](https://github.com/redhat-developer/vscode-java/wiki/Formatter-settings). You can export an Eclipse formatter file and then use it for your project in VS Code.
   13  
   14: In addition, there are also the [Checkstyle for Java](https://marketplace.visualstudio.com/items?itemName=shengchen.vscode-checkstyle) and [SonarLint](https://marketplace.visualstudio.com/items?itemName=SonarSource.sonarlint-vscode) extensions, which provide features for live linting and code analysis.
   15  

   17  
   18: You can use **Format Document** command to format a Java file. If you didn't specify a formatter profile before, the Java file will be formatted using default settings.
   19  
   20  <video autoplay loop muted playsinline controls video="Format document">
   21:   <source src="/docs/java/java-linting/formatting.mp4" type="video/mp4">
   22  </video>

   25  
   26: You can easily apply formatter settings from an existing formatter profile in Eclipse scheme. For example, if you want to apply [Google Style](https://raw.githubusercontent.com/google/styleguide/gh-pages/eclipse-java-google-style.xml) for your Java project, then you can set the following property in `settings.json`:
   27  
   28  ```json
   29: "java.format.settings.url": "https://raw.githubusercontent.com/google/styleguide/gh-pages/eclipse-java-google-style.xml",
   30  ```

   34  ```json
   35: "java.format.settings.profile": "GoogleStyle",
   36  ```
   37  
   38: After setting the formatter profile, the **Format Document** command will use the specific profile to format your Java files.
   39  

   41  
   42: The [Extension Pack for Java](https://marketplace.visualstudio.com/items?itemName=vscjava.vscode-java-pack) provides an editor to help users edit an existing formatter profile. You can open the editor with the command **Java: Open Java Formatter Settings with Preview**. In the editor, you can change the formatter settings and preview the effects. After saving the current editor, the changes will be saved to the formatter profile.
   43  
   44  <video autoplay loop muted playsinline controls title="Editing formatter settings">
   45:   <source src="/docs/java/java-linting/formatting-editing.mp4" type="video/mp4">
   46  </video>

   52  <video autoplay loop muted playsinline controls title="Preview formatting effects">
   53:   <source src="/docs/java/java-linting/formatting-preview.mp4" type="video/mp4">
   54  </video>

   58  <video autoplay loop muted playsinline controls title="Undo and redo changes to formatting effects">
   59:   <source src="/docs/java/java-linting/formatting-undoredo.mp4" type="video/mp4">
   60  </video>

   63  
   64: [SonarLint](https://marketplace.visualstudio.com/items?itemName=SonarSource.sonarlint-vscode) is an easy-to-use extension that helps you find and fix bugs and security issues as you code. The extension runs in the background and, just like a spell checker, highlights source code issues that pose a quality or security concern. The extension not only tells you what the issue is but also provides in-context guidance on why it's harmful and how to fix it, with examples. The extension supports over [500+ Java rules](https://rules.sonarsource.com/java) and includes several [Quick Fixes](https://rules.sonarsource.com/java/quickfix) to automatically fix certain quality issues.
   65  

   70  <video autoplay loop muted playsinline controls title="Code analysis on the fly">
   71:   <source src="/docs/java/java-linting/sonarlint.mp4" type="video/mp4">
   72  </video>

   80  <video autoplay loop muted playsinline controls title="Rule documentation and remediation guidance">
   81:   <source src="/docs/java/java-linting/sonarlint-description.mp4" type="video/mp4">
   82  </video>

   88  <video autoplay loop muted playsinline controls title="Enabling more quality and security rules">
   89:   <source src="/docs/java/java-linting/sonarlint-rules.mp4" type="video/mp4">
   90  </video>

   95  
   96: With the [Checkstyle for Java](https://marketplace.visualstudio.com/items?itemName=shengchen.vscode-checkstyle) extension, you can use either existing `checkstyle` configurations (Google's or Sun's Check) or your own customized files for your project. When editing a Java file, the extension will check the file format and provide Quick Fixes if possible on the fly.
   97  

  100  <video autoplay loop muted playsinline controls title="Set checkstyle configuration file command">
  101:   <source src="/docs/java/java-linting/checkstyle.mp4" type="video/mp4">
  102  </video>
  103  
  104: The [Checkstyle for Java](https://marketplace.visualstudio.com/items?itemName=shengchen.vscode-checkstyle) extension supports live linting.
  105  
  106  <video autoplay loop muted playsinline controls title="Live linting">
  107:   <source src="/docs/java/java-linting/checkstyle-live-linting.mp4" type="video/mp4">
  108  </video>

  112  <video autoplay loop muted playsinline controls title="Batch check">
  113:   <source src="/docs/java/java-linting/checkstyle-batch.mp4" type="video/mp4">
  114  </video>

  121  
  122: ![Set Checkstyle configuration file](images/java-linting/set_config.png)
  123  

  131  <video autoplay loop muted playsinline controls title="Set checkstyle configuration">
  132:   <source src="/docs/java/java-linting/checkstyle-configuration.mp4" type="video/mp4">
  133  </video>

  146  ```json
  147: "java.checkstyle.modules": [ "${workspaceFolder}/src/main/resources/sevntu-checks-1.35.0.jar" ]
  148  ```

  151  
  152: When editing a Java file, the extension will check the file format and provide Quick Fixes if possible. You can click the lightbulb button in the editor to show the available Quick Fixes.
  153  
  154: ![Fix style violation](images/java-linting/quick_fix.png)
  155  
  156: For more details about [Checkstyle for Java](https://marketplace.visualstudio.com/items?itemName=shengchen.vscode-checkstyle), visit its [GitHub Repository](https://github.com/jdneo/vscode-checkstyle).

docs/java/java-on-azure.md:
   2  Order: 11
   3: Area: java
   4: TOCTitle: Deploy Java Apps
   5  ContentId: 01210769-05be-4854-9482-13e342850ad7
   6: PageTitle: Deploy Java Web Apps
   7  DateApproved: 10/18/2022
   8: MetaDescription: How to deploy Java applications to Azure with Visual Studio Code
   9  ---
  10: # Deploy Java Web Apps
  11  
  12: The [Azure Tools](https://marketplace.visualstudio.com/items?itemName=ms-vscode.vscode-node-azure-pack) extension pack contains a rich set of extensions that make it easy to discover and interact with the cloud services that power your Java applications.
  13  

  15  
  16: * Deploy Java applications (including containers) to [Azure App Service](https://azure.microsoft.com/services/app-service).
  17  * Deploy Spring microservices to [Azure Spring Cloud](https://azure.microsoft.com/services/spring-cloud/).

  25  
  26: The following tutorials below walk you through the details.  You can also check the [Java Azure Developer's Center](https://learn.microsoft.com/azure/developer/java) for all things on Azure for Java developers.
  27  

  29  | --- | --- | --- |
  30: | [Deploy Java web apps <br> to Azure App Service](/docs/java/java-webapp.md) | Deploy a web app to the cloud | [Apache Maven](https://maven.apache.org/download.cgi) <br> [Azure App Service](https://marketplace.visualstudio.com/items?itemName=ms-azuretools.vscode-azureappservice)
  31: | [Deploy Spring Boot apps <br> to Azure Spring Apps](/docs/java/java-spring-apps.md) | Deploy a Spring Boot application<br> to Azure Spring Apps | [Apache Maven](https://maven.apache.org/download.cgi) <br> [Azure Spring Apps](https://marketplace.visualstudio.com/items?itemName=vscjava.vscode-azurespringcloud)
  32: | [Create an Azure Functions project <br> using Visual Studio Code](https://learn.microsoft.com/azure/azure-functions/create-first-function-vs-code-java) | Deploy serverless code <br> using Azure Functions | [Apache Maven](https://maven.apache.org/download.cgi) <br> [Azure Functions](https://marketplace.visualstudio.com/items?itemName=ms-azuretools.vscode-azurefunctions)

docs/java/java-project.md:
    2  Order: 5
    3: Area: java
    4  TOCTitle: Project Management
    5  ContentId: 251cba68-c77f-4ac6-a5de-1fab8dcca867
    6: PageTitle: Java project management in Visual Studio Code
    7  DateApproved: 4/25/2022
    8: MetaDescription: Lightweight Mode, Maven Support, Java Package and Dependency Management in Visual Studio Code
    9  MetaSocialImage:

   11  
   12: # Managing Java Projects in VS Code
   13  
   14: The [Project Manager for Java](https://marketplace.visualstudio.com/items?itemName=vscjava.vscode-java-dependency) extension helps you to manage your Java projects and their dependencies. It also helps you to create new Java projects, packages, and classes. To get the complete Java language support in Visual Studio Code, you can install the [Extension Pack for Java](https://marketplace.visualstudio.com/items?itemName=vscjava.vscode-java-pack), which includes the Project Manager for Java extension.
   15  
   16: <a class="install-extension-btn" href="vscode:extension/vscjava.vscode-java-pack">Install the Extension Pack for Java</a>
   17  
   18: >For details on how to get started with the extension pack, you can review the [Getting Started with Java](/docs/java/java-tutorial.md) tutorial.
   19  

   21  
   22: The **Java Projects** view helps you view your Java projects and their dependencies, and provides entry points for project management tasks.
   23  
   24: ![project view](images/java-project/projectmanager-overview.png)
   25  
   26: >By default, the Java Projects view is displayed below the **Explorer** view. If you cannot see it, try clicking the `...` button in the **EXPLORER** title bar and select **Java Projects**.
   27  

   29  
   30: ![overflow button](images/java-project/overflow-button.png)
   31  

   33  
   34: ![inline button](images/java-project/inline-button.png)
   35  

   37  
   38: ![context menu](images/java-project/context-menu.png)
   39  
   40: ### Create a new Java project
   41  
   42: You can create a new Java project by clicking the **+** button in the navigation bar, or through the command: **Java: Create Java Project...** in Command Palette (`kb(workbench.action.showCommands)`). During creation, VS Code will facilitate installing required extension(s) per your project type, if the extension(s) weren't already installed.
   43  
   44: ![create project](images/java-project/projectmanager-createproject.png)
   45  
   46: ### Import Java projects
   47  
   48: You can directly import existing Java projects and modules to your workspace through **File** > **Open Folder...** (Make sure the opened folder contains your build tool scripts, for example, `pom.xml` or `build.gradle`). VS Code for Java will detect your projects and import them automatically.
   49  
   50: When you add a new module into your projects, you can trigger the command **Java: Import Java projects in workspace** to import them to your workspace. This command helps to import new projects into the workspace without the need to reload the VS Code window.
   51  

   53  
   54: You can export your build to JAR from the projects view or by running the command **Java: Export Jar...**.
   55  
   56: ![Export jar from the project view](images/java-project/exportjar.gif)
   57  

   59  
   60: As Java evolves, it's common that developers work with multiple versions of JDK. You can map them to your local installation paths via the setting: `java.configuration.runtimes`. The setting has following format:
   61  
   62  ```json
   63: "java.configuration.runtimes": [
   64    {
   65:     "name": "JavaSE-1.8",
   66      "path": "/usr/local/jdk1.8.0_201"

   68    {
   69:     "name": "JavaSE-11",
   70      "path": "/usr/local/jdk-11.0.3",
   71      "sources" : "/usr/local/jdk-11.0.3/lib/src.zip",
   72:     "javadoc" : "https://docs.oracle.com/en/java/javase/11/docs/api",
   73      "default":  true

   75     {
   76:     "name": "JavaSE-12",
   77      "path": "/usr/local/jdk-12.0.2"

   79     {
   80:     "name": "JavaSE-13",
   81      "path": "/usr/local/jdk-13"

   87  
   88: To see which JDKs are used for your projects, you can trigger the command **Java: Configure Java Runtime** in **Command Palette** (`kb(workbench.action.showCommands)`). This command opens a view displaying the runtime information for your projects:
   89  
   90: ![Project runtime](images/java-project/configure-project-runtime.png)
   91  

  101  
  102: If you want to download a new JDK, you can click the `download` link, or trigger the command **Java: Install New JDK** in **Command Palette** (`kb(workbench.action.showCommands)`). It will open a new view guiding you to download JDKs.
  103  
  104: ![Download-jdk](images/java-project/download-jdk.png)
  105  
  106: > **Note**: To enable Java preview features, see [How can I use VS Code with new Java versions](/docs/java/java-faq.md#how-can-i-use-visual-studio-code-with-new-java-versions).
  107  

  109  
  110: The Project Management for Java extension provides a user interface to configure the classpath for unmanaged folders. The classpath can be set manually in the classpath configuration page. You can open it by executing the **Java: Configure Classpath** command from the Command Palette (`kb(workbench.action.showCommands)`).
  111  
  112: ![configure classpath](images/java-project/configure-classpath.png)
  113  
  114: In some rare cases, you may need to clean the Java workspace by executing the **Java: Clean Java Language Server Workspace** command from the Command Palette (`kb(workbench.action.showCommands)`) to let the language server rebuild your dependencies.
  115  

  121  
  122: ![add maven dependency](images/java-project/add-maven-dependency.png)
  123  

  128  
  129: ![manage referenced librares](images/java-project/manage-referenced-libraries.png)
  130  

  132  
  133: Behind the scene, there's a setting `java.project.referencedLibraries` in `settings.json`. Below are details on how to customize this setting.
  134  

  141  ```json
  142: "java.project.referencedLibraries": [
  143      "library/**/*.jar",

  155  
  156: If you want to exclude some libraries from the project, you can expand `java.project.referencedLibraries` to use `include/exclude` fields and add an `exclude` glob pattern:
  157  
  158  ```json
  159: "java.project.referencedLibraries": {
  160      "include": [

  178  ```json
  179: "java.project.referencedLibraries": {
  180      "include": [

  196  
  197: VS Code for Java supports two modes, lightweight and standard. With lightweight mode, only source files and JDK are resolved by the language server; with standard mode, imported dependencies are resolved and the project is built by the language server. Lightweight mode works best when you need a quick-start and lightweight environment to work with your source files, for example, reading source code, navigating among source code and JDK, viewing outline and Javadoc, and detecting and fixing syntax errors. Also, code completion is supported within the scope of source files and JDK.
  198  

  200  
  201: You can control which mode to launch with by configuring `java.server.launchMode` with the options below:
  202  
  203: - `Hybrid` (default) - Firstly, a workspace is opened with lightweight mode. You will be asked whether to switch to standard mode if your workspace contains unresolved Java projects. If you choose **Later**, it will stay in lightweight mode. You can click the language status item on the Status bar to manually switch to standard mode.
  204  - `Standard` - A workspace is opened with standard mode.

  218  
  219: ![Switch to Standard](images/java-project/switch-to-standard.gif)
  220  

  222  
  223: When you edit Java source code in Visual Studio Code, the Java language server is building your workspace to provide you with the necessary language features. You can see the detailed build task status and watch what is happening behind the scene by clicking the language status item in the Status bar. You can also select the **check details** link when a notification shows the language server is opening Java projects to see the build task status.
  224  
  225: <video autoplay loop muted playsinline controls title="Build status for the Java project">
  226:   <source src="/docs/java/java-project/java.build.status.mp4" type="video/mp4">
  227  </video>

  230  
  231: There are several Visual Studio Code extensions to support different build systems for Java. Below are extensions for several popular build systems.
  232  
  233: - [Maven for Java](https://marketplace.visualstudio.com/items?itemName=vscjava.vscode-maven)
  234: - [Gradle for Java](https://marketplace.visualstudio.com/items?itemName=vscjava.vscode-gradle)
  235: - [Bazel for Java](https://marketplace.visualstudio.com/items?itemName=sfdc.bazel-vscode-java) ([Bazel](https://marketplace.visualstudio.com/items?itemName=BazelBuild.vscode-bazel) is for `BUILD` files, without Java integration))
  236  
  237: If you run into any problems when using the features above, you can contact us by filing an [issue](https://github.com/microsoft/vscode-java-pack/issues).
  238  

  242  
  243: - [Java editing](/docs/java/java-editing.md) - Explore the editing features for Java in VS Code.
  244: - [Java debugging](/docs/java/java-debugging.md) - Find out how to debug your Java project with VS Code.
  245: - [Java testing](/docs/java/java-testing.md) - Use VS Code for your JUnit and TestNG cases.
  246: - [Java extensions](/docs/java/extensions.md) - Learn about more useful Java extensions for VS Code.

docs/java/java-refactoring.md:
    2  Order: 3
    3: Area: java
    4  TOCTitle: Refactoring
    5  ContentId: 36ee3e12-9bcc-4f01-9672-857ad2733c2d
    6: PageTitle: Java code refactoring and Source Actions for Visual Studio Code
    7  DateApproved: 12/9/2021
    8: MetaDescription: Java code refactoring and Source Actions for Visual Studio Code
    9  ---
   10: # Java refactoring and Source Actions
   11  

   55  
   56: The goal of the Java program refactoring is to make system-wide code changes without affecting behavior of the program. The Java Language Support for VS Code provides many easily accessible refactoring options.
   57  

   61  
   62: ![Invoke Refactoring](images/java-refactoring/refactoring_menu.png)
   63  

   73  
   74: ```java
   75  Arrays.asList("apple", "lemon", "banana");

   79  
   80: ```java
   81  List<String> fruits = Arrays.asList("apple", "lemon", "banana");

   86  <video autoplay loop muted playsinline controls title="Assign a parameter to a new field">
   87:   <source src="/docs/java/java-refactoring/assign-to-field.mp4" type="video/mp4">
   88  </video>

   99  
  100: ```java
  101  public class Clazz {

  114  
  115: ```java
  116  public class Clazz {

  145  
  146: ```java
  147  public void method() {

  155  
  156: ```java
  157  public void method() {

  176  
  177: ```java
  178  public void order(String[] books) {

  186  
  187: ```java
  188  public void order(String[] books) {

  195  <video autoplay loop muted playsinline controls title="Convert to enhanced for loop">
  196:   <source src="/docs/java/java-refactoring/convert-for-loop.mp4" type="video/mp4">
  197  </video>

  208  
  209: ```java
  210  public void method() {

  221  
  222: ```java
  223  public void method() {

  241  
  242: ```java
  243  import org.junit.Assert;

  251  
  252: ```java
  253  import static org.junit.Assert.assertEquals;

  260  <video autoplay loop muted playsinline controls title="Convert to static import">
  261:   <source src="/docs/java/java-refactoring/convert-static-imports.mp4" type="video/mp4">
  262  </video>

  273  
  274: ```java
  275  public double getArea(double r) {

  281  
  282: ```java
  283  private static final double PI = 3.14;

  301  
  302: ```java
  303  class Square {

  313  
  314: ```java
  315  class Square {

  326  <video autoplay loop muted playsinline controls title="Extract to field">
  327:   <source src="/docs/java/java-refactoring/extract-field.mp4" type="video/mp4">
  328  </video>

  332  <video autoplay loop muted playsinline controls title="Convert the variable to field">
  333:   <source src="/docs/java/java-refactoring/convert-field.mp4" type="video/mp4">
  334  </video>

  345  
  346: ```java
  347  public void method() {

  355  
  356: ```java
  357  public void method() {

  368  <video autoplay loop muted playsinline controls title="Extract to method">
  369:   <source src="/docs/java/java-refactoring/refactor.mp4" type="video/mp4">
  370  </video>

  383  
  384: ```java
  385  public void method() {

  393  
  394: ```java
  395  public void method() {

  403  <video autoplay loop muted playsinline controls title="Extract to local variable">
  404:   <source src="/docs/java/java-refactoring/extract-local-variable.mp4" type="video/mp4">
  405  </video>

  409  <video autoplay loop muted playsinline controls title="Rename local variable after extraction">
  410:   <source src="/docs/java/java-refactoring/extract-rename.mp4" type="video/mp4">
  411  </video>

  424  
  425: ```java
  426  private static final double PI = 3.14;

  434  
  435: ```java
  436  private static final double PI = 3.14;

  454  
  455: ```java
  456  public void method() {

  465  
  466: ```java
  467  public void method() {

  485  
  486: ```java
  487  public void method() {

  499  
  500: ```java
  501  public void method() {

  508  <video autoplay loop muted playsinline controls title="Replace calls to the method with method's body">
  509:   <source src="/docs/java/java-refactoring/inline.mp4" type="video/mp4">
  510  </video>

  523  
  524: ```java
  525  public void method(int value) {

  533  
  534: ```java
  535  public void method(int value) {

  551  
  552: ```java
  553  public void method(int value) {

  559  
  560: ```java
  561  public void method(int value) {

  566  <video autoplay loop muted playsinline controls title="Invert local variable">
  567:   <source src="/docs/java/java-refactoring/invert-variable.mp4" type="video/mp4">
  568  </video>

  583  
  584: ```java
  585  public class Office {

  599  
  600: ```java
  601  public class Office {

  616  <video autoplay loop muted playsinline controls title="Refactoring on a static method">
  617:   <source src="/docs/java/java-refactoring/move-static-method.mp4" type="video/mp4">
  618  </video>

  622  <video autoplay loop muted playsinline controls title="Move a class to another package">
  623:   <source src="/docs/java/java-refactoring/move-class.mp4" type="video/mp4">
  624  </video>

  628  <video autoplay loop muted playsinline controls title="Move an inner class to a new File">
  629:   <source src="/docs/java/java-refactoring/move-inner-type.mp4" type="video/mp4">
  630  </video>

  643  
  644: ```java
  645  public class Foo {

  655  
  656: ```java
  657  public class Bar {

  668  <video autoplay loop muted playsinline controls title="Shortcut to invoke the Rename refactoring">
  669:   <source src="/docs/java/java-refactoring/rename.mp4" type="video/mp4">
  670  </video>

  673  
  674: ![Rename from Explorer](images/java-refactoring/rename-explorer.gif)
  675  

  683  
  684: ```java
  685  String s = "";

  689  
  690: ```java
  691  var s = "";

  705  
  706: ```java
  707  var s = "";

  711  
  712: ```java
  713  String s = "";

  726  <video autoplay loop muted playsinline controls title="Generate constructors">
  727:   <source src="/docs/java/java-refactoring/generate-constructor.mp4" type="video/mp4">
  728  </video>

  734  <video autoplay loop muted playsinline controls title="Generate delegate methods">
  735:   <source src="/docs/java/java-refactoring/generate-delegate-methods.mp4" type="video/mp4">
  736  </video>

  742  <video autoplay loop muted playsinline controls title="Override/implement methods">
  743:   <source src="/docs/java/java-refactoring/override-implement-methods.mp4" type="video/mp4">
  744  </video>

  750  <video autoplay loop muted playsinline controls title="Organize imports">
  751:   <source src="/docs/java/java-refactoring/resolve-ambiguous-imports.mp4" type="video/mp4">
  752  </video>

  758  <video autoplay loop muted playsinline controls title="Generate getters and setters">
  759:   <source src="/docs/java/java-refactoring/advancedgettersetter.mp4" type="video/mp4">
  760  </video>

  767  
  768: - If you use Java 7+, you can set `java.codeGeneration.hashCodeEquals.useJava7Objects` to `true` to generate shorter code that calls `Objects.hash` and `Objects.equals`.
  769: - You can also set `java.codeGeneration.hashCodeEquals.useInstanceof` to `true` to use `instanceOf` operator to check the object types instead of calling `Object.getClass()`.
  770  
  771  <video autoplay loop muted playsinline controls title="Generate hashCode() and equals()">
  772:   <source src="/docs/java/java-refactoring/generate-hashcode-equals.mp4" type="video/mp4">
  773  </video>

  779  <video autoplay loop muted playsinline controls title="Generate toString()">
  780:   <source src="/docs/java/java-refactoring/generate-tostring.mp4" type="video/mp4">
  781  </video>

  790  
  791: ```java
  792  public class Clazz {

  803  
  804: ```java
  805  public class Clazz {

  819  <video autoplay loop muted playsinline controls title="Fix non-accessible references">
  820:   <source src="/docs/java/java-refactoring/fix-non-access-reference.mp4" type="video/mp4">
  821  </video>

  827  <video autoplay loop muted playsinline controls title="Create non-existing package">
  828:   <source src="/docs/java/java-refactoring/create-non-exist-package.mp4" type="video/mp4">
  829  </video>

docs/java/java-spring-apps.md:
    1  ---
    2: Area: java
    3: TOCTitle: Java Spring Apps
    4  ContentId: d34d8d3a-2093-4c67-a0a8-e02525fae8ab
    5: PageTitle: Build and Deploy Java Spring Boot Apps to Azure Spring Cloud with Visual Studio Code
    6  DateApproved: 3/2/2023
    7: MetaDescription: Java Spring app tutorial showing how to build and deploy a Java Spring Boot microservices to Azure Spring Cloud with Visual Studio Code
    8  ---
    9  
   10: # Java on Azure Spring Apps
   11  

   13  
   14: This tutorial shows you how to create a Java web application with Visual Studio Code. You'll learn how to run, debug, and edit the Java web app locally and then on a fully managed Microservices platform built for Java workloads: [Azure Spring Apps](https://azure.microsoft.com/services/spring-cloud/).
   15  

   23  * Modernize apps with Spring Apps patterns to improve agility and speed of delivery.
   24: * Run Java at cloud scale and drive higher usage without complicated infrastructure.
   25  * Develop and deploy rapidly without containerization dependencies.

   27  
   28: ![Greeting from Java](images/java-webapp/greeting-from-spring.png)
   29  

   31  
   32: Before running and deploying this sample, you must have the Java SE Development Kit (JDK) version 11 or above and Apache Maven build tools on your local development environment. If you don't already have them, install these tools first.
   33  
   34: Download and install the [Extension Pack for Java](https://marketplace.visualstudio.com/items?itemName=vscjava.vscode-java-pack).
   35  
   36: >**Note**: The `JAVA_HOME` environment variable must be set to the install location of the JDK to complete this tutorial.
   37  

   51  
   52: ![Clone Spring Repository](images/java-webapp/clone-repository.gif)
   53  
   54: From within VS Code, open any of the Java files within the `complete` folder (for example `src\main\java\hello\Application.java`). If you don't have the Java language extensions installed for VS Code, you will be prompted to install the Microsoft [Extension Pack for Java](https://marketplace.visualstudio.com/items?itemName=vscjava.vscode-java-pack). Follow the instructions and reload VS Code after the installation.
   55  
   56: ![Install Java Extensions](images/java-webapp/install-extensions.gif)
   57  
   58: Once you have the Extension Pack for Java installed, it will automatically build the project for you (the build may take several minutes). You can run the application within VS Code by pressing `kb(workbench.action.debug.start)` and selecting the **Java** environment. The Java Debug extension will generate a debugging configuration file `launch.json` for you under a `.vscode` folder in your project. You can see build progress in the VS Code Status bar and when everything is finished, the final active debug configuration is displayed.
   59  
   60: ![debug configuration in the Status bar](images/java-webapp/debugging-status-bar.png)
   61  

   63  
   64: ![Run Spring Boot](images/java-webapp/run-spring-boot.gif)
   65  

   67  
   68: ![Greeting from Spring](images/java-webapp/greeting-from-spring.png)
   69  

   71  
   72: Let's now edit `HelloController.java` to change "Greetings from Spring Boot!" to something else like "Hello World". VS Code provides a great editing experience for Java, check out [Editing and Navigating Code](/docs/languages/java.md#editing) to learn about VS Code's editing and code navigation features.
   73  

   75  
   76: ![Restart Application](images/java-webapp/restart-application.png)
   77  

   81  
   82: ![Debug Application](images/java-webapp/debugging.png)
   83  
   84: If you would like to learn more about debugging Java with VS Code, you can read [Java Debugging](/docs/java/java-debugging.md).
   85  

   89  
   90: We just built a Java web application and ran it locally. Now you will learn how to deploy from Visual Studio Code and run it on [Azure Spring Apps](https://azure.microsoft.com/services/spring-cloud/).
   91  

   93  
   94: The [Azure Spring Apps](https://marketplace.visualstudio.com/items?itemName=vscjava.vscode-azurespringcloud) extension is used to create, manage, and deploy to Azure Spring Apps with key features including:
   95  

  103  
  104: To install the Azure Spring Apps extension, open the Extensions view (`kb(workbench.view.extensions)`) and search for `azure spring apps` to filter the results. Select the Microsoft [Azure Spring Apps](https://marketplace.visualstudio.com/items?itemName=vscjava.vscode-azurespringcloud) extension. For a command-line experience, you can also check out the [Azure Spring Apps quickstart with Azure CLI](https://learn.microsoft.com/azure/spring-apps/quickstart).
  105  

  115  
  116: ![Azure sign in code](images/java-spring-cloud/signinasa.png)
  117  

  123  
  124:     ![Create Azure Spring Apps Service instance](images/java-spring-cloud/create-service.png)
  125  
  126: 1. After the service instance is created, refresh the Azure Explorer to display the new service instance. Right-click on the service instance and select **Create App**. Type the app name, select the Java version, and then press `kbstyle(Enter)` to start creating. The app will be ready in a few minutes.
  127  
  128:     ![Create App](images/java-spring-cloud/create-app.png)
  129  

  139  
  140:     ![Deploy App](images/java-spring-cloud/deploy-app.png)
  141  
  142: 2. You can watch the deployment status on the bottom right. Once done, select **Access Public Endpoint** to test the app running on Azure and **Yes** when prompted to assign a public endpoint. Be aware that only Spring Boot fat Jar is supported, [learn more about apps on Azure Spring Apps](https://learn.microsoft.com/azure/spring-apps/how-to-prepare-app-deployment?pivots=programming-language-java&tabs=basic-standard-tier).
  143  
  144:     ![Access public endpoint](images/java-spring-cloud/access-public-endpoint.png)
  145  

  149  
  150:     ![Scale app](images/java-spring-cloud/scale.png)
  151  

  155  
  156:     ![Start log streaming](images/java-spring-cloud/start-log-streaming.png)
  157  

  159  
  160:     ![Log output](images/java-spring-cloud/log-output.png)
  161  

  163  
  164: * Explore more powerful features of [Azure Spring Apps with Microservices](https://learn.microsoft.com/azure/spring-apps/quickstart-sample-app-introduction?pivots=programming-language-java&tabs=basic-standard-tier).
  165: * To learn more about Java Debugging features, read the [Java Debugging Tutorial](/docs/java/java-debugging.md).

docs/java/java-spring-boot.md:
   2  Order: 9
   3: Area: java
   4  TOCTitle: Spring Boot

   7  DateApproved: 12/22/2021
   8: MetaDescription: Spring Boot extensions for Java developer using Visual Studio Code editor.
   9  ---

  15  * [Spring Boot Tools](https://marketplace.visualstudio.com/items?itemName=vmware.vscode-spring-boot)
  16: * [Spring Initializr](https://marketplace.visualstudio.com/items?itemName=vscjava.vscode-spring-initializr)
  17: * [Spring Boot Dashboard](https://marketplace.visualstudio.com/items?itemName=vscjava.vscode-spring-boot-dashboard)
  18  

  20  
  21: If you run into any issues when using the features below, you can contact us by [opening an issue](https://github.com/microsoft/vscode-java-pack/issues).
  22  

  26  
  27: * [Java Development Kit (JDK)](https://www.microsoft.com/openjdk)
  28: * [Extension Pack for Java](https://marketplace.visualstudio.com/items?itemName=vscjava.vscode-java-pack)
  29  * [Spring Boot Extension Pack](https://marketplace.visualstudio.com/items?itemName=vmware.vscode-boot-dev-pack)
  30  
  31: <a class="install-extension-btn" href="vscode:extension/vscjava.vscode-java-pack">Install the Extension Pack for Java</a>
  32  

  34  
  35: >**Note**: More information about how to get started can be found at [Getting Started with Java](/docs/java/java-tutorial.md) tutorial.
  36  
  37: To help get you started with Java Spring Boot development, you can use the [Java Spring profile template](/docs/editor/profiles.md#java-spring-profile-template) that includes useful extensions, settings, and Java Spring Boot code snippets.
  38  

  40  
  41: The [Spring Initializr](https://marketplace.visualstudio.com/items?itemName=vscjava.vscode-spring-initializr) extension allows you to search for dependencies and generate new Spring Boot projects.
  42  

  47  <video autoplay loop muted playsinline controls video="Create the project">
  48:   <source src="/docs/java/java-spring-boot/spring-initializr.mp4" type="video/mp4">
  49  </video>

  52  
  53: The [Spring Initializr](https://marketplace.visualstudio.com/items?itemName=vscjava.vscode-spring-initializr) extension allows you to add dependencies after generating a new Spring Boot project.
  54  

  57  <video autoplay loop muted playsinline controls title="Edit the project">
  58:   <source src="/docs/java/java-spring-boot/spring-initializr-add-starters.mp4" type="video/mp4">
  59  </video>

  62  
  63: The [Spring Boot Tools](https://marketplace.visualstudio.com/items?itemName=vmware.vscode-spring-boot) extension includes rich language support for working with Spring Boot `application.properties`, `application.yml`, and `.java` files.
  64  

  79  <video autoplay loop muted playsinline controls title="Live application information and metrics">
  80:   <source src="/docs/java/java-spring-boot/spring-live-info.mp4" type="video/mp4">
  81  </video>

  84  
  85: In addition to using `kb(workbench.action.debug.start)` to run your application, there's the [Spring Boot Dashboard](https://marketplace.visualstudio.com/items?itemName=vscjava.vscode-spring-boot-dashboard) extension, which lets you view and manage all available Spring Boot projects in your workspace as well as quickly start, stop, or debug your project.
  86  
  87  <video autoplay loop muted playsinline controls title="Run the Spring Boot application from Spring Boot dashboard">
  88:   <source src="/docs/java/java-spring-boot/spring-dashboard.mp4" type="video/mp4">
  89  </video>

  92  
  93: * [Java Spring profile template](/docs/editor/profiles.md#java-spring-profile-template) - Create a new [profile](/docs/editor/profiles) with a curated set of extensions, settings, and snippets.
  94: * To deploy your web app, see [Java Web Apps with VS Code](/docs/java/java-webapp.md).
  95  * To containerize a web app and deploy as a Docker container, check out [Docker in VS Code](/docs/containers/overview.md).
  96: * To learn more about Java debugging features, see [Running and debugging Java](/docs/java/java-debugging.md).

docs/java/java-testing.md:
    2  Order: 8
    3: Area: java
    4  TOCTitle: Testing
    5  ContentId: 82be3b78-2c09-4571-abec-69f95f111e0f
    6: PageTitle: Java Testing in Visual Studio Code
    7  DateApproved: 2/11/2022
    8: MetaDescription: See how you can test your Java code in Visual Studio Code.
    9  MetaSocialImage:

   11  
   12: # Testing Java with Visual Studio Code
   13  
   14: Testing Java in Visual Studio Code is enabled by the [Test Runner for Java](https://marketplace.visualstudio.com/items?itemName=vscjava.vscode-java-test) extension. It's a lightweight extension to run and debug Java test cases.
   15  

   23  
   24: The [Test Runner for Java](https://marketplace.visualstudio.com/items?itemName=vscjava.vscode-java-test) works with the [Language Support for Java™ by Red Hat](https://marketplace.visualstudio.com/items?itemName=redhat.java) and [Debugger for Java](https://marketplace.visualstudio.com/items?itemName=vscjava.vscode-java-debug) extensions to provide the following features:
   25  

   34  - Visual Studio Code (version 1.59.0 or later)
   35: - [Extension Pack for Java](https://marketplace.visualstudio.com/items?itemName=vscjava.vscode-java-pack)
   36  
   37: <a class="install-extension-btn" href="vscode:extension/vscjava.vscode-java-pack">Install the Extension Pack for Java</a>
   38  

   40  
   41: > **Note**: If you have already setup your Java test framework in your project, you can skip to the [Features](#features) section.
   42  

   44  
   45: Starting with Test Runner for Java version 0.34.0, you can enable a test framework for your unmanaged folder project (a project without any build tools) with just a few steps in the **Testing** Explorer:
   46  
   47  <video autoplay loop muted playsinline controls title="Enable testing and adding test framework JARs to your project">
   48:   <source src="/docs/java/java-testing/enable-tests.mp4" type="video/mp4">
   49  </video>

   73  plugins {
   74:     java
   75  }

   83  
   84: If your project does not use any build tools, you can enable JUnit 4 via the [Testing Explorer](#enable-testing-and-adding-test-framework-jars-to-your-project) or by manually downloading the following JARs and adding them to the project classpath (via setting `java.project.referencedLibraries`, check [Dependency management](/docs/java/java-project.md#dependency-management) for more information):
   85  

   96  
   97: If your project does not use any build tools, you can enable JUnit 5 via the [Testing Explorer](#enable-testing-and-adding-test-framework-jars-to-your-project) or by manually including the [junit-platform-console-standalone](https://repo1.maven.org/maven2/org/junit/platform/junit-platform-console-standalone/) JAR in the project classpath (via setting `java.project.referencedLibraries`, check [Dependency management](/docs/java/java-project.md#dependency-management) for more information).
   98  

  119  plugins {
  120:     java
  121  }

  129  
  130: If your project does not use any build tools, you can enable TestNG via the [Testing Explorer](#enable-testing-and-adding-test-framework-jars-to-your-project) or by manually downloading the following JARs and adding them to the project classpath (via setting `java.project.referencedLibraries`, check [Dependency management](/docs/java/java-project.md#dependency-management) for more information):
  131  

  139  
  140: The Test Runner for Java extension will generate shortcuts (the green play button) on the left side of the class and method definition. To run the target test cases, select the green play button. You can also right-click on it to see more options.
  141  
  142  <video autoplay loop muted playsinline controls title="Run/debug test cases">
  143:   <source src="/docs/java/java-testing/gutter-icon.mp4" type="video/mp4">
  144  </video>

  150  <video autoplay loop muted playsinline controls title="Testing Explorer">
  151:   <source src="/docs/java/java-testing/test-explorer.mp4" type="video/mp4">
  152  </video>

  155  
  156: Sometimes you may want to customize the configuration to run your test cases. To achieve this, you can add the configuration into your workspace [settings](/docs/getstarted/settings.md) under the section: `java.test.config`.
  157  
  158: ![Customize test configurations](images/java-testing/configuration.png)
  159  

  166  - **modulePaths**: The modulepaths defined in this setting will be appended to the resolved modulepaths.
  167: - **name**: Specify the name of the configuration item. You can set the default configuration name via setting `java.test.defaultConfig`.
  168  - **preLaunchTask**: Specify the label of a task specified in `tasks.json` (in the workspace's `.vscode` folder). The task will be launched before the start of testing.

  175  
  176: More details can be found on the [vscode-java-test Wiki](https://github.com/Microsoft/vscode-java-test/wiki/Run-with-Configuration).
  177  

  182  <video autoplay loop muted playsinline controls title="View test results">
  183:   <source src="/docs/java/java-testing/test-result.mp4" type="video/mp4">
  184  </video>

  194  <video autoplay loop muted playsinline controls title="Generate tests">
  195:   <source src="/docs/java/java-testing/generate-tests-from-main.mp4" type="video/mp4">
  196  </video>

  200  <video autoplay loop muted playsinline controls title="Generate tests from test">
  201:   <source src="/docs/java/java-testing/generate-tests-from-test.mp4" type="video/mp4">
  202  </video>

  205  
  206: The extension provides features to help you navigate between your tests and test subjects. If your source code is contained in `src/main/java` or `src/test/java`, you can find the entry named **Go to Test** or **Go to Test Subject** in the editor context menu:
  207  
  208  <video autoplay loop muted playsinline controls title="Test navigation">
  209:   <source src="/docs/java/java-testing/test-navigation.mp4" type="video/mp4">
  210  </video>
  211  
  212: You can also find the command in the Command Palette (`kb(workbench.action.showCommands)`) by searching for **Java: Go to Test**.
  213  

  217  
  218: ![Testing commands in the Command Palette](images/java-testing/command_palette.png)
  219  

  223  
  224: ![Testing settings in the Settings editor](images/java-testing/settings.png)
  225  

  227  
  228: If you meet any problem when using the extension, you can review the [FAQ](https://github.com/microsoft/vscode-java-test/wiki/FAQ) and our [issue list](https://github.com/microsoft/vscode-java-test/issues) to check if there is an answer to your problem.
  229  

  231  
  232: If you are interested in providing feedback or contributing directly to the code base, please read [Contributing to Test Runner for Java](https://github.com/Microsoft/vscode-java-test/blob/main/CONTRIBUTING.md), which covers the following:
  233  
  234: - [Questions and Feedback](https://github.com/Microsoft/vscode-java-test/blob/main/CONTRIBUTING.md#questions-and-feedback)
  235: - [Reporting Issues](https://github.com/Microsoft/vscode-java-test/blob/main/CONTRIBUTING.md#reporting-issues)
  236: - [Contributing Fixes](https://github.com/Microsoft/vscode-java-test/blob/main/CONTRIBUTING.md#contributing-fixes)
  237  

  241  
  242: - [Debugging](/docs/java/java-debugging.md) - Find out how to debug your Java project with VS Code.
  243: - [Extensions for Java](/docs/java/extensions.md) - Learn about more useful Java extensions for VS Code.

docs/java/java-tomcat-jetty.md:
   2  Order: 10
   3: Area: java
   4  TOCTitle: Application Servers

   7  DateApproved: 12/142021
   8: MetaDescription: Tomcat, Jetty and Open Liberty extensions for Java developer using Visual Studio Code.
   9  ---

  12  
  13: Visual Studio Code is a code editor-centric development tool, so it doesn't come with any embedded application server. For most servers, you will need to deploy them using the command line, and then use the appropriate debugger [configuration](/docs/java/java-debugging.md#configure) if you want to attach to it.
  14  
  15: On the other hand, we know that for certain Java workloads, server integration is very useful. With Visual Studio Code, you can find third party extensions for popular application servers, for example [Tomcat](https://tomcat.apache.org/), [Jetty](https://www.eclipse.org/jetty/), and [Open Liberty](https://openliberty.io/), which are helpful when working with those servers locally.
  16  
  17: For [Spring Boot Dashboard](https://marketplace.visualstudio.com/items?itemName=vscjava.vscode-spring-boot-dashboard), see [Spring Boot in Visual Studio Code](/docs/java/java-spring-boot.md).
  18  
  19: If you run into any issues when using the features below, you can contact us by entering an [issue](https://github.com/microsoft/vscode-java-pack/issues).
  20  

  25  <video autoplay loop muted playsinline controls title="Community server connectors">
  26:   <source src="/docs/java/java-tomcat-jetty/server-connector.mp4" type="video/mp4">
  27  </video>

docs/java/java-tutorial.md:
    2  Order: 1
    3: Area: java
    4  TOCTitle: Getting Started
    5  ContentId: 12d8264b-643f-4745-a7ea-8433dedb1331
    6: PageTitle: Getting Started with Java in Visual Studio Code
    7  DateApproved: 1/4/2022
    8: MetaDescription: Java tutorial showing basic Java language support in the Visual Studio Code editor
    9  ---
   10  
   11: # Getting Started with Java in VS Code
   12  
   13: This tutorial shows you how to write and run Hello World program in Java with Visual Studio Code. It also covers a few advanced features, which you can explore by reading other documents in this section.
   14  
   15: For an overview of the features available for Java in VS Code, see [Java Language Overview](/docs/languages/java.md).
   16  
   17: If you run into any issues when following this tutorial, you can contact us by entering an [issue](https://github.com/microsoft/vscode-java-pack/issues).
   18  
   19: ## Setting up VS Code for Java development
   20  
   21: ### Coding Pack for Java
   22  
   23: To help you set up quickly, you can install the **Coding Pack for Java**, which includes VS Code, the Java Development Kit (JDK), and essential Java extensions. The Coding Pack can be used as a clean installation, or to update or repair an existing development environment.
   24  
   25: <a class="install-extension-btn" onclick="pushCodingPackEvent('java', 'win')" href="https://aka.ms/vscode-java-installer-win">Install the Coding Pack for Java - Windows</a>
   26  
   27: <a class="install-extension-btn" onclick="pushCodingPackEvent('java', 'mac')" href="https://aka.ms/vscode-java-installer-mac">Install the Coding Pack for Java - macOS</a><br>
   28  
   29: > **Note**: The Coding Pack for Java is only available for Windows and macOS. For other operating systems, you will need to manually install a JDK, VS Code, and Java extensions.
   30  

   32  
   33: If you are an existing VS Code user, you can also add Java support by installing the [Extension Pack for Java](https://marketplace.visualstudio.com/items?itemName=vscjava.vscode-java-pack), which includes these extensions:
   34  
   35: * [Language Support for Java™ by Red Hat](https://marketplace.visualstudio.com/items?itemName=redhat.java)
   36: * [Debugger for Java](https://marketplace.visualstudio.com/items?itemName=vscjava.vscode-java-debug)
   37: * [Test Runner for Java](https://marketplace.visualstudio.com/items?itemName=vscjava.vscode-java-test)
   38: * [Maven for Java](https://marketplace.visualstudio.com/items?itemName=vscjava.vscode-maven)
   39: * [Project Manager for Java](https://marketplace.visualstudio.com/items?itemName=vscjava.vscode-java-dependency)
   40  * [Visual Studio IntelliCode](https://marketplace.visualstudio.com/items?itemName=VisualStudioExptTeam.vscodeintellicode)
   41  
   42: <a class="install-extension-btn" href="vscode:extension/vscjava.vscode-java-pack">Install the Extension Pack for Java</a>
   43  
   44: The [Extension Pack for Java](https://marketplace.visualstudio.com/items?itemName=vscjava.vscode-java-pack) provides a Quick Start guide and tips for code editing and debugging. It also has a FAQ that answers some frequently asked questions. Use the command **Java: Tips for Beginners** from the Command Palette (`kb(workbench.action.showCommands)`) to launch the guide.
   45  
   46: ![Java Getting Started](images/java-tutorial/getting-started.png)
   47  
   48: You can also install extensions separately. The **Extensions Guide** is provided to help you. You can launch the guide with the **Java: Extensions Guide** command.
   49  

   51  
   52: * [Language Support for Java™ by Red Hat](https://marketplace.visualstudio.com/items?itemName=redhat.java)
   53: * [Debugger for Java](https://marketplace.visualstudio.com/items?itemName=vscjava.vscode-java-debug)
   54  
   55: ## Installing and setting up a Java Development Kit (JDK)
   56  
   57: To use Java within Visual Studio Code, you need to install a Java Development Kit (JDK) on your local environment. JDK is a software development environment used for developing Java applications.
   58  
   59: ### Supported Java versions
   60  
   61: The [Extension Pack for Java](https://marketplace.visualstudio.com/items?itemName=vscjava.vscode-java-pack) supports Java version 1.5 or above.
   62  
   63: > **Note**: To configure JDKs for your projects, see [Configure Runtime for Projects](/docs/java/java-project.md#configure-runtime-for-projects). To enable Java preview features, see [How can I use VS Code with new Java versions](/docs/java/java-faq.md#how-can-i-use-visual-studio-code-with-new-java-versions).
   64  
   65: ### Installing a Java Development Kit (JDK)
   66  

   71  * [Eclipse Adoptium's Temurin](https://adoptium.net/)
   72: * [IBM Semeru Runtimes](https://developer.ibm.com/languages/java/semeru-runtimes)
   73  * [Microsoft Build of OpenJDK](https://www.microsoft.com/openjdk)
   74: * [Oracle Java SE](https://www.oracle.com/java/technologies/javase-downloads.html)
   75  * [Red Hat build of OpenJDK](https://developers.redhat.com/products/openjdk/download)

   79  
   80: Create a folder for your Java program and open the folder with VS Code. Then in VS Code, create a new file and save it with the name `Hello.java`. When you open that file, the Java Language Server automatically starts loading, and you should see a language status item with a loading icon on the right side of the Status Bar showing the language status is busy. After it finishes loading, you can hover on the language status item and find the loading process has been finished successfully. You can also choose to pin the status item in the status bar.
   81  
   82  <video autoplay loop muted playsinline controls title="Creating a source code file">
   83:   <source src="/docs/java/java-tutorial/JavaHelloWorld.Standalone.mp4" type="video/mp4">
   84  </video>
   85  
   86: >**Note**: If you open a Java file in VS Code without opening its folder, the Java Language Server might not work properly.
   87  
   88: VS Code will also try to figure out the correct package for the new type and fill the new file from a template. See [Create new file](/docs/java/java-editing.md#create-new-file).
   89  
   90: You can also create a Java project using the **Java: Create Java Project** command. Bring up the **Command Palette**  (`kb(workbench.action.showCommands)`) and then type `java` to search for this command. After selecting the command, you will be prompted for the location and name of the project. You can also choose your build tool from this command.
   91  
   92: <video autoplay loop muted playsinline controls title="Create Java Project">
   93:   <source src="/docs/java/java-tutorial/JavaHelloWorld.Project.mp4" type="video/mp4">
   94  </video>
   95  
   96: Visual Studio Code also supports more complex Java projects — see [Project Management](/docs/java/java-project.md).
   97  

  102  <video autoplay loop muted playsinline controls title="Editing source code">
  103:   <source src="/docs/java/java-tutorial/edit-code.mp4" type="video/mp4">
  104  </video>
  105  
  106: To learn more about editing Java, see [Java Editing](/docs/java/java-editing.md).
  107  

  109  
  110: To run and debug Java code, set a breakpoint, then either press `kb(workbench.action.debug.start)` on your keyboard or use the **Run** > **Start Debugging** menu item. You can also use the **Run|Debug** CodeLens option in the editor. After the code compiles, you can see all your variables and threads in the **Run and Debug** view.
  111  
  112  <video autoplay loop muted playsinline controls title="Running and debugging your program">
  113:   <source src="/docs/java/java-tutorial/run-debug.mp4" type="video/mp4">
  114  </video>
  115  
  116: The debugger also supports advanced features such as [Hot Code Replace](/docs/java/java-debugging.md#hot-code-replace) and conditional breakpoints.
  117  
  118: For more information, see [Java Debugging](/docs/java/java-debugging.md).
  119  

  121  
  122: The editor also has many more capabilities to assist with your Java workload.
  123  
  124: * [Editing Java](/docs/java/java-editing.md) explains how to navigate and edit Java in more details
  125: * [Debugging](/docs/java/java-debugging.md) illustrates all the key features of the Java Debugger
  126: * [Testing](/docs/java/java-testing.md) provides comprehensive support for JUnit and TestNG framework
  127: * [Java Project Management](/docs/java/java-project.md) shows you how to use a project view and work with Maven
  128: * [Spring Boot](/docs/java/java-spring-boot.md) and [Tomcat and Jetty](/docs/java/java-tomcat-jetty.md) demonstrate great framework support
  129: * [Java Web Apps](/docs/java/java-webapp.md) shows how to work with Java Web App in VS Code

docs/java/java-webapp.md:
    1  ---
    2: Area: java
    3: TOCTitle: Java Web App
    4  ContentId: 98ddf1d3-6a8e-4b0f-a44d-e57cfdf2348c
    5: PageTitle: Build and Deploy Java Web Apps to the cloud with Visual Studio Code
    6  DateApproved: 3/2/2023
    7: MetaDescription: Java web app tutorial showing how to build and deploy a Java web app to Azure with Visual Studio Code
    8  ---
    9  
   10: # Java Web Apps with Visual Studio Code
   11  
   12: This tutorial shows you how to create a Java web application with Visual Studio Code. You'll learn how to run, debug, and edit the Java web app locally and eventually on the cloud.
   13  

   17  
   18: ![Greeting from Java](images/java-webapp/greeting-from-spring.png)
   19  

   21  
   22: Before running and deploying this sample, you must have the Java SE Development Kit (JDK) and Apache Maven build tools on your local development environment. If you don't have, please install them.
   23  
   24: Download and install the [Extension Pack for Java](https://marketplace.visualstudio.com/items?itemName=vscjava.vscode-java-pack), which has JDK 11 included.
   25  
   26: >**Note**: The `JAVA_HOME` environment variable must be set to the install location of the JDK to complete this tutorial.
   27  

   41  
   42: ![Clone Spring Repository](images/java-webapp/clone-repository.gif)
   43  
   44: From within VS Code, open any of the Java files within the `complete` folder (for example `src\main\java\hello\Application.java`). If you don't have the Java language extensions installed for VS Code, you will be prompted to install the Microsoft [Extension Pack for Java](https://marketplace.visualstudio.com/items?itemName=vscjava.vscode-java-pack). Follow the instructions and reload VS Code after the installation.
   45  
   46: ![Install Java Extensions](images/java-webapp/install-extensions.gif)
   47  
   48: Once you have the Extension Pack for Java installed, it will automatically build the project for you (this may take several minutes). You can run the application within VS Code by pressing `kb(workbench.action.debug.start)` and selecting the **Java** environment. The Java Debug extension will generate a debugging configuration file `launch.json` for you under a `.vscode` folder in your project. You can see build progress in the VS Code Status Bar and when everything is finished, the final active debug configuration is displayed.
   49  
   50: ![debug configuration in the Status Bar](images/java-webapp/debugging-status-bar.png)
   51  

   53  
   54: ![Run Spring Boot](images/java-webapp/run-spring-boot.gif)
   55  

   57  
   58: ![Greeting from Spring](images/java-webapp/greeting-from-spring.png)
   59  

   61  
   62: Let's now edit `HelloController.java` to change "Greetings from Spring Boot!" to something else like "Hello World". VS Code provides a great editing experience for Java, check out [Navigating and edit Java](/docs/java/java-editing.md) to learn about VS Code's editing and code navigation features.
   63  

   65  
   66: ![Restart Application](images/java-webapp/restart-application.png)
   67  

   71  
   72: ![Debug Application](images/java-webapp/debugging.png)
   73  
   74: If you would like to learn more about debugging Java with VS Code, you can read [Java Debugging](/docs/java/java-debugging.md).
   75  

   79  
   80: We just built a Java web application and ran it locally. Now you will learn how to deploy from Visual Studio Code and run it on [Azure](https://azure.microsoft.com) in the cloud.
   81  

   95  
   96: To install the Azure App Service extension, open the Extensions view (`kb(workbench.view.extensions)`) and search for `azure app service` to filter the results. Select the Microsoft [Azure App Service](https://marketplace.visualstudio.com/items?itemName=ms-azuretools.vscode-azureappservice) extension. For a more command-line Maven-centric experience, you can also check out the [Maven plugin for Azure App Service Linux tutorial](https://learn.microsoft.com/azure/app-service/quickstart-java?pivots=platform-linux-development-environment-maven).
   97  

  101  
  102: ![Azure sign in code](images/java-webapp/login.png)
  103  

  111  
  112: 3. Select the runtime task of the Web App, for example `Java 17`.
  113  
  114: 4. Select the Java web server stack, for example `Java SE`.
  115  

  117  
  118: ![Create a Web App](images/java-webapp/create-webapp.png)
  119  

  131  
  132: ![Deploy to Web App](images/java-webapp/deploy-webapp.png)
  133  

  135  
  136: ![Greeting from Spring Boot](images/java-webapp/greeting.png)
  137  

  143  
  144: The [Spring Boot Starter](https://learn.microsoft.com/azure/developer/java/spring-framework/configure-spring-boot-starter-java-app-with-cosmos-db) makes it easy to store data in and retrieve data from your Azure Cosmos DB for NoSQL database.
  145  

  154  
  155: 1. You can start from the [Spring Data Azure Cosmos DB Sample Project](https://github.com/Azure/azure-sdk-for-java/tree/master/sdk/spring/azure-spring-boot-samples/azure-spring-boot-sample-cosmos).
  156  

  168  
  169: After setting a breakpoint (`kb(editor.debug.action.toggleBreakpoint)`) in your source code, refresh your browser to hit the breakpoint. Details about debugging can be found in [Java Debugging](/docs/java/java-debugging.md)
  170  

  182     mvn package
  183:    java -jar target/azure-documentdb-spring-boot-sample-0.0.1-SNAPSHOT.jar
  184     ```

  188  - To containerize and deploy a web application, check out the [Docker in VS Code](/docs/containers/overview.md).
  189: - To learn more about Java Debugging features, see the [Java Debugging Tutorial](/docs/java/java-debugging.md).

docs/languages/cpp.md:
  206  
  207: GitHub Copilot provides suggestions for numerous languages and a wide variety of frameworks, and it works especially well for Python, JavaScript, TypeScript, Ruby, Go, C# and C++.
  208  

docs/languages/csharp.md:
  77  
  78: GitHub Copilot provides suggestions for numerous languages and a wide variety of frameworks, and it works especially well for Python, JavaScript, TypeScript, Ruby, Go, C# and C++.
  79  

docs/languages/css.md:
  236  
  237: ```javascript
  238  // Sass configuration

  256  
  257: ```javascript
  258  // Less configuration

docs/languages/html.md:
   21  
   22: You can also work with embedded CSS and JavaScript. However, note that script and style includes from other files are not followed, the language support only looks at the content of the HTML file.
   23  

   66  
   67: Move the mouse over HTML tags or embedded styles and JavaScript to get more information on the symbol under the cursor.
   68  

   72  
   73: The HTML language support performs validation on all embedded JavaScript and CSS.
   74  

  124  
  125: >**Tip:** The formatter doesn't format the tags listed in the `html.format.unformatted` and `html.format.contentUnformatted` settings. Embedded JavaScript is formatted unless 'script' tags are excluded.
  126  

  139  
  140: For example, to use Emmet HTML abbreviations inside JavaScript:
  141  

  144      "emmet.includeLanguages": {
  145:         "javascript": "html"
  146       }

docs/languages/identifiers.md:
  26      "languages": [{
  27:         "id": "java",
  28:         "extensions": [ ".java", ".jav" ],
  29:         "aliases": [ "Java", "java" ]
  30      }]

  88  Ini | `ini`
  89: Java | `java`
  90: JavaScript | `javascript`
  91: JavaScript JSX | `javascriptreact`
  92  JSON | `json`

docs/languages/java.md:
    3  Area: languages
    4: TOCTitle: Java
    5  ContentId: 080fd21f-92b7-4491-9ab2-6eb9a3bb0793
    6: PageTitle: Java in Visual Studio Code
    7  DateApproved: 1/4/2022
    8: MetaDescription: Learn about Visual Studio Code editor features (code completion, debugging, snippets, linting) for Java.
    9  ---
   10: # Java in Visual Studio Code
   11  
   12: Support for Java in Visual Studio Code is provided through a wide range of [extensions](/docs/java/extensions.md). Combined with the power of core VS Code, these extensions give you a lightweight and performant code editor that also supports many of the most common Java development techniques.
   13  
   14: This article will give you an overview of different capabilities of Visual Studio Code for Java developers. For a quick walkthrough of editing, running, and debugging a Java program with Visual Studio Code, use the **Java Getting Started Tutorial** button below.
   15  
   16: <a class="next-topic-btn" href="/docs/java/java-tutorial">Java Getting Started Tutorial</a>
   17  

   19  
   20: VS Code provides essential language features such as code completion, refactoring, linting, formatting, and code snippets along with convenient debugging and unit test support. VS Code also integrates with tooling and frameworks such as Maven, Tomcat, Jetty, and Spring Boot. Leveraging the power of Visual Studio Code, Java developers get an excellent tool for both quick code editing and also the full debugging and testing cycle. It's a great choice for your Java work if you're looking for a tool which:
   21  
   22  * Is fast, lightweight, free, and open source.
   23: * Supports many other languages, not just Java.
   24: * Helps start your Java journey without installing and learning a complex IDE.
   25  * Provides great microservices support including popular frameworks, container tooling, and cloud integration.

   28  
   29: ## Install Visual Studio Code for Java
   30  
   31: To help you set up quickly, we recommend you use the **Coding Pack for Java**, which is the bundle of VS Code, the Java Development Kit (JDK), and a collection of suggested extensions by Microsoft. The Coding Pack can also be used to fix an existing development environment.
   32  
   33: <a class="install-extension-btn" onclick="pushCodingPackEvent('java', 'win')" href="https://aka.ms/vscode-java-installer-win">Install the Coding Pack for Java - Windows</a>
   34  
   35: <a class="install-extension-btn" onclick="pushCodingPackEvent('java', 'mac')" href="https://aka.ms/vscode-java-installer-mac">Install the Coding Pack for Java - macOS</a><br>
   36  
   37: > **Note**: The Coding Pack for Java is only available for Windows and macOS. For other operating systems, you will need to manually install a JDK, VS Code, and Java extensions.
   38  
   39: If you have already installed VS Code and want to add Java support to it, we recommend using the [Extension Pack for Java](https://marketplace.visualstudio.com/items?itemName=vscjava.vscode-java-pack), a collection of extensions suggested by Microsoft:
   40  
   41: 1. [Language Support for Java™ by Red Hat](https://marketplace.visualstudio.com/items?itemName=redhat.java)
   42: 2. [Debugger for Java](https://marketplace.visualstudio.com/items?itemName=vscjava.vscode-java-debug)
   43: 3. [Test Runner for Java](https://marketplace.visualstudio.com/items?itemName=vscjava.vscode-java-test)
   44: 4. [Maven for Java](https://marketplace.visualstudio.com/items?itemName=vscjava.vscode-maven)
   45: 5. [Project Manager for Java](https://marketplace.visualstudio.com/items?itemName=vscjava.vscode-java-dependency)
   46  6. [Visual Studio IntelliCode](https://marketplace.visualstudio.com/items?itemName=VisualStudioExptTeam.vscodeintellicode)
   47  
   48: <a class="install-extension-btn" href="vscode:extension/vscjava.vscode-java-pack">Install the Extension Pack for Java</a>
   49  
   50: Alternatively, you can add Java language support to VS Code by installing the popular Java extensions by yourself.
   51  

   53  
   54: There are also other popular Java extensions you can pick for your own needs, including:
   55  
   56  1. [Spring Boot Extension Pack](https://marketplace.visualstudio.com/items?itemName=vmware.vscode-boot-dev-pack)
   57: 2. [Gradle for Java](https://marketplace.visualstudio.com/items?itemName=vscjava.vscode-gradle)
   58  3. [Community Server Connectors](https://marketplace.visualstudio.com/items?itemName=redhat.vscode-community-server-connector) (for Apache Felix, Karaf, Tomcat, Jetty, etc.)

   63  
   64: Thanks to the great Java community around VS Code, the list doesn't end there. You can search for more Java extensions easily within VS Code:
   65  
   66  1. Go to the **Extensions** view (`kb(workbench.view.extensions)`).
   67: 2. Filter the extensions list by typing "java".
   68  
   69: This document describes some of the key features included in those Java extensions.
   70  
   71: >**Note**: To help get you started with Java development, you can use the [Java General profile template](/docs/editor/profiles.md#java-general-profile-template) to install useful extensions. You can learn more about profiles and how they let you quickly reconfigure your editor for different programming languages and workflows at [Profiles in VS Code](/docs/editor/profiles.md).
   72  

   76  
   77: ### Install a Java Development Kit (JDK)
   78  
   79: A Java Development Kit (JDK) is a software development environment used for developing Java applications. In order to run Java within Visual Studio Code, you need to install a JDK. The [Extension Pack for Java](https://marketplace.visualstudio.com/items?itemName=vscjava.vscode-java-pack) supports Java version 1.5 or above.
   80  

   85  * [Eclipse Adoptium's Temurin](https://adoptium.net/)
   86: * [IBM Semeru Runtimes](https://developer.ibm.com/languages/java/semeru-runtimes)
   87  * [Microsoft Build of OpenJDK](https://www.microsoft.com/openjdk)
   88: * [Oracle Java SE](https://www.oracle.com/java/technologies/javase-downloads.html)
   89  * [Red Hat build of OpenJDK](https://developers.redhat.com/products/openjdk/download)

   91  
   92: > **Note**: If you have multiple JDKs installed and need to use a specific JDK version for your projects, see [Configure Runtime for Projects](/docs/java/java-project.md#configure-runtime-for-projects). To enable Java preview features, see [How can I use VS Code with new Java versions](/docs/java/java-faq.md#how-can-i-use-visual-studio-code-with-new-java-versions).
   93  
   94: For developers new to Java or new to VS Code, we do provide some tips in our extensions. Once you've installed the [Extension Pack for Java](https://marketplace.visualstudio.com/items?itemName=vscjava.vscode-java-pack), you can see the tips using the **Java: Tips for Beginners** command from the Command Palette in VS Code.
   95  
   96: Open the Command Palette (`kb(workbench.action.showCommands)`) and type "java tips" to select the command.
   97  
   98: ![Java Getting Started](images/java/beginner-tips.png)
   99  
  100: ## Working with Java source files
  101  
  102: You can use VS Code to read, write, run, and debug Java source file(s) without creating a project. VS Code for Java supports two modes, lightweight and standard. Lightweight mode is ideal for scenarios that only deal with source file(s). If you want to work with a full-scale project, standard mode will be required. You can easily switch from lightweight mode to standard mode, when needed. To learn more, see [Lightweight Mode](/docs/java/java-project.md#lightweight-mode).
  103  
  104: ## Working with Java projects
  105  
  106: There are three things you must understand to work with Java in VS Code:
  107  
  108  1. How does VS Code handle Workspaces?
  109: 2. How does VS Code handle Java?
  110: 3. How does VS Code handle Workspaces that contain Java?
  111  

  119  
  120: ### Java projects in VS Code
  121  
  122: In contrast to IDEs such as IntelliJ IDEA, NetBeans, or Eclipse, the concept of a "Java project" is provided entirely by extensions, and is not a core concept in the base VS Code. When working with "Java projects" in VS Code, you must have the necessary extensions installed to work with those project files.
  123  
  124: For example, Maven, Eclipse, and Gradle Java projects are supported through [Language Support for Java™ by Red Hat](https://marketplace.visualstudio.com/items?itemName=redhat.java), by utilizing [M2Eclipse](https://www.eclipse.org/m2e/), which provides Maven support, and [Buildship](https://github.com/eclipse/buildship), which provides Gradle support through the [Eclipse JDT Language Server](https://github.com/eclipse/eclipse.jdt.ls).
  125  
  126: With [Maven for Java](https://marketplace.visualstudio.com/items?itemName=vscjava.vscode-maven), you can generate projects from [Maven Archetypes](https://maven.apache.org/guides/introduction/introduction-to-archetypes.html), browse through all the Maven projects within your workspace, and execute Maven goals easily from an embedded explorer. Projects can also be created and managed with the [Project Manager for Java](https://marketplace.visualstudio.com/items?itemName=vscjava.vscode-java-dependency) extension.
  127  
  128: <video autoplay loop muted playsinline controls title="Using the Java Projects view from the Project Manager for Java extension">
  129:   <source src="/docs/languages/java/package-viewer.mp4" type="video/mp4">
  130  </video>
  131  
  132: Visual Studio Code also supports working with standalone Java files outside of a Java project, described in the [Getting Started with Java](/docs/java/java-tutorial.md) tutorial.
  133  
  134: ### VS Code Workspaces that contain Java projects
  135  
  136: Assuming the necessary Java extensions are installed, opening a VS Code workspace that contains Java artifacts will cause those extensions to understand those artifacts and present options for working with them.
  137  
  138: More details about Java project support can be found in [Java Project Management in Visual Studio Code](/docs/java/java-project.md) and [Java Build Tools](/docs/java/java-build.md).
  139  

  143  
  144: Java in Visual Studio Code also supports source code navigation features such as search for symbol, Peek Definition, and Go to Definition. The [Spring Boot Tools](https://marketplace.visualstudio.com/items?itemName=vmware.vscode-spring-boot) extension provides enhanced navigation and code completion support for [Spring Boot](https://projects.spring.io/spring-boot/) projects.
  145  
  146: One of the key advantages of VS Code is speed. When you open your Java source file or folder, within a few seconds, with the help of [Lightweight Mode](/docs/java/java-project.md#lightweight-mode), you will be able to navigate your code base with the Outline view, as well as commands such as **Go to Definition** and **Go to Reference**. This is especially useful when you open a project for the first time.
  147  

  149  
  150: [IntelliSense](/docs/editor/intellisense.md) is a general term for language features, including intelligent code completion (in-context method and variable suggestions) across all your files and for both built-in and third-party modules. VS Code supports code completion and IntelliSense for Java through [Language Support for Java™ by Red Hat](https://marketplace.visualstudio.com/items?itemName=redhat.java). It also provides AI-assisted IntelliSense called [IntelliCode](https://visualstudio.microsoft.com/services/intellicode/) by putting what you're most likely to use at the top of your completion list.
  151  
  152: <video autoplay loop muted playsinline controls title="Java inline code completions and hovers">
  153:   <source src="/docs/languages/java/intellisense.mp4" type="video/mp4">
  154  </video>

  159  
  160: [![GitHub Copilot extension in the VS Code Marketplace](images/java/copilot-extension.png)](https://marketplace.visualstudio.com/items?itemName=GitHub.copilot)
  161  
  162: GitHub Copilot provides suggestions for numerous languages and a wide variety of frameworks, and it works especially well for Python, JavaScript, TypeScript, Ruby, Go, C# and C++.
  163  

  167  
  168: Visual Studio Code supports a wide range of popular Java code snippets to make you more productive, such as class/interface, syserr, sysout, if/else, try/catch, static main method. Using information from Java language server, it also provides a preview of the code snippet during the selection.
  169  

  172  
  173: We support a wide range of code snippet shortcuts and postfix completion features. To see the complete list, see [Code Snippets](/docs/java/java-editing.md#code-snippets). VS Code also supports a range of [Refactoring](/docs/java/java-refactoring.md) and [Linting](/docs/java/java-linting.md) features.
  174  
  175: ![Code Snippet](images/java/code-snippet.png)
  176  

  178  
  179: [Debugger for Java](https://marketplace.visualstudio.com/items?itemName=vscjava.vscode-java-debug) is a lightweight Java Debugger based on [Java Debug Server](https://github.com/microsoft/java-debug). It works with [Language Support for Java™ by Red Hat](https://marketplace.visualstudio.com/items?itemName=redhat.java) to allow users to debug Java code within Visual Studio Code.
  180  

  183  <video autoplay loop muted playsinline controls title="Setting a breakpoint, launching the debugging, and using Hot Code Replace">
  184:   <source src="/docs/languages/java/resolve-main.mp4" type="video/mp4">
  185  </video>
  186  
  187: Although it's lightweight, the Java debugger supports advanced features such as expression evaluation, conditional breakpoints, and [Hot Code Replace](/docs/java/java-debugging.md#hot-code-replace). For more debugging-related information, visit [Java Debugging](/docs/java/java-debugging.md).
  188  

  190  
  191: With the support from the [Test Runner for Java](https://marketplace.visualstudio.com/items?itemName=vscjava.vscode-java-test) extension, you can easily run, debug, and manage your JUnit and TestNG test cases.
  192  
  193  <video autoplay loop muted playsinline controls title="Running tests and investigating a failed test">
  194:   <source src="/docs/languages/java/testng.mp4" type="video/mp4">
  195  </video>
  196  
  197: For more about testing, read [Testing Java](/docs/java/java-testing.md).
  198  

  200  
  201: To further improve your Java productivity in VS Code, there are extensions for most popular frameworks and tools, such as [Spring Boot](https://projects.spring.io/spring-boot/), [Tomcat](https://tomcat.apache.org/), and [Jetty](https://www.eclipse.org/jetty/), created by the community.
  202  
  203: See [Application Servers](/docs/java/java-tomcat-jetty.md) to learn more about support for Tomcat and Jetty, as well as other application servers with VS Code.
  204  
  205: [Spring Boot](https://projects.spring.io/spring-boot/) support is provided by [VMware](https://marketplace.visualstudio.com/search?term=publisher%3A%22VMware%22&target=VSCode&category=All%20categories&sortBy=Relevance). There are also the [Spring Initializr Java Support](https://marketplace.visualstudio.com/items?itemName=vscjava.vscode-spring-initializr) and [Spring Boot Dashboard](https://marketplace.visualstudio.com/items?itemName=vscjava.vscode-spring-boot-dashboard) extensions provided by Microsoft, to further improve your experience with Spring Boot in Visual Studio Code.
  206  
  207: See [Spring Boot with VS Code](/docs/java/java-spring-boot.md) to learn more about Spring Boot support in VS Code, and also [Deploy to Azure Web Apps](/docs/java/java-webapp.md) or [Deploy to Azure Spring Apps](/docs/java/java-spring-apps.md) to learn more about deploying Spring apps to Azure from VS Code.
  208  

  210  
  211: Learn more about Java in VS Code:
  212  
  213: * [Getting Started with Java](/docs/java/java-tutorial.md)
  214: * [Code Editing and Navigation](/docs/java/java-editing.md)
  215: * [Java Debugging](/docs/java/java-debugging.md)
  216: * [Java Testing](/docs/java/java-testing.md)
  217: * [Java Project Management](/docs/java/java-project.md)
  218: * [Spring Boot with VS Code](/docs/java/java-spring-boot.md)
  219: * [Application Servers](/docs/java/java-tomcat-jetty.md)
  220: * [Azure with VS Code](/docs/java/java-on-azure.md)
  221  

docs/languages/javascript.md:
    3  Area: languages
    4: TOCTitle: JavaScript
    5  ContentId: F54BB3D4-76FB-4547-A9D0-F725CEBB905C
    6: PageTitle: JavaScript Programming with Visual Studio Code
    7  DateApproved: 05/02/2024
    8: MetaDescription: Get the best out of Visual Studio Code for JavaScript development
    9  ---
   10  
   11: # JavaScript in Visual Studio Code
   12  
   13: Visual Studio Code includes built-in JavaScript IntelliSense, debugging, formatting, code navigation, refactorings, and many other advanced language features.
   14  
   15: ![Working with JavaScript in Visual Studio Code](images/javascript/overview.png)
   16  
   17: Most of these features just work out of the box, while some may require basic configuration to get the best experience. This page summarizes the JavaScript features that VS Code ships with. Extensions from the [VS Code Marketplace](https://marketplace.visualstudio.com) can augment or change most of these built-in features. For a more in-depth guide on how these features work and can be configured, see [Working with JavaScript](/docs/nodejs/working-with-javascript.md).
   18  

   22  
   23: <video src="images/javascript/intellisense.mp4" placeholder="images/javascript/intellisense-placeholder.png" autoplay loop controls muted>
   24      Sorry, your browser doesn't support HTML 5 video.

   26  
   27: VS Code provides IntelliSense within your JavaScript projects; for many npm libraries such as `React`, `lodash`, and `express`; and for other platforms such as `node`, serverless, or IoT.
   28  
   29: See [Working with JavaScript](/docs/nodejs/working-with-javascript.md) for information about VS Code's JavaScript IntelliSense, how to configure it, and help troubleshooting common IntelliSense problems.
   30  
   31: ## JavaScript projects (jsconfig.json)
   32  
   33: A [jsconfig.json](/docs/languages/jsconfig.md) file defines a JavaScript project in VS Code. While `jsconfig.json` files are not required, you will want to create one in cases such as:
   34  
   35: * If not all JavaScript files in your workspace should be considered part of a single JavaScript project. `jsconfig.json` files let you exclude some files from showing up in IntelliSense.
   36: * To ensure that a subset of JavaScript files in your workspace is treated as a single project. This is useful if you are working with legacy code that uses implicit globals dependencies instead of `imports` for dependencies.
   37: * If your workspace contains more than one project context, such as front-end and back-end JavaScript code. For multi-project workspaces, create a `jsconfig.json` at the root folder of each project.
   38: * You are using the TypeScript compiler to down-level compile JavaScript source code.
   39  
   40: To define a basic JavaScript project, add a `jsconfig.json` at the root of your workspace:
   41  

   53  
   54: See [Working with JavaScript](/docs/nodejs/working-with-javascript.md) for more advanced `jsconfig.json` configuration.
   55  
   56: > **Tip:** To check if a JavaScript file is part of JavaScript project, just open the file in VS Code  and run the **JavaScript: Go to Project Configuration** command. This command opens the `jsconfig.json` that references the JavaScript file. A notification is shown if the file is not part of any `jsconfig.json` project.
   57  

   59  
   60: VS Code includes basic JavaScript [snippets](/docs/editor/userdefinedsnippets.md) that are suggested as you type;
   61  
   62: <video src="images/javascript/snippets.mp4" placeholder="images/javascript/snippets-placeholder.png" autoplay loop controls muted>
   63      Sorry, your browser doesn't support HTML 5 video.

   71  
   72: VS Code understands many standard [JSDoc](https://jsdoc.app) annotations, and uses these annotations to provide rich [IntelliSense](#intellisense). You can optionally even use the type information from JSDoc comments to [type check your JavaScript](#type-checking).
   73  
   74: <video src="images/javascript/jsdoc-autofill.mp4" placeholder="images/javascript/jsdoc-autofill-placeholder.png" autoplay loop controls muted>
   75      Sorry, your browser doesn't support HTML 5 video.

   79  
   80: <video src="images/javascript/jsdoc-autofill.mp4" placeholder="images/javascript/jsdoc-autofill-placeholder.png" autoplay loop controls muted>
   81      Sorry, your browser doesn't support HTML 5 video.

   83  
   84: To disable JSDoc comment suggestions, set `"javascript.suggest.completeJSDocs": false`.
   85  

   87  
   88: Hover over a JavaScript symbol to quickly see its type information and relevant documentation.
   89  
   90: ![Hovering over a JavaScript variable to see its type information](images/javascript/hover.png)
   91  

   95  
   96: As you write JavaScript function calls, VS Code shows information about the function signature and highlights the parameter that you are currently completing:
   97  
   98: ![Signature help for some DOM methods](images/javascript/signature-help.png)
   99  

  105  
  106: Just start typing to see [suggestions](#intellisense) for all available JavaScript symbols in your current project. Auto import suggestions show where they will be imported from:
  107  
  108: ![Global symbols are shown in the suggestion list](images/javascript/auto-import-before.png)
  109  

  113  
  114: ![After selecting a symbol from a different file, an import is added for it automatically](images/javascript/auto-import-after.png)
  115  
  116: To disable auto imports, set `"javascript.suggest.autoImports"` to `false`.
  117  
  118: > **Tip:** VS Code tries to infer the best import style to use. You can explicitly configure the preferred quote style and path style for imports added to your code with the `javascript.preferences.quoteStyle` and `javascript.preferences.importModuleSpecifier` settings.
  119  

  121  
  122: VS Code's built-in JavaScript formatter provides basic code formatting with reasonable defaults.
  123  
  124: The `javascript.format.*` [settings](/docs/getstarted/settings.md) configure the built-in formatter. Or, if the built-in formatter is getting in the way, set `"javascript.format.enable"` to `false` to disable it.
  125  
  126: For more specialized code formatting styles, try installing one of the JavaScript formatting extensions from the [Marketplace](https://marketplace.visualstudio.com/vscode).
  127  

  129  
  130: All of VS Code's JavaScript features also work with [JSX](https://reactjs.org/docs/introducing-jsx.html):
  131  
  132: ![JSX IntelliSense](images/javascript/jsx.png)
  133  

  137  
  138: <video src="images/javascript/tag-complete.mp4" placeholder="images/javascript/tag-complete-placeholder.png" autoplay loop controls muted>
  139      Sorry, your browser doesn't support HTML 5 video.

  141  
  142: Set `"javascript.autoClosingTags"` to `false` to disable JSX tag closing.
  143  

  145  
  146: Code navigation lets you quickly navigate JavaScript projects.
  147  

  159  
  160: Press `kb(editor.action.rename)` to rename the symbol under the cursor across your JavaScript project:
  161  
  162: ![Renaming a variable](images/javascript/rename.png)
  163  

  165  
  166: VS Code includes some handy refactorings for JavaScript such as **Extract function** and **Extract constant**. Just select the source code you'd like to extract and then click on the lightbulb in the gutter or press (`kb(editor.action.quickFix)`) to see available refactorings.
  167  
  168: ![JavaScript refactoring](images/javascript/refactorings.png)
  169  

  184  
  185: Unused JavaScript code, such the else block of an `if` statement that is always true or an unreferenced import, is faded out in the editor:
  186  
  187: ![Unreachable source code faded out](images/javascript/unreachable.png)
  188  

  190  
  191: To disable fading out of unused code, set `"editor.showUnused"` to `false`. You can also disable fading of unused code only in JavaScript by setting:
  192  
  193  ```json
  194: "[javascript]": {
  195      "editor.showUnused":  false
  196  },
  197: "[javascriptreact]": {
  198      "editor.showUnused":  false

  203  
  204: The **Organize Imports** Source Action sorts the imports in a JavaScript file and removes any unused imports:
  205  
  206  <!-- TODO: replace with js specific example -->
  207: <video src="images/javascript/organize-imports.mp4" placeholder="images/javascript/organize-imports-placeholder.png" autoplay loop controls muted>
  208      Sorry, your browser doesn't support HTML 5 video.

  212  
  213: Organize imports can also be done automatically when you save a JavaScript file by setting:
  214  

  246  
  247: See [Node.js/JavaScript](/docs/nodejs/working-with-javascript) for more information.
  248  

  252  
  253: <video src="images/javascript/code-suggestions-convert-async.mp4" placeholder="images/javascript/code-suggestions-convert-async-placeholder.png" autoplay loop controls muted>
  254      Sorry, your browser doesn't support HTML 5 video.

  256  
  257: Set `"javascript.suggestionActions.enabled"` to `false` to disable suggestions.
  258  

  262  
  263: [![GitHub Copilot extension in the VS Code Marketplace](images/javascript/copilot-extension.png)](https://marketplace.visualstudio.com/items?itemName=GitHub.copilot)
  264  
  265: GitHub Copilot provides suggestions for numerous languages and a wide variety of frameworks, and it works especially well for Python, JavaScript, TypeScript, Ruby, Go, C# and C++.
  266  

  268  
  269: Once you have the Copilot extension installed and enabled, you can test it our for your JavaScript projects.
  270  

  272  
  273: In the JavaScript file, type the following function header:
  274  

  280  
  281: ![Copilot JavaScript ghost text suggestion](images/javascript/js-suggest.png)
  282  

  288  
  289: ![Parameter name inlay hints](images/javascript/inlay-parameters.png)
  290  

  292  
  293: To enable parameter name hints, set `javascript.inlayHints.parameterNames`. There are three possible values:
  294  

  300  
  301: Setting: `javascript.inlayHints.variableTypes.enabled`
  302  
  303: ![Variable type inlay hints](images/javascript/inlay-var-types.png)
  304  

  306  
  307: Setting: `javascript.inlayHints.propertyDeclarationTypes.enabled`
  308  
  309: ![Property type inlay hints](images/javascript/inlay-property-types.png)
  310  

  312  
  313: Setting: `javascript.inlayHints.parameterTypes.enabled`
  314  
  315: ![Parameter type inlay hints](images/javascript/inlay-parameter-types.png)
  316  

  318  
  319: Setting: `javascript.inlayHints.functionLikeReturnTypes.enabled`
  320  
  321: ![Return type inlay hints](images/javascript/inlay-return-type.png)
  322  

  324  
  325: The JavaScript references CodeLens displays an inline count of reference for classes, methods, properties, and exported objects:
  326  
  327: ![JavaScript references CodeLens](images/javascript/references-codelens.png)
  328  
  329: To enable the references CodeLens, set `"javascript.referencesCodeLens.enabled"` to `true`.
  330  

  332  
  333: ![JavaScript references CodeLens peek](images/javascript/references-codelens-peek.png)
  334  

  336  
  337: When you move or rename a file that is imported by other files in your JavaScript project, VS Code can automatically update all import paths that reference the moved file:
  338  
  339: <video src="images/javascript/update-imports.mp4" placeholder="images/javascript/update-imports-placeholder.png" autoplay loop controls muted>
  340      Sorry, your browser doesn't support HTML 5 video.

  342  
  343: The `javascript.updateImportsOnFileMove.enabled` setting controls this behavior. Valid settings values are:
  344  

  350  
  351: [Linters](https://en.wikipedia.org/wiki/Lint_%28software%29) provides warnings for suspicious looking code. While VS Code does not include a built-in JavaScript linter, many JavaScript linter [extensions](/docs/editor/extension-marketplace.md) available in the marketplace.
  352  
  353: <div class="marketplace-extensions-javascript-linters-curated"></div>
  354  

  358  
  359: You can leverage some of TypeScript's advanced type checking and error reporting functionality in regular JavaScript files too. This is a great way to catch common programming mistakes. These type checks also enable some exciting Quick Fixes for JavaScript, including **Add missing import** and **Add missing property**.
  360  
  361: ![Using type checking and Quick Fixes in a JavaScript file](images/javascript/checkjs-example.gif)
  362  
  363: TypeScript tried to infer types in `.js` files the same way it does in `.ts` files. When types cannot be inferred, they can be specified explicitly with JSDoc comments. You can read more about how TypeScript uses JSDoc for JavaScript type checking in [Working with JavaScript](/docs/nodejs/working-with-javascript.md).
  364  
  365: Type checking of JavaScript is optional and opt-in. Existing JavaScript validation tools such as ESLint can be used alongside built-in type checking functionality.
  366  

  368  
  369: VS Code comes with great debugging support for JavaScript. Set breakpoints, inspect objects, navigate the call stack, and execute code in the Debug Console. See the [Debugging topic](/docs/editor/debugging.md) to learn more.
  370  

  378  
  379: ![debug data inspection](images/javascript/debug_data_inspection.gif)
  380  

  382  
  383: VS Code ships with excellent support for JavaScript but you can additionally install debuggers, snippets, linters, and other JavaScript tools through [extensions](/docs/editor/extension-marketplace.md).
  384  
  385: <div class="marketplace-extensions-javascript-curated"></div>
  386  

  392  
  393: * [Working with JavaScript](/docs/nodejs/working-with-javascript.md) - More detailed information about VS Code's JavaScript support and how to troubleshoot common issues.
  394  * [jsconfig.json](/docs/languages/jsconfig.md) - Detailed description of the `jsconfig.json` project file.

  397  * [Node.js](/docs/nodejs/nodejs-tutorial.md) - A walkthrough to create an Express Node.js application.
  398: * [TypeScript](/docs/languages/typescript.md) - VS Code has great support for TypeScript, which brings structure and strong typing to your JavaScript code.
  399  

  434  
  435: ### Can I debug minified/uglified JavaScript?
  436  
  437: Yes, you can. You can see this working using JavaScript source maps in the [Node.js Debugging](/docs/nodejs/nodejs-debugging.md) topic.
  438  

  440  
  441: Some users want to use syntax constructs like the proposed pipeline (`|>`) operator. However, these are currently not supported by VS Code's JavaScript language service and are flagged as errors. For users who still want to use these future features, we provide the `javascript.validate.enable` [setting](/docs/getstarted/settings.md).
  442  
  443: With `javascript.validate.enable: false`, you disable all built-in syntax checking. If you do this, we recommend that you use a linter like [ESLint](https://eslint.org) to validate your source code.
  444  
  445: ### Can I use other JavaScript tools like Flow?
  446  
  447: Yes, but some of [Flow's](https://flow.org) language features such as type and error checking may interfere with VS Code's built-in JavaScript support. To learn how to disable VS Code's built-in JavaScript support, see [Disable JavaScript support](/docs/nodejs/working-with-javascript.md#disable-javascript-support).

docs/languages/jsconfig.md:
   13  
   14: The presence of `jsconfig.json` file in a directory indicates that the directory is the root of a JavaScript Project. The `jsconfig.json` file specifies the root files and the options for the features provided by the [JavaScript language service](https://github.com/microsoft/TypeScript/wiki/JavaScript-Language-Service-in-Visual-Studio).
   15  
   16: > **Tip:** If you are not using JavaScript, you do not need to worry about `jsconfig.json`.
   17  

   21  
   22: Visual Studio Code's JavaScript support can run in two different modes:
   23  
   24: * **File Scope - no jsconfig.json**: In this mode, JavaScript files opened in Visual Studio Code are treated as independent units. As long as a file `a.js` doesn't reference a file `b.ts` explicitly (either using `import` or **CommonJS** [modules](https://wiki.commonjs.org/wiki/Modules/1.0)), there is no common project context between the two files.
   25  
   26: * **Explicit Project - with jsconfig.json**: A JavaScript project is defined via a `jsconfig.json` file. The presence of such a file in a directory indicates that the directory is the root of a JavaScript project. The file itself can optionally list the files belonging to the project, the files to be excluded from the project, as well as compiler options (see below).
   27  
   28: The JavaScript experience is improved when you have a `jsconfig.json` file in your workspace that defines the project context. For this reason, we offer a hint to create a `jsconfig.json` file when you open a JavaScript file in a fresh workspace.
   29  

   31  
   32: We define this part of our code, the client side of our website, as a JavaScript project by creating a `jsconfig.json` file. Place the file at the root of your JavaScript code as shown below.
   33  
   34: ![jsconfig setup](images/javascript/jsconfig_setup.png)
   35  
   36: In more complex projects, you may have more than one `jsconfig.json` file defined inside a workspace. You will want to do this so that the code in one project is not suggested as IntelliSense to code in another project. Illustrated below is a project with a `client` and `server` folder, showing two separate JavaScript projects.
   37  
   38: ![multiple jsconfigs](images/javascript/complex_jsconfig_setup.png)
   39  

   41  
   42: By default the JavaScript language service will analyze and provide IntelliSense for all files in your JavaScript project. You will want to specify which files to exclude or include in order to provide the proper IntelliSense.
   43  

   81  
   82: Below are `jsconfig` `"compilerOptions"` to configure the JavaScript language support.
   83  
   84: > **Tip:** Do not be confused by `compilerOptions`, since no actual compilation is required for JavaScript. This attribute exists because `jsconfig.json` is a descendant of `tsconfig.json`, which is used for compiling TypeScript.
   85  

   91  `moduleResolution` | Specifies how modules are resolved for imports. The values are "Node", "Classic", "Node16", "NodeNext", "Bundler".
   92: `checkJs` | Enable type checking on JavaScript files.
   93  `experimentalDecorators`|Enables experimental support for proposed ES decorators.

  124  
  125: Whenever possible, you should exclude folders with JavaScript files that are not part of the source code for your project.
  126  

  138  
  139: When your JavaScript project is growing too large and performance slows, it is often because of library folders like `node_modules`. If VS Code detects that your project is growing too large, it will prompt you to edit the `exclude` list.

docs/languages/json.md:
  49  
  50: In addition to the default JSON mode following the [JSON specification](https://www.json.org/), VS Code also has a **JSON with Comments** (jsonc) mode. This mode is used for the VS Code configuration files such as `settings.json`, `tasks.json`, or `launch.json`. When in the **JSON with Comments** mode, you can use single line (`//`) as well as block comments (`/* */`) as used in JavaScript. The mode also accepts trailing commas, but they are discouraged and the editor will display a warning.
  51  

docs/languages/overview.md:
  13  
  14: In Visual Studio Code, we have support for almost every major programming language. Several ship in the box, for example, JavaScript, TypeScript, CSS, and HTML but more rich language extensions can be found in the [VS Code Marketplace](https://marketplace.visualstudio.com/vscode/Languages).
  15  

  25  
  26: Learn about programming languages supported by VS Code. These include: [C++](/docs/languages/cpp.md) - [C&#35;](/docs/languages/csharp.md) - [CSS](/docs/languages/css.md) - [Dart](https://dart.dev/tools/vs-code) - [Dockerfile](/docs/azure/docker.md) - [F&#35;](/docs/languages/dotnet.md#create-an-f-hello-world-app) - [Go](/docs/languages/go.md) - [HTML](/docs/languages/html.md) - [Java](/docs/languages/java.md) - [JavaScript](/docs/languages/javascript.md) - [JSON](/docs/languages/json.md) - [Julia](/docs/languages/julia.md) - [Less](/docs/languages/css.md) -
  27  [Markdown](/docs/languages/markdown.md) - [PHP](/docs/languages/php.md) - [PowerShell](/docs/languages/powershell.md) - [Python](/docs/languages/python.md) - [R](/docs/languages/r.md) - [Ruby](/docs/languages/ruby.md) - [Rust](/docs/languages/rust.md) - [SCSS](/docs/languages/css.md) - [T-SQL](/docs/languages/tsql.md) - [TypeScript](/docs/languages/typescript.md).

docs/languages/polyglot.md:
  30  - PowerShell
  31: - JavaScript
  32  - HTML

  95  
  96: <video src="images/polyglot/SQLJavaScript.mp4" placeholder="images/polyglot/SQLJavaScript.mp4" autoplay loop controls muted title="Video showing user sharing variables between SQL and JavaScript">
  97      Sorry, your browser doesn't support HTML 5 video.

docs/languages/python.md:
  63  
  64: GitHub Copilot provides suggestions for languages beyond Python and a wide variety of frameworks, including JavaScript, TypeScript, Ruby, Go, C# and C++.
  65  

docs/languages/typescript.md:
   13  
   14: [TypeScript](https://www.typescriptlang.org) is a typed superset of JavaScript that compiles to plain JavaScript. It offers classes, modules, and interfaces to help you build robust components.
   15  

   19  
   20: Visual Studio Code includes TypeScript language support but does not include the TypeScript compiler, `tsc`. You will need to install the TypeScript compiler either globally or in your workspace to transpile TypeScript source code to JavaScript (`tsc HelloWorld.ts`).
   21  

   56  
   57: To compile your TypeScript code, you can open the [Integrated Terminal](/docs/terminal/basics.md) (`kb(workbench.action.terminal.toggleTerminal)`) and type `tsc helloworld.ts`. This will compile and create a new `helloworld.js` JavaScript file.
   58  

   66  
   67: ```javascript
   68  var message = "Hello World";

  168  
  169: ![debug data inspection](images/javascript/debug_data_inspection.gif)
  170  

  191  * [Refactoring TypeScript](/docs/typescript/typescript-refactoring.md) - Useful refactorings from the TypeScript language service.
  192: * [Compiling TypeScript](/docs/typescript/typescript-compiling.md) - Compile TypeScript to a JavaScript target version.
  193  * [Debugging TypeScript](/docs/typescript/typescript-debugging.md) - Learn about debugging TypeScript both server and client-side with VS Code.

  202  
  203: The simplest way to try out the latest TypeScript features in VS Code is to install the [JavaScript and TypeScript Nightly extension](https://marketplace.visualstudio.com/items?itemName=ms-vscode.vscode-typescript-next).
  204  

docs/nodejs/angular-tutorial.md:
   20  
   21: We'll be using the [Angular CLI](https://cli.angular.io/) for this tutorial. To install and use the command line interface as well as run the Angular application server, you'll need the [Node.js](https://nodejs.org/) JavaScript runtime and [npm](https://www.npmjs.com/) (the Node.js package manager) installed. npm is included with Node.js which you can install from [Node.js downloads](https://nodejs.org/en/download/).
   22  

   74  
   75: VS Code uses the TypeScript language service for code intelligence ([IntelliSense](/docs/editor/intellisense.md)) and it has a feature called [Automatic Type Acquisition](/docs/nodejs/working-with-javascript.md#typings-and-automatic-type-acquisition) (ATA). ATA pulls down the npm Type Declaration files (`*.d.ts`) for the npm modules referenced in the `package.json`.
   76  

  109  
  110: To debug the client side Angular code, we'll use the built-in JavaScript debugger.
  111  

  174  
  175: [React](https://reactjs.org) is a library for building user interfaces and it is more minimal than angular. If you'd like to see an example of React working with VS Code, check out the [Using React in VS Code](/docs/nodejs/reactjs-tutorial.md) tutorial. It will walk you through creating an React application and configuring the `launch.json` file for the JavaScript debugger.
  176  

docs/nodejs/browser-debugging.md:
   15  * Use the [Open Link](#open-link-command) command to debug a URL.
   16: * Clicking a link in the [JavaScript debug terminal](/docs/nodejs/nodejs-debugging.md#javascript-debug-terminal).
   17  * Use a [launch config](#launch-configuration) to launch a browser with your app.

  107  * `webRoot` - The root directory for your source code. Most often, and by default, the `webRoot` is your workspace folder. This option is used for sourcemap resolution.
  108: * `outFiles` - An array of [glob patterns](/docs/editor/glob-patterns.md) for locating generated JavaScript files. See the section on [Source maps](#source-maps).
  109  * `smartStep`- Try to automatically step over source code that doesn't map to source files. See the section on [Smart stepping](/docs/nodejs/nodejs-debugging.md#smart-stepping).

  130  
  131: The JavaScript debugger in VS Code supports source maps that allow debugging transformed code. For example, TypeScript code is compiled to JavaScript, and many web applications bundle all their JavaScript files together. The source map helps the debugger figure out how to map between your original code, and the code running in the browser.
  132  

  136  
  137: Each JavaScript file may reference a source map, by a URL or relative path. When dealing with web applications, you'll want to make sure that the URL is something the debugger running in VS Code can access. If it can't, you'll see errors in the **Debug Console** explaining which source maps failed to load, and why.
  138  

docs/nodejs/debugging-recipes.md:
   5  ContentId: 215832f9-d5bd-4cea-8cea-bfc4dc7ff7d1
   6: PageTitle: JavaScript Debugging Recipes for Visual Studio Code
   7  DateApproved: 05/02/2024

  10  ---
  11: # JavaScript Debugging Recipes
  12  

  16  
  17: ## Debug server-side JavaScript in Node.js
  18  

  27  
  28: ## Debug client-side JavaScript in Browsers
  29  
  30: The Visual Studio Code editor supports debugging of JavaScript running in [Microsoft Edge](https://www.microsoft.com/edge) and [Google Chrome](https://www.google.com/chrome/).
  31  
  32: ![JavaScript, Edge, and Chrome logo](images/recipes/browsers.png)
  33  

  47  * [Live edit and debug your React apps directly from VS Code](https://medium.com/@auchenberg/live-edit-and-debug-your-react-apps-directly-from-vs-code-without-leaving-the-editor-3da489ed905f)
  48: * [Super-charged live editing and JavaScript debugging for Angular using VS Code](https://medium.com/@auchenberg/super-charged-live-editing-and-javascript-debugging-for-angular-using-visual-studio-code-c29da251ec71)
  49  

  51  
  52: The Visual Studio Code editor supports debugging [Electron](https://www.electronjs.org) applications via the built-in JavaScript debugger.
  53  

docs/nodejs/extensions.md:
   5  ContentId: 3224f624-a3fc-4eeb-81d1-eb653a90a6fc
   6: PageTitle: JavaScript Extensions in Visual Studio Code
   7  DateApproved: 05/02/2024
   8: MetaDescription: Learn more about installing and integrating JavaScript and Node.js extensions in the Visual Studio Code editor.
   9  ---
  10: # JavaScript extensions for VS Code
  11  
  12: Visual Studio Code supports many features for JavaScript and Node.js development. The features that ship with the downloaded product are the core features: debugging, IntelliSense, code navigation, etc.
  13  
  14: In addition, to these core features, you can install a large number of quality extensions to add features to VS Code for JavaScript development.
  15  

  19  
  20: You can find JavaScript extensions by typing `JavaScript` in the Extension view search bar. Alternatively, you can find JavaScript extensions using tags: "tag:javascript". Search for more extensions in VS Code or in the [Marketplace](https://marketplace.visualstudio.com/vscode).
  21  
  22: <div class="marketplace-extensions-javascript-curated"></div>
  23  

  41  
  42: Read more about setting up JavaScript linters in the VS Code [documentation](/docs/languages/javascript.md#linters).
  43  

  51  
  52: SonarLint helps you find and fix bugs and security issues as you code. The extension runs in the background and, just like a spell checker, highlights coding issues. SonarLint not only tells you what the issue is but also provides in-context guidance on why an issue is harmful and how to fix it, with related examples. The extension supports [200+ JS/TS rules](https://rules.sonarsource.com/javascript) and includes several [Quick Fixes](https://rules.sonarsource.com/javascript/quickfix) to automatically handle your coding issues.
  53  

  57  
  58: ### JavaScript (ES6) code snippets
  59  
  60: Marketplace - [JavaScript (ES6) code snippets](https://marketplace.visualstudio.com/items?itemName=xabikos.JavaScriptSnippets)
  61  

  63  
  64: VS Code comes with many built-in code snippets. The **JavaScript (ES6) code snippets** extension adds snippets for ES6 (ECMAScript 6) syntax. Here is a small sampling of the snippets provided by this extension. See the extension's [README](https://marketplace.visualstudio.com/items?itemName=xabikos.JavaScriptSnippets) to see the dozens of snippets this pack gives you.
  65  
  66: ![javascript snippets](images/extensions/javascript_snippets.png)
  67  
  68: You can read more about JavaScript snippets in the VS Code [documentation](/docs/languages/javascript.md#snippets). For additional snippet packs, including [Angular 1](https://marketplace.visualstudio.com/items?itemName=johnpapa.Angular1), [Angular 2](https://marketplace.visualstudio.com/items?itemName=johnpapa.Angular2), [Bootstrap 3](https://marketplace.visualstudio.com/items?itemName=wcwhitehead.bootstrap-3-snippets), [ReactJs](https://marketplace.visualstudio.com/items?itemName=xabikos.ReactSnippets), and [jQuery](https://marketplace.visualstudio.com/items?itemName=donjayamanne.jquerysnippets), check out the Marketplace's [Snippets category](https://marketplace.visualstudio.com/vscode/Snippets?sortBy=Installs).
  69  

docs/nodejs/nodejs-debugging.md:
   12  
   13: The Visual Studio Code editor has built-in debugging support for the [Node.js](https://nodejs.org/) runtime and can debug JavaScript, TypeScript, and many other languages that are transpiled into JavaScript. Setting up a project for Node.js debugging is straightforward with VS Code providing appropriate launch configuration defaults and snippets.
   14  

   17  * Use [auto attach](#auto-attach) to debug processes you run in VS Code's integrated terminal.
   18: * Use the [JavaScript debug terminal](#javascript-debug-terminal), similar to using the integrated terminal.
   19  * Use a [launch config](#launch-configuration) to start your program, or [attach to a process](#attaching-to-nodejs) launched outside of VS Code.

   24  
   25: There are three modes for auto attach, which you can select in the resulting Quick Pick and via the **debug.javascript.autoAttachFilter** setting:
   26  
   27: * `smart` - If you execute a script outside of your `node_modules` folder or use a common 'runner' script like mocha or ts-node, the process will be debugged. You can configure the 'runner' script allow list using the **Auto Attach Smart Pattern** setting (`debug.javascript.autoAttachSmartPattern`).
   28  * `always` - All Node.js processes launched in the Integrated Terminal will be debugged.

   40  
   41: You can apply [other properties normally found in launch.json](#launch-configuration-attributes) to auto attach in the **debug.javascript.terminalOptions** setting. For example, to add node internals to your skipFiles, you could add the following to your user or workspace settings:
   42  
   43  ```js
   44:   "debug.javascript.terminalOptions": {
   45      "skipFiles": [

   52  
   53: In `smart` Auto Attach mode, VS Code will try to attach to your code, and not attach to build tools you aren't interested in debugging. It does this by matching the main script against a list of [glob patterns](/docs/editor/glob-patterns.md). The glob patterns are configurable in the **debug.javascript.autoAttachSmartPattern** setting, which defaults to:
   54  

   72  
   73: ## JavaScript Debug Terminal
   74  
   75: In a similar way to [auto attach](#auto-attach), the JavaScript Debug Terminal will automatically debug any Node.js process you run in it. You can create a Debug Terminal by running the **Debug: Create JavaScript Debug Terminal** command from the Command Palette (`kbs(workbench.action.showCommands)`), or by selecting the **Create JavaScript Debug Terminal** from the terminal switcher dropdown.
   76  

   82  
   83: You can apply [other properties normally found in launch.json](#launch-configuration-attributes) to the debug terminal in the **debug.javascript.terminalOptions** setting. For example, to add node internals to your skipFiles, you could add the following to your user or workspace settings:
   84  
   85  ```js
   86: "debug.javascript.terminalOptions": {
   87    "skipFiles": [

  110  
  111: * `outFiles` - array of [glob patterns](/docs/editor/glob-patterns.md) for locating generated JavaScript files. See section [Source maps](/docs/nodejs/nodejs-debugging.md#source-maps).
  112  * `resolveSourceMapLocations` - an array of [glob patterns](/docs/editor/glob-patterns.md) for locations where source maps should be parsed. See section [Source maps](/docs/nodejs/nodejs-debugging.md#source-maps).

  158  * **Attach by Process ID**: Open the process picker to select a node or gulp process for debugging. With this launch configuration, you can even attach to a node or gulp process that was not started in debug mode.
  159: * **Nodemon Setup**: Use nodemon to relaunch a debug session automatically whenever the JavaScript source has changed. Make sure that you have nodemon installed globally. Note that terminating the debug session only terminates the program to debug, not nodemon itself. To terminate nodemon, press `kbstyle(Ctrl+C)` in the Integrated Terminal.
  160  * **Mocha Tests**: Debug mocha tests in a `test` folder of your project. Make sure that your project has 'mocha' installed in its `node_modules` folder.

  348  
  349: The JavaScript debugger of VS Code supports source maps that help debugging of transpiled languages, for example, TypeScript or minified/uglified JavaScript. With source maps, it's possible to single step through or set breakpoints in the original source. If no source map exists for the original source, or if the source map is broken and cannot successfully map between the source and the generated JavaScript, then breakpoints show up as unverified (gray hollow circles).
  350  

  397  
  398: Note that the `outFiles` should match your JavaScript files, not the source map files (which may end in `.map` instead of `.js`).
  399  

  418  
  419: The `smartStep` feature only applies to JavaScript code that was generated from source and therefore has a source map. For JavaScript without sources, the smart stepping option has no effect.
  420  
  421: ### JavaScript source map tips
  422  

  539  
  540: Sometimes you want to just log a message or value when code hits a certain location, rather than pausing. You can do this with logpoints. Logpoints don't pause, but rather log a message to the Debug Console when hit. In the JavaScript debugger, you can use curly braces to interpolate expressions into the message, like `current value is: {myVariable.property}`.
  541  

  570  
  571: For performance reasons, Node.js parses the functions inside JavaScript files lazily on first access. As a consequence, breakpoints don't work in source code areas that haven't been seen (parsed) by Node.js.
  572  

  637  
  638: The JavaScript debugger can debug code compiled into WebAssembly if it includes [DWARF](https://dwarfstd.org) debug information. Many toolchains support emitting this information:
  639  

  648  
  649: In the image below, the debugger is stopped on a breakpoint in C++ source code that creates a Mandelbrot fractal. The call stack is visible, with frames from the JavaScript code, to WebAssembly, to the mapped C++ code. You can also see the variables in the C++ code, and an edit to the memory associated with the int32 `height` variable.
  650  

  652  
  653: While close to parity, debugging WebAssembly is a little different than ordinary JavaScript:
  654  
  655  * Variables in the **Variables** view cannot be edited directly. However, you can select the **View Binary Data** action beside the variable to edit their associated memory.
  656: * Basic expression evaluation in the **Debug Console** and **Watch** views is provided by [lldb-eval](https://github.com/google/lldb-eval). This is different than ordinary JavaScript expressions.
  657  * Locations not mapped to source code will be shown in disassembled WebAssembly Text Format. For WebAssembly, the command **Disable Source Map Stepping** will cause the debugger to step only in disassembled code.

  663  
  664: The current VS Code JavaScript debugger supports Node version at or above 8.x, recent Chrome versions, and recent Edge versions (via the `msedge` launch type).
  665  

docs/nodejs/nodejs-deployment.md:
  21  --- | --- | ---
  22: [Deploy Azure Functions](https://learn.microsoft.com/azure/developer/javascript/tutorial/azure-function-cosmos-db-mongo-api) | Build and manage Azure Functions serverless apps <br> directly in VS Code | [Azure Resources](https://marketplace.visualstudio.com/items?itemName=ms-azuretools.vscode-azureresourcegroups) <br> [Azure Functions](https://marketplace.visualstudio.com/items?itemName=ms-azuretools.vscode-azurefunctions) <br> [Azure Databases](https://marketplace.visualstudio.com/items?itemName=ms-azuretools.vscode-cosmosdb)
  23  [Deploy using Azure Portal <br> and Azure App Service](https://learn.microsoft.com/azure/app-service/tutorial-nodejs-mongodb-app) | Manage Azure resources directly in VS Code <br> with Azure App Service | [MongoDB](https://www.mongodb.com/docs/manual/installation/) <br> [Azure Portal](https://portal.azure.com/)
  24: [Deploy using Docker](https://learn.microsoft.com/azure/developer/javascript/tutorial/tutorial-vscode-docker-node/tutorial-vscode-docker-node-01) | Deploy your website using a Docker container | [Docker](https://marketplace.visualstudio.com/items?itemName=ms-azuretools.vscode-docker) <br> [Azure CLI](https://learn.microsoft.com/cli/azure/install-azure-cli) <br> [Azure App Service](https://marketplace.visualstudio.com/items?itemName=ms-azuretools.vscode-azureappservice) <br> [Azure Resources](https://marketplace.visualstudio.com/items?itemName=ms-azuretools.vscode-azureresourcegroups)

docs/nodejs/nodejs-tutorial.md:
   12  
   13: [Node.js](https://nodejs.org/) is a platform for building fast and scalable server applications using JavaScript. Node.js is the runtime and [npm](https://www.npmjs.com/) is the Package Manager for Node.js modules.
   14  
   15: Visual Studio Code has support for the JavaScript and TypeScript languages out-of-the-box as well as Node.js debugging. However, to run a Node.js application, you will need to install the Node.js runtime on your machine.
   16  

   46  
   47: By using the `.js` file extension, VS Code interprets this file as JavaScript and will evaluate the contents with the JavaScript language service. Refer to the VS Code [JavaScript language](/docs/languages/javascript.md) topic to learn more about JavaScript support.
   48  

   50  
   51: ```javascript
   52  var msg = 'Hello World';

  164  
  165: VS Code uses TypeScript type declaration (typings) files (for example `node.d.ts`) to provide metadata to VS Code about the JavaScript based frameworks you are consuming in your application. Type declaration files are written in TypeScript so they can express the data types of parameters and functions, allowing VS Code to provide a rich IntelliSense experience. Thanks to a feature called `Automatic Type Acquisition`, you do not have to worry about downloading these type declaration files, VS Code will install them automatically for you.
  166  

docs/nodejs/profiling.md:
   5  ContentId: 3DAE803B-D479-4143-976F-B69F00A73891
   6: PageTitle: Performance Profiling JavaScript in Visual Studio Code
   7  DateApproved: 05/02/2024
   8: MetaDescription: Learn more about profiling your JavaScript performance in the Visual Studio Code editor.
   9  ---
  10: # Performance Profiling JavaScript
  11  
  12: Visual Studio Code supports collecting and viewing performance profiles for JavaScript programs. To get started, you'll first need to have the debugger configured for your [Node.js program](/docs/nodejs/nodejs-debugging.md) or [browser app](/docs/nodejs/browser-debugging.md).
  13  

  17  
  18: * **CPU Profile** - A CPU profile tells you where your program is spending its time while in JavaScript. Remember that, while you can wait on asynchronous promises or callbacks, only one JavaScript expression is executed at a time. The CPU profile collects about 10,000 samples per second to tell you which expression--if any--is being run at that moment.
  19  * **Heap Profile** - A heap profile tells you how memory is allocated over time in your program. Allocating memory can be costly, and reducing the amount of memory your code allocates can lead to performance wins.

  60  
  61: VS Code has an integrated visualizer that supports viewing JavaScript `.cpuprofile` and `.heapprofile` files. When you open one of these files, you will first be presented with a table view that looks something like this:
  62  

docs/nodejs/reactjs-tutorial.md:
    5  ContentId: 2dd2eeff-2eb3-4a0c-a59d-ea9a0b10c468
    6: PageTitle: React JavaScript Tutorial in Visual Studio Code
    7  DateApproved: 05/02/2024
    8: MetaDescription: React JavaScript tutorial showing IntelliSense, debugging, and code navigation support in the Visual Studio Code editor.
    9  ---

   11  
   12: [React](https://reactjs.org) is a popular JavaScript library developed by Facebook for building user interfaces. The Visual Studio Code editor supports React.js IntelliSense and code navigation out of the box.
   13  

   17  
   18: We'll be using the `create-react-app` [generator](https://reactjs.org/docs/create-a-new-react-app.html#create-react-app) for this tutorial. To use the generator as well as run the React application server, you'll need [Node.js](https://nodejs.org/) JavaScript runtime and [npm](https://www.npmjs.com/) (Node.js package manager) installed. npm is included with Node.js which you can download and install from [Node.js downloads](https://nodejs.org/en/download/).
   19  

   71  
   72: VS Code uses the TypeScript language service for its JavaScript code intelligence and it has a feature called [Automatic Type Acquisition](/docs/nodejs/working-with-javascript.md#typings-and-automatic-type-acquisition) (ATA). ATA pulls down the npm Type Declaration files (`*.d.ts`) for the npm modules referenced in the `package.json`.
   73  

  121  
  122: To debug the client side React code, we'll use the built-in JavaScript debugger.
  123  

  168  
  169: Linters analyze your source code and can warn you about potential problems before you run your application. The JavaScript language services included with VS Code has syntax error checking support by default, which you can see in action in the **Problems** panel (**View** > **Problems** `kb(workbench.actions.view.problems)`).
  170  

  172  
  173: ![JavaScript error](images/reactjs/js-error.png)
  174  
  175: Linters can provide more sophisticated analysis, enforcing coding conventions and detecting anti-patterns. A popular JavaScript linter is [ESLint](https://eslint.org/). ESLint, when combined with the ESLint VS Code [extension](https://marketplace.visualstudio.com/items/dbaeumer.vscode-eslint), provides a great in-product linting experience.
  176  

  255  
  256: [Angular](https://angular.io/) is another popular web framework. If you'd like to see an example of Angular working with VS Code, check out the [Debugging with Angular CLI](https://github.com/microsoft/vscode-recipes/tree/main/Angular-CLI) recipe. It will walk you through creating an Angular application and configuring the `launch.json` file for the JavaScript debugger.
  257  

docs/nodejs/vuejs-tutorial.md:
    5  ContentId: 85ce0bcc-d2b8-4b7c-b744-5eddce9a8d00
    6: PageTitle: Vue JavaScript Tutorial in Visual Studio Code
    7  DateApproved: 05/02/2024
    8: MetaDescription: Vue JavaScript tutorial showing IntelliSense, debugging, and code navigation support in the Visual Studio Code editor.
    9  ---

   11  
   12: [Vue.js](https://vuejs.org/) is a popular JavaScript library for building web application user interfaces and Visual Studio Code has built-in support for the Vue.js building blocks of [HTML](/docs/languages/html.md), [CSS](/docs/languages/css.md), and [JavaScript](/docs/languages/javascript.md). For a richer Vue.js development environment, you can install the [Volar](https://marketplace.visualstudio.com/items?itemName=Vue.volar) and [Volar for TypeScript](https://marketplace.visualstudio.com/items?itemName=Vue.vscode-typescript-vue-plugin) extensions that support Vue.js IntelliSense, code snippets, formatting, and more.
   13  

   25  
   26: To install and use Vite and Vue.js, you'll need the [Node.js](https://nodejs.org/) JavaScript runtime and [npm](https://www.npmjs.com/) (the Node.js package manager) installed. npm is included with Node.js, which you can install from [Node.js downloads](https://nodejs.org/en/download/).
   27  

   91  
   92: ![Vue.js JavaScript suggestions](images/vuejs/javascript-suggestions.png)
   93  

  141  
  142: You can debug client side Vue.js code with the built-in JavaScript debugger. Follow this [conversation](https://github.com/vitejs/vite/discussions/4065#discussioncomment-1359932) to use Vite/Vue.js 3 project with VS Code using Microsoft Edge.
  143  

docs/nodejs/working-with-javascript.md:
    3  Area: nodejs
    4: TOCTitle: Working with JavaScript
    5: PageTitle: Working with JavaScript in Visual Studio Code
    6  ContentId: 3e5af2a6-7669-4b5d-b19f-78077af14fda
    7  DateApproved: 05/02/2024
    8: MetaDescription: Working with JavaScript in Visual Studio Code
    9  ---
   10: # Working with JavaScript
   11  
   12: This topic describes some of the advanced JavaScript features supported by Visual Studio Code. Using the TypeScript language service, VS Code can provide smart completions (IntelliSense) as well as type checking for JavaScript.
   13  

   15  
   16: Visual Studio Code's JavaScript [IntelliSense](/docs/editor/intellisense.md) provides intelligent code completion, parameter info,  references search, and many other advanced language features. Our JavaScript IntelliSense is powered by the [JavaScript language service](https://github.com/microsoft/TypeScript/wiki/JavaScript-Language-Service-in-Visual-Studio) developed by the TypeScript team. While IntelliSense should just work for most JavaScript projects without any configuration, you can make IntelliSense even more useful with [JSDoc](/docs/languages/javascript.md#jsdoc-support) or by configuring a `jsconfig.json` project.
   17  
   18: For the details of how JavaScript IntelliSense works, including being based on type inference, JSDoc annotations, TypeScript declarations, and mixing JavaScript and TypeScript projects, see the [JavaScript language service documentation](https://github.com/microsoft/TypeScript/wiki/JavaScript-Language-Service-in-Visual-Studio).
   19  
   20: When type inference does not provide the desired information, type information may be provided explicitly with JSDoc annotations. This document describes the [JSDoc annotations](https://www.typescriptlang.org/docs/handbook/type-checking-javascript-files.html#supported-jsdoc) currently supported.
   21  
   22: In addition to objects, methods, and properties, the JavaScript IntelliSense window also provides basic word completion for the symbols in your file.
   23  

   25  
   26: IntelliSense for JavaScript libraries and frameworks is powered by TypeScript type declaration (typings) files. Type declaration files are written in TypeScript so they can express the data types of parameters and functions, allowing VS Code to provide a rich IntelliSense experience in a performant manner.
   27  

   31  
   32: ![lodash typings](images/working-with-javascript/lodash-typings.png)
   33  
   34: Type declaration files are automatically downloaded and managed by Visual Studio Code for packages listed in your project's `package.json` or that you import into a JavaScript file.
   35  

   43  
   44: You can alternately explicitly list packages to acquire type declaration files for in a [jsconfig.json](#javascript-projects-jsconfigjson).
   45  

   55  
   56: Most common JavaScript libraries ship with declaration files or have type declaration files available. You can search for a library's type declaration file package using the [TypeSearch](https://microsoft.github.io/TypeSearch) site.
   57  

   75  
   76: ## JavaScript projects (jsconfig.json)
   77  
   78: The presence of a [jsconfig.json](/docs/languages/jsconfig.md) file in a directory indicates that the directory is the root of a JavaScript project. `jsconfig.json` specifies the root files and the options for the language features provided by the [JavaScript language service](https://github.com/microsoft/TypeScript/wiki/JavaScript-Language-Service-in-Visual-Studio). For common setups, a `jsconfig.json` file is not required, however, there are situations when you will want to add a `jsconfig.json`.
   79  
   80: - Not all files should be in your JavaScript project (for example, you want to exclude some files from showing IntelliSense). This situation is common with front-end and back-end code.
   81  - Your workspace contains more than one project context. In this situation, you should add a `jsconfig.json` file at the root folder for each project.
   82: - You are using the TypeScript compiler to down-level compile JavaScript source code.
   83  

   85  
   86: To define our code as a JavaScript project, create `jsconfig.json` at the root of your JavaScript code as shown below. A JavaScript project is the source files of the project and should not include the derived or packaged files (such as a `dist` directory).
   87  
   88: ![jsconfig setup](images/working-with-javascript/jsconfig_setup.png)
   89  

   91  
   92: Illustrated below is a project with a `client` and `server` folder, showing two separate JavaScript projects:
   93  
   94: ![multiple jsconfigs](images/working-with-javascript/complex_jsconfig_setup.png)
   95  

   97  
   98: Below is a simple template for `jsconfig.json` file, which defines the JavaScript `target` to be `ES6` and the `exclude` attribute excludes the `node_modules` folder. You can copy and paste this code into your `jsconfig.json` file.
   99  

  136  
  137: It is possible to have mixed TypeScript and JavaScript projects. To start migrating to TypeScript, rename your `jsconfig.json` file to `tsconfig.json` and set the `allowJs` property to `true`. For more information, see [Migrating from JavaScript](https://www.typescriptlang.org/docs/handbook/migrating-from-javascript.html).
  138  

  140  
  141: ## Type checking JavaScript
  142  
  143: VS Code allows you to leverage some of TypeScript's advanced type checking and error reporting functionality in regular JavaScript files. This is a great way to catch common programming mistakes. These type checks also enable some exciting Quick Fixes for JavaScript, including **Add missing import** and **Add missing property**.
  144  
  145: ![Using type checking and Quick Fixes in a JavaScript file](images/working-with-javascript/checkjs-example.gif)
  146  
  147: TypeScript can infer types in `.js` files same as in `.ts` files. When types cannot be inferred, they can be specified using JSDoc comments. You can read more about how TypeScript uses JSDoc for JavaScript type checking in [Type Checking JavaScript Files](https://www.typescriptlang.org/docs/handbook/type-checking-javascript-files.html).
  148  
  149: Type checking of JavaScript is optional and opt-in. Existing JavaScript validation tools such as ESLint can be used alongside the new built-in type checking functionality.
  150  

  154  
  155: The easiest way to enable type checking in a JavaScript file is by adding `// @ts-check` to the top of a file.
  156  

  166  
  167: To enable type checking for all JavaScript files without changing any code, just add `"js/ts.implicitProjectConfig.checkJs": true` to your workspace or user settings. This enables type checking for any JavaScript file that is not part of a `jsconfig.json` or `tsconfig.json` project.
  168  

  176  
  177: You can also disable individual errors in a JavaScript file using a `// @ts-ignore` comment on the line before the error:
  178  

  186  
  187: To enable type checking for JavaScript files that are part of a `jsconfig.json` or `tsconfig.json`, add `"checkJs": true` to the project's compiler options:
  188  

  217  
  218: This enables type checking for all JavaScript files in the project. You can use `// @ts-nocheck` to disable type checking per file.
  219  
  220: JavaScript type checking requires TypeScript 2.3. If you are unsure what version of TypeScript is currently active in your workspace, run the **TypeScript: Select TypeScript Version** command to check. You must have a `.js/.ts` file open in the editor to run this command. If you open a TypeScript file, the version appears in the lower right corner.
  221  

  223  
  224: Let's say that you are working in legacy JavaScript code that uses global variables or non-standard DOM APIs:
  225  

  243  
  244: To start, [create a `jsconfig.json`](#javascript-projects-jsconfigjson) at the root of your project:
  245  

  255  
  256: Then reload VS Code to make sure the change is applied. The presence of a `jsconfig.json` lets TypeScript know that your Javascript files are part of a larger project.
  257  

  267  
  268: `d.ts` files are type declarations. In this case, `globals.d.ts` lets TypeScript know that a global `CAN_NOTIFY` exists and that a `webkitNotifications` property exists on `window`. You can read more about writing `d.ts` in the [TypeScript documentation](https://www.typescriptlang.org/docs/handbook/declaration-files/introduction.html). `d.ts` files do not change how JavaScript is evaluated, they are used only for providing better JavaScript language support.
  269  

  273  
  274: One of the key features of TypeScript is the ability to use the latest JavaScript language features, and emit code that can execute in JavaScript runtimes that don't yet understand those newer features. With JavaScript using the same language service, it too can now take advantage of this same feature.
  275  
  276: The TypeScript compiler `tsc` can down-level compile JavaScript files from ES6 to another language level. Configure the `jsconfig.json` with the desired options and then use the –p argument to make `tsc` use your `jsconfig.json` file, for example `tsc -p jsconfig.json` to down-level compile.
  277  

  281  
  282: The [Babel](https://babeljs.io) transpiler turns ES6 files into readable ES5 JavaScript with Source Maps. You can easily integrate **Babel** into your workflow by adding the configuration below to your `tasks.json` file (located under the workspace's `.vscode` folder). The `group` setting makes this task the default **Task: Run Build Task** gesture. `isBackground` tells VS Code to keep running this task in the background. To learn more, go to [Tasks](/docs/editor/tasks.md).
  283  

  303  
  304: ## Disable JavaScript support
  305  
  306: If you prefer to use JavaScript language features supported by other JavaScript language tools such as [Flow](https://flow.org/), you can disable VS Code's built-in JavaScript support. You do this by disabling the built-in TypeScript language extension **TypeScript and JavaScript Language Features** (vscode.typescript-language-features) which also provides the JavaScript language support.
  307  
  308: To disable JavaScript/TypeScript support, go to the Extensions view (`kb(workbench.view.extensions)`) and filter on built-in extensions (**Show Built-in Extensions** in the **...** **More Actions** dropdown), then type 'typescript'. Select the **TypeScript and JavaScript Language Features** extension and press the **Disable** button. VS Code built-in extensions cannot be uninstalled, only disabled, and can be re-enabled at any time.
  309  
  310: ![TypeScript and JavaScript Language Features extension](images/working-with-javascript/disable-TS-language.png)
  311  

  313  
  314: VS Code tries to provide project-wide IntelliSense for JavaScript and TypeScript, which is what makes features such as auto-imports and **Go to Definition** possible. However, there are some cases where VS Code is limited to working only with your currently opened files and is unable to load the other files that make up your JavaScript or TypeScript project.
  315  

  317  
  318: - You are working with JavaScript or TypeScript code on [vscode.dev](https://vscode.dev) or [github.dev](https://docs.github.com/codespaces/developing-in-codespaces/web-based-editor) and VS Code is running in the browser.
  319  - You open a file from a virtual file system (such as when using the [GitHub Repositories](https://marketplace.visualstudio.com/items?itemName=GitHub.remotehub) extension).

  321  
  322: In these cases, VS Code's IntelliSense will operate in **partial mode**. Partial mode tries its best to provide IntelliSense for any JavaScript or TypeScript files you have open, but is limited and is not able to offer any cross-file IntelliSense features.
  323  

  340  
  341: - [Automatic type acquisition](/docs/nodejs/working-with-javascript.md#typings-and-automatic-type-acquisition) is currently not supported.
  342  

  344  
  345: To check if the current file is using partial mode IntelliSense instead of project-wide IntelliSense, hover over the `JavaScript` or `TypeScript` language status item in the status bar:
  346  
  347: ![Partial mode status item](images/working-with-javascript/partial-mode-status-item.png)
  348  

docs/other/office.md:
  11  
  12: [Office Add-ins](https://learn.microsoft.com/office/dev/add-ins/overview/office-add-ins) run inside an Office application and can interact with contents of the Office document using the rich [JavaScript API](https://learn.microsoft.com/office/dev/add-ins/develop/understanding-the-javascript-api-for-office).
  13  

  37  
  38: Within your project, you can view and configure your [manifest](https://learn.microsoft.com/office/dev/add-ins/develop/add-in-manifests), HTML, JavaScript or TypeScript, and CSS files to define your add-in. To learn more about developing Office Add-ins in VS Code, refer to [Develop Office Add-ins with Visual Studio Code](https://learn.microsoft.com/office/dev/add-ins/develop/develop-add-ins-vscode).
  39  

  41  
  42: Debugging your add-in's client-side JavaScript code varies based on your development environment. To assist you with debugging on certain platforms, see [Overview of debugging Office Add-ins](https://learn.microsoft.com/office/dev/add-ins/testing/debug-add-ins-overview).
  43  

docs/python/editing.md:
  70  
  71: GitHub Copilot provides suggestions for numerous languages and a wide variety of frameworks, and it works especially well for Python, JavaScript, TypeScript, Ruby, Go, C# and C++.
  72  

docs/python/testing.md:
  30  
  31: To thoroughly test this function, you want to throw at it every conceivable input: valid strings, mistyped strings (off by one or two characters, or containing invalid characters), strings that are too short or too long, blank strings, null arguments, strings containing control characters (non-text codes), string containing HTML, strings containing injection attacks (such as SQL commands or JavaScript code), and so on. It's especially important to test security cases like injection attacks if the validated string is later used in database queries or displayed in the app's UI.
  32  

docs/python/tutorial-django.md:
  358  
  359: The app you've created so far in this tutorial generates only plain text web pages from Python code. Although it's possible to generate HTML directly in code, developers avoid such a practice because it opens the app to [cross-site scripting (XSS) attacks](https://en.wikipedia.org/wiki/Cross-site_scripting). In the `hello_there` function of this tutorial, for example, one might think to format the output in code with something like `content = "<h1>Hello there, " + clean_name + "!</h1>"`, where the result in `content` is given directly to a browser. This opening allows an attacker to place malicious HTML, including JavaScript code, in the URL that ends up in `clean_name` and thus ends up being run in the browser.
  360  

docs/python/tutorial-flask.md:
  270  
  271: The app you've created so far in this tutorial generates only plain text web pages from Python code. Although it's possible to generate HTML directly in code, developers avoid such a practice because it opens the app to [cross-site scripting (XSS) attacks](https://flask.palletsprojects.com/security/#cross-site-scripting-xss). In the `hello_there` function of this tutorial, for example, one might think to format the output in code with something like `content = "<h1>Hello there, " + clean_name + "!</h1>"`, where the result in `content` is given directly to a browser. This opening allows an attacker to place malicious HTML, including JavaScript code, in the URL that ends up in `clean_name` and thus ends up being run in the browser.
  272  

docs/remote/linux.md:
  41  
  42: Platform prerequisites are primarily driven by the version of the [Node.js](https://nodejs.org/en/docs/meta/topics/dependencies) runtime (and by extension the [V8 JavaScript engine](https://v8docs.nodesource.com)) shipped in the server component automatically installed on each remote endpoint. This server also has a set of related native node modules that need to be compiled and tested for each target. **64-bit x86 glibc-based** Linux distributions currently provide the best support given these requirements.
  43  

docs/remote/ssh-tutorial.md:
  213  
  214: You have syntax highlighting for the JavaScript file as well as IntelliSense with hovers, just like you would see if the source code was on your local machine.
  215  

docs/setup/additional-components.md:
  11  
  12: Visual Studio Code is a small download by design and only includes the minimum number of components shared across most development workflows. Basic functionality like the editor, file management, window management, and preference settings are included. A JavaScript/TypeScript language service and Node.js debugger are also part of the base install.
  13  

  20  * [Git](https://git-scm.com/download) - VS Code has built-in support for source code control using Git but requires Git to be installed separately.
  21: * [Node.js (includes npm)](https://nodejs.org/) - A cross platform runtime for building and running JavaScript applications.
  22: * [TypeScript](https://www.typescriptlang.org) - The TypeScript compiler, `tsc`, for transpiling TypeScript to JavaScript.
  23  

  41  * [Gulp](https://gulpjs.com/) - A streaming task runner system which integrates easily with VS Code tasks.
  42: * [Mocha](https://mochajs.org/) - A JavaScript test framework that runs on Node.js.
  43  * [Yarn](https://yarnpkg.com/) - A dependency manager and alternative to npm.

docs/setup/linux.md:
  141  
  142: Node.js is a popular platform and runtime for easily building and running JavaScript applications. It also includes [npm](https://www.npmjs.com/), a Package Manager for Node.js modules. You'll see Node.js and npm mentioned frequently in our documentation and some optional VS Code tooling requires Node.js (for example, the VS Code [extension generator](/api/get-started/your-first-extension.md)).
  143  

  145  
  146: To learn more about JavaScript and Node.js, see our [Node.js tutorial](/docs/nodejs/nodejs-tutorial.md), where you'll learn about running and debugging Node.js applications with VS Code.
  147  

docs/setup/setup-overview.md:
  48  
  49: * Languages - [C++](/docs/languages/cpp.md), [C#](/docs/languages/csharp.md), [Go](/docs/languages/go.md), [Java](/docs/languages/java.md), [Python](/docs/languages/python.md)
  50  * Tools - [ESLint](https://marketplace.visualstudio.com/items/dbaeumer.vscode-eslint), [JSHint](https://marketplace.visualstudio.com/items/dbaeumer.jshint) , [PowerShell](https://marketplace.visualstudio.com/items?itemName=ms-vscode.PowerShell)

docs/supporting/oss-extensions.md:
  48  | [Cordova Tools](https://marketplace.visualstudio.com/items/msjsdiag.cordova-tools) | ✔ ([Repo](https://github.com/microsoft/vscode-cordova)) | [Microsoft](https://marketplace.visualstudio.com/items/msjsdiag.cordova-tools/license) |
  49: | [Debugger for Java](https://marketplace.visualstudio.com/items/vscjava.vscode-java-debug) | ✔ | [MIT](https://marketplace.visualstudio.com/items/vscjava.vscode-java-debug/license) |
  50  | [Docker](https://marketplace.visualstudio.com/items/ms-azuretools.vscode-docker) | ✔ | [MIT](https://marketplace.visualstudio.com/items/ms-azuretools.vscode-docker/license) |

  59  | [IntelliCode](https://marketplace.visualstudio.com/items/VisualStudioExptTeam.vscodeintellicode) |  | [Microsoft](https://marketplace.visualstudio.com/items/VisualStudioExptTeam.vscodeintellicode/license) |
  60: | [Project Manager for Java](https://marketplace.visualstudio.com/items/vscjava.vscode-java-dependency) | ✔ | [MIT](https://marketplace.visualstudio.com/items/vscjava.vscode-java-dependency/license) |
  61: | [JavaScript Atom Grammar](https://marketplace.visualstudio.com/items/ms-vscode.js-atom-grammar) | ✔ ([Repo](https://github.com/microsoft/vscode-js-atom-grammar)) | [Microsoft](https://marketplace.visualstudio.com/items/ms-vscode.js-atom-grammar/license) |
  62: | [JavaScript Debugger](https://marketplace.visualstudio.com/items?itemName=ms-vscode.js-debug) | ✔ ([Repo](https://github.com/microsoft/vscode-js-debug)) | [Microsoft](https://marketplace.visualstudio.com/items/ms-vscode.js-debug/license) |
  63  | [Kubernetes](https://marketplace.visualstudio.com/items/ms-kubernetes-tools.vscode-kubernetes-tools) | ✔ | [MIT](https://marketplace.visualstudio.com/items/ms-kubernetes-tools.vscode-kubernetes-tools/license) |

  65  | [Markdown Theme Kit](https://marketplace.visualstudio.com/items/ms-vscode.Theme-MarkdownKit) | ✔ | [MIT](https://marketplace.visualstudio.com/items/ms-vscode.Theme-MarkdownKit/license) |
  66: | [Maven for Java](https://marketplace.visualstudio.com/items/vscjava.vscode-maven) | ✔ | [MIT](https://marketplace.visualstudio.com/items/vscjava.vscode-maven/license) |
  67  | [Mezzurite](https://marketplace.visualstudio.com/items/mezzurite-devs.mezzurite) | ✔ | [MIT](https://marketplace.visualstudio.com/items/mezzurite-devs.mezzurite/license) |

  82  | [Service Fabric Reliable Services](https://marketplace.visualstudio.com/items/ms-azuretools.vscode-service-fabric-reliable-services) | ✔ | [MIT](https://marketplace.visualstudio.com/items/ms-azuretools.vscode-service-fabric-reliable-services/license) |
  83: | [Spring Boot Dashboard](https://marketplace.visualstudio.com/items/vscjava.vscode-spring-boot-dashboard) | ✔ | [MIT](https://marketplace.visualstudio.com/items/vscjava.vscode-spring-boot-dashboard/license) |
  84  | [Spark & Hive Tools](https://marketplace.visualstudio.com/items/mshdinsight.azure-hdinsight) |  | [Microsoft](https://marketplace.visualstudio.com/items/mshdinsight.azure-hdinsight/license) |
  85: | [Spring Initializr Java Support](https://marketplace.visualstudio.com/items/vscjava.vscode-spring-initializr) | ✔ | [MIT](https://marketplace.visualstudio.com/items/vscjava.vscode-spring-initializr/license) |
  86  | [SQL Server](https://marketplace.visualstudio.com/items/ms-mssql.mssql) | ✔ | [MIT](https://marketplace.visualstudio.com/items/ms-mssql.mssql/license) |
  87  | [Sublime Text Keymap](https://marketplace.visualstudio.com/items/ms-vscode.sublime-keybindings) | ✔ | [MIT](https://marketplace.visualstudio.com/items/ms-vscode.sublime-keybindings/license) |
  88: | [Test Runner for Java](https://marketplace.visualstudio.com/items/vscjava.vscode-java-test) | ✔ | [MIT](https://marketplace.visualstudio.com/items/vscjava.vscode-java-test/license) |
  89  | [Tomorrow and Tomorrow Night Theme](https://marketplace.visualstudio.com/items/ms-vscode.Theme-TomorrowKit) | ✔ | [MIT](https://marketplace.visualstudio.com/items/ms-vscode.Theme-TomorrowKit/license) |
  90  | [TSLint](https://marketplace.visualstudio.com/items/ms-vscode.vscode-typescript-tslint-plugin) | ✔ | [MIT](https://marketplace.visualstudio.com/items/ms-vscode.vscode-typescript-tslint-plugin/license) |
  91: | [TypeScript and Javascript Nightly](https://marketplace.visualstudio.com/items?itemName=ms-vscode.vscode-typescript-next) | ✔ | [MIT](https://marketplace.visualstudio.com/items/ms-vscode.vscode-typescript-next/license) |
  92  | [Visual Studio Keymap](https://marketplace.visualstudio.com/items/ms-vscode.vs-keybindings) | ✔ | [MIT](https://marketplace.visualstudio.com/items/ms-vscode.vs-keybindings/license) |

docs/typescript/typescript-compiling.md:
   11  
   12: [TypeScript](https://www.typescriptlang.org) is a typed superset of JavaScript that transpiles to plain JavaScript. It offers classes, modules, and interfaces to help you build robust components.
   13  

   15  
   16: Visual Studio Code includes TypeScript language support but does not include the TypeScript compiler, `tsc`. You will need to install the TypeScript compiler either globally or in your workspace to transpile TypeScript source code to JavaScript (`tsc HelloWorld.ts`).
   17  

   60  
   61: ## Transpile TypeScript into JavaScript
   62  

   75  
   76: You should now see the transpiled `helloworld.js` JavaScript file, which you can run if you have [Node.js](https://nodejs.org) installed, by typing `node helloworld.js`.
   77  

  138  
  139: ## JavaScript source map support
  140  
  141: TypeScript debugging supports JavaScript source maps. To generate source maps for your TypeScript files, compile with the `--sourcemap` option or set the `sourceMap` property in the `tsconfig.json` file to `true`.
  142  

  146  
  147: Having the generated JavaScript file in the same folder at the TypeScript source will quickly get cluttered on larger projects. You can specify the output directory for the compiler with the `outDir` attribute.
  148  

  158  
  159: ## Hiding derived JavaScript files
  160  
  161: When you are working with TypeScript, you often don't want to see generated JavaScript files in the File Explorer or in Search results. VS Code offers filtering capabilities with a `files.exclude` [workspace setting](/docs/getstarted/settings.md) and you can easily create an expression to hide those derived files:
  162  

  164  
  165: This pattern will match on any JavaScript file (`**/*.js`) but only if a sibling TypeScript file with the same name is present. The File Explorer will no longer show derived resources for JavaScript if they are compiled to the same location.
  166  

  170  
  171: To exclude JavaScript files generated from both `.ts` and `.tsx` source files, use this expression:
  172  

  198  
  199: If your workspace has a specific TypeScript version, you can switch between the workspace version of TypeScript and the version that VS Code uses by default by opening a TypeScript or JavaScript file and clicking on the TypeScript version number in the Status Bar. A message box will appear asking you which version of TypeScript VS Code should use:
  200  

  230  
  231: The simplest way to try out the latest TypeScript features in VS Code is to install the [JavaScript and TypeScript Nightly extension](https://marketplace.visualstudio.com/items?itemName=ms-vscode.vscode-typescript-next).
  232  

  234  
  235: ## Mixed TypeScript and JavaScript projects
  236  
  237: It is possible to have mixed TypeScript and JavaScript projects. To enable JavaScript inside a TypeScript project, you can set the `allowJs` property to `true` in the `tsconfig.json`.
  238  

docs/typescript/typescript-debugging.md:
   14  
   15: ## JavaScript source map support
   16  
   17: TypeScript debugging supports JavaScript source maps. To generate source maps for your TypeScript files, compile with the `--sourcemap` option or set the `sourceMap` property in the `tsconfig.json` file to `true`.
   18  

   58  
   59: VS Code has determined the program to launch, `helloworld.ts`, included the build as a `preLaunchTask`, and told the debugger where to find the generated JavaScript files.
   60  

   68  
   69: If generated (transpiled) JavaScript files do not live next to their source, you can help the VS Code debugger locate them by setting the `outFiles` attribute in the launch configuration. Whenever you set a breakpoint in the original source, VS Code tries to find the generated source by searching the files specified by glob patterns in `outFiles`.
   70  

  137  
  138: ### Cannot launch program because corresponding JavaScript cannot be found
  139  
  140: You've likely not set `"sourceMap": true` in your `tsconfig.json` or `outFiles` in your `launch.json` and the VS Code Node.js debugger can't map your TypeScript source code to the running JavaScript. Turn on source maps and rebuild your project.

docs/typescript/typescript-editing.md:
  176  
  177: In addition to syntax highlighting, TypeScript and JavaScript also provide semantic highlighting.
  178  

docs/typescript/typescript-tutorial.md:
   12  
   13: [TypeScript](https://www.typescriptlang.org) is a typed superset of JavaScript that compiles to plain JavaScript. It offers classes, modules, and interfaces to help you build robust components.
   14  

   16  
   17: Visual Studio Code includes TypeScript language support but does not include the TypeScript compiler, `tsc`. You will need to install the TypeScript compiler either globally or in your workspace to transpile TypeScript source code to JavaScript (`tsc HelloWorld.ts`).
   18  

   51  
   52: To compile your TypeScript code, you can open the [Integrated Terminal](/docs/terminal/basics.md) (`kb(workbench.action.terminal.toggleTerminal)`) and type `tsc helloworld.ts`. This will compile and create a new `helloworld.js` JavaScript file.
   53  

   61  
   62: ```javascript
   63  var message = "Hello World";

  101  
  102: Having the generated JavaScript file in the same folder as the TypeScript source will quickly get cluttered on larger projects, so you can specify the output directory for the compiler with the `outDir` attribute.
  103  

  137  
  138: VS Code has built-in support for TypeScript debugging. To support debugging TypeScript in combination with the executing JavaScript code, VS Code relies on [source maps](https://firefox-source-docs.mozilla.org/devtools-user/debugger/how_to/use_a_source_map/index.html) for the debugger to map between the original TypeScript source code and the running JavaScript. You can create source maps during the build by setting `"sourceMap": true` in your `tsconfig.json`.
  139  

  175  
  176: ### Cannot launch program because corresponding JavaScript cannot be found
  177  
  178: You've likely not set `"sourceMap": true` in your `tsconfig.json` and the VS Code Node.js debugger can't map your TypeScript source code to the running JavaScript. Turn on source maps and rebuild your project.

learn/overview.md:
   9  Learning to code is intimidating, so set yourself up for success with a tool built for you. Visual Studio Code is a free coding editor that helps you start coding quickly.
  10: Use it to code in any programming language, without switching editors. Visual Studio Code has support for many languages, including Python, Java, C++, JavaScript, and more. Ready to get started? Check out these [introductory videos](https://www.youtube.com/watch?v=Uvf2FVS1F8k&list=PLj6YeMhvp2S4oEV_bT1Uk3oXfpvGW6Xqy) or check out our [coding packs for Java and .NET](/learn/educators/installers.md).
  11  

  25  
  26: As you code, Visual Studio Code gives you suggestions to complete lines of code and quick fixes for common mistakes. You can also use the debugger in VS Code to step through each line of code and understand what is happening. Check out guides on how to use the debugger if you're coding in [Python](/docs/python/debugging.md), [Java](/docs/java/java-debugging.md#configure), and [JavaScript/TypeScript/Node.js](/docs/editor/debugging.md#start-debugging).
  27  

learn/develop-cloud/containers.md:
  21  
  22: In the diagram below, you'll see an example of three dev containers: one for Python, one for Java, and one for C++. Each of these dev containers would include the app and the dependencies that app needs to run. The dependencies are separate from the rest of your computer (which are represented by the Infrastructure and Host Operating System).
  23  

  42  - [Try Out Development Containers: Python](https://github.com/microsoft/vscode-remote-try-python)
  43: - [Try Out Development Containers: Java](https://github.com/microsoft/vscode-remote-try-java)
  44  - [Try Out Development Containers: C++](https://github.com/microsoft/vscode-remote-try-cpp)

learn/educators/installers.md:
   7  DateApproved: 10/22/2020
   8: MetaDescription: Visual Studio Code Coding Packs for programming languages such as Java and .NET
   9  ---

  13  
  14: ## Coding pack for Java
  15  
  16: This coding pack includes everything you need to start coding in Java.
  17  
  18: <a class="install-extension-btn" onclick="pushCodingPackEvent('java', 'win')" href="https://aka.ms/vscode-java-installer-win">Download - Windows</a>
  19: <a class="install-extension-btn" onclick="pushCodingPackEvent('java', 'mac')" href="https://aka.ms/vscode-java-installer-mac">Download - macOS</a>
  20  

  22  
  23: - Java Development Kit (JDK) and add it to the PATH
  24  - VS Code
  25: - Java extension pack in VS Code
  26  
  27: ![Java Installer](images/installers/java-installer.png)
  28  

learn/educators/nodejs.md:
    3  Area: educators
    4: TOCTitle: Node.js and JavaScript
    5  ContentId: 0a44fb8f-961c-4524-8fa9-c4c98618a9b5
    6: PageTitle: Node.js and JavaScript in Visual Studio Code
    7  DateApproved: 3/2/2021
    8: MetaDescription: Node.js and JavaScript in Visual Studio Code
    9  ---
   10  
   11: # Node.js and JavaScript in Visual Studio Code
   12  
   13: Visual Studio Code is the most popular free code editor among JavaScript developers around the world according to the [State of JS 2020 survey](https://2020.stateofjs.com/other-tools/#text_editors). It is easily customizable and has a rich ecosystem of extensions to help your students learn Node.js and JavaScript.
   14  

   34  
   35: * [ESLint](https://marketplace.visualstudio.com/items?itemName=dbaeumer.vscode-eslint) - His favorite! Auto-formatting keeps students focused on program logic and linting helps them quickly find, understand, and fix errors in their JavaScript code.
   36  * [TabNine](https://marketplace.visualstudio.com/items?itemName=TabNine.tabnine-vscode) - Longer AI-driven code-snippets helps non-native English speakers avoid code-breaking typos and reduces the impact of slow typing.

   39  
   40: These extensions are also part of the Node.js and JavaScript Education Extension Pack below!
   41  

   62      // Language-Specific
   63:     "javascript.format.insertSpaceBeforeFunctionParenthesis": false, // align with ESLint Standard
   64:     "javascript.updateImportsOnFileMove.enabled": "always",
   65      "typescript.format.insertSpaceBeforeFunctionParenthesis": false, // align with ESLint Standard
   66      "typescript.updateImportsOnFileMove.enabled": "always",
   67:     "[javascript]": {
   68      "editor.defaultFormatter": "dbaeumer.vscode-eslint" // preconfig ESLint

   93  
   94: Thank you Charles for sharing your experiences and favorite VS Code settings! If you're interested in using VS Code for your Node.js web development classes, you can get started with the [Node.js and JavaScript Education Extension Pack](https://marketplace.visualstudio.com/items?itemName=tanhakabir.node-js-education-extension-pack) that contains Charles' favorite extensions, extensions for real-time collaboration, and more!
   95  
   96: ## Node.js and JavaScript Extension Pack
   97  
   98: Unsure which extensions to recommend to your students? You can point your students to the [Node.js and JavaScript Education Extension Pack](https://marketplace.visualstudio.com/items?itemName=tanhakabir.node-js-education-extension-pack) that contains essential and helpful extensions for the classroom. You can download the extension pack from the [VS Code Marketplace](https://marketplace.visualstudio.com/vscode):
   99  
  100: [![Node.js and JavaScript Education Extension Pack](images/nodejs/node-js-extension-pack.png)](https://marketplace.visualstudio.com/items?itemName=tanhakabir.node-js-education-extension-pack)
  101  

  104  * [npm](https://marketplace.visualstudio.com/items?itemName=eg2.vscode-npm-script) and [npm IntelliSense](https://marketplace.visualstudio.com/items?itemName=christian-kohler.npm-intellisense) for verifying status of npm packages(installed or not) and auto-completions.
  105: * [ESLint](https://marketplace.visualstudio.com/items?itemName=dbaeumer.vscode-eslint) and [Vetur](https://marketplace.visualstudio.com/items?itemName=octref.vetur) for basic JavaScript, TypeScript, and Vue.js functionality like auto-completions, linting, error highlighting before compiling.
  106  * [Live Share](https://marketplace.visualstudio.com/items?itemName=MS-vsliveshare.vsliveshare) to enable real-time collaboration.

learn/students/github-pack.md:
  11  
  12: Welcome to Visual Studio Code! VS Code is a free coding editor that helps you start coding quickly. Use it to code in any programming language, without switching editors. VS Code comes with built-in source control, so you can compare versions of your code side-by-side and save your work over time by backing it up on [GitHub](https://github.com). We have resources specifically created for students and educators, including our [Java and .NET Coding Packs](/learntocode), programming lessons built in partnership with [NASA](/learn/students/nasa-python.md) and [Netflix](/learn/students/spacejam-python.md), and [videos](/learn/get-started/basics.md) to quickly get up to speed.
  13  

learn/students/spacejam-python.md:
  12  
  13: Inspired by the new film "Space Jam: A New Legacy," this learning path shows basketball fans how an understanding of data science and coding can support their passions, create opportunities, and even open doors to possible careers. Develop skills in Visual Studio Code, Azure, GitHub, JavaScript, and Python, to gain insights into how individual moments throughout a player's history can lead to a critical game decision in the finals.
  14  

release-notes/July_2016.md:
  132  
  133: ```javascript
  134  commands.executeCommand('cursorMove', {to: 'up', by: 'wrappedLine', value: '2'})

  138  
  139: ```javascript
  140  commands.executeCommand('moveActiveEditor', {to: 'left', by: 'tab', value: '3'})

release-notes/June_2016.md:
   26  * **Editor**: Global Search and Replace, Indent Guides, Problems panel to view errors and warnings.
   27: * **Languages**: Better, more complete Emmet support, Atom JavaScript grammar extension.
   28  * **Debugging**: Lots of improvements including support for attaching to running Node.js processes and changing variable values during a debug session.

  266  
  267: ### Atom JavaScript grammar
  268  
  269: As an alternative to the built-in JavaScript grammar, you can now install the [Atom JavaScript grammar](https://marketplace.visualstudio.com/items?itemName=ms-vscode.js-atom-grammar). It differs from the built-in grammar in that it creates tokens for variable and function references which, if supported by the theme, can be colorized differently.
  270  

release-notes/May_2016.md:
  164  
  165: ```javascript
  166      let launchConfig = {

release-notes/v0_3_0.md:
   87  
   88: TypeScript  debugging now supports JavaScript source maps. Enable this by setting the `sourceMaps` attribute to `true` in the launch configuration. In addition, you can specify a TypeScript file with the `program` attribute. To generate source maps for your TypeScript files, compile with the `--sourcemap` option.
   89  

  130  
  131: ### JavaScript
  132: New options allow you to turn off *all* semantic and syntax checks, useful if you prefer JSHint instead of the VS Code JavaScript validator.
  133  
  134: * `javascript.validate.semanticValidation=[true|false]` Use `true` to have VS Code report semantic errors (unassigned variables, etc. and *all* lint checks)
  135: * `javascript.validate.syntaxValidation=[true|false]` Use `false` to have VS Code report syntaX errors (missing brackets, etc.).
  136  

release-notes/v0_5_0.md:
   12  * Improved editor options that include support for removing trailing whitespace, improved search patterns with include/exclude filters.
   13: * Significant JavaScript updates including ES6 support, jsconfig.json, improved `///` reference management, additional workspace settings
   14  * Git enhancements, including an integrated credential prompt, multiline commit message support and improved control over auto-fetch

   86  
   87: If you use a language that compiles to another file at the same location of the source file, like TypeScript does to JavaScript, you often don’t want to see the files in the explorer or include them in search results. With the new filtering capabilities, you can easily set an expression to hide those derived files:
   88  

   90  
   91: Such a pattern will match on any JavaScript file (`**/*.js`), but only if a sibling file with the same name and extension, `*.ts` in this example, is present. The result being Explorer will no longer show derived resources for JavaScript if they are compiled to the same location. All you have to do is configure this in the `files.exclude` setting. While we've used JavaScript for this example, the same technique can be used for other transpiled languages, like Coffee Script or Less/Sass, too.
   92  
   93: Here's an example of how JavaScript files are hidden using the `"**/*.js": { "when": "$(basename).ts"}` expression.
   94  

  110  
  111: >**Note:** You can still use wildcards without enabling glob pattern support. Things like `*.js` to search in all JavaScript files still work. Once you enable glob pattern syntax, keep in mind that you need to use `**/*.js` to search across all directories of your project!
  112  
  113: ## JavaScript
  114  
  115: We've made a lot of changes for JavaScript development in this release.
  116  

  122  
  123: A popular request since our launch has been support for ES6 (ECMAScript 6, the latest update of JavaScript targeting ratification in June 2015). You can expect VS Code to understand the new ES6 syntax elements and their semantics.
  124  

  130  
  131: You can create a JavaScript project by dropping in a `jsconfig.json` file. It's a subset of [tsconfig.json](https://github.com/microsoft/TypeScript/wiki/tsconfig.json), and it allows you to define what files are part of a project, and what compiler options to use.
  132  Same as in `tsconfig.json` if no "files" property is present in a `jsconfig.json`, we default to including all files in the containing directory and subdirectories. When a "files" property is specified, only those files are included.

  137  
  138: >**Note:** In the Editor Options section, we discuss how you can hide derived files in the Explorer window, e.g. `*.js` files generated from `*.ts` sources.  In the Debugging section, we discuss support for JavaScript Source Maps and minified/uglified JavaScript debugging.
  139  

  252  
  253: **JavaScript source maps**
  254  
  255: If generated (transpiled) JavaScript files do not live next to their source, you can help the VS Code debugger locate them by specifying the outDir directory in the launch configuration. Whenever you set a breakpoint in the original source, VS Code tries to find the generated source, and the associated source map, in the outDir directory.
  256  

  260  
  261: Debugging minified/uglified JavaScript is now supported.
  262  

release-notes/v0_7_0.md:
  21  * [Editor](/docs/editor/codebasics.md) - An introduction to VS Code itself from editing all the way to debugging and tasks
  22: * [Languages](/docs/languages/overview.md) - Walkthroughs on how to get the best out of VS Code when using specific languages e.g. JavaScript
  23  

  40  ### node.js: Stable breakpoints
  41: For performance reasons node.js parses the functions inside JavaScript files lazily on first access. As a consequence, breakpoints don't work in source code that hasn't been seen (parsed) by node.js.
  42  

  72  
  73: ## JavaScript
  74: In our [JavaScript documentation](/docs/languages/javascript.md) we've added topics covering:
  75: * JavaScript projects with `jsconfig.json`
  76  * `ES6` support

  82  
  83: We added the ability to exclude files and folders from a project via the addition of an `exclude` property in the `jsconfig.json`. This is useful when you want to exclude folders with generated JavaScript code.
  84  

release-notes/v0_8_0.md:
  48  
  49: ## Languages - JavaScript Linting as you Type
  50: VS Code now provides support for [ESlint](https://eslint.org/) and [JSHint](https://jshint.com/). If enabled, the JavaScript code is validated as you type and reported problems can be navigated to and fixed inside VS Code.
  51  

  53  
  54: * Install the corresponding linter globally or inside the workspace folder that contains the JavaScript code to be validated. For example using the command lines: `npm install eslint --save-dev` or `npm install jshint --save-dev`, respectively.
  55  * Enable eslint or jshint via the corresponding VS Code settings `"eslint.enable": true` or `"jshint.enable": true`, respectively.
  56: * Optionally disable VS Code's built-in JavaScript validation via the setting `"javascript.validate.enable": false`.
  57  
  58: Try it out by opening a JavaScript file and adding a problem that should be detected by the enabled linter. VS Code shows problems inside the editor and in the status bar.
  59  

release-notes/v1_5.md:
  169  
  170: For example, to use Emmet HTML abbreviations inside JavaScript:
  171  

  174      "emmet.syntaxProfiles": {
  175:         "javascript": "html"
  176       }

  269  
  270: ```javascript
  271    commands.executeCommand('editorScroll', {to: 'up', by: 'page', value: '1'})

  275  
  276: ```javascript
  277    commands.executeCommand('revealLine', {lineNumber: '10', at: 'top'})

  281  
  282: ```javascript
  283    commands.executeCommand('editor.fold', {levels: '2', up: false})

  287  
  288: ```javascript
  289    commands.executeCommand('editor.unfold', {levels: '2'})

release-notes/v1_6.md:
   19  
   20: * **[TypeScript 2.0](#typescript-2)** - Language improvements for [JavaScript](#javascript) and [TypeScript](#typescript) as well as [extension authoring](#extension-authoring).
   21  * **[Format on Save](#format-on-save)** - Keep your code looking great by running a formatter when you save.

   29  * **[*PREVIEW*  Extensions Packs](#preview-extension-packs)** - Bundle a set of extensions into a single download from the Marketplace.
   30: * **[*PREVIEW*  TS/JS Grammar](#preview-typescript-javascript-grammar)** - A new colorizer for TS/JS with over 200 fixes. We will include it in the next release.
   31  

  127  
  128: ### JavaScript
  129  
  130: The JavaScript in VS Code is powered by TypeScript and the TypeScript version bundled with VS Code has been updated to version 2.0.3.
  131  
  132: This brings several improvements for JavaScript support:
  133  
  134  - The JSDoc support has been improved and many issues have been fixed.
  135: - The parser now allows any syntax that the TypeScript parser is capable of recognizing and is part of a JavaScript standards proposal. For example, static class properties are no longer flagged as invalid.
  136  
  137: In addition, there are improvements to TypeScript that are also applicable to JavaScript:
  138  

  150  
  151: ### PREVIEW TypeScript JavaScript Grammar
  152  
  153: The TypeScript/JavaScript TextMate grammar has been reworked for improved syntax highlighting. This work is currently available as an [extension in the marketplace](https://marketplace.visualstudio.com/items?itemName=ms-vscode.typescript-javascript-grammar). The plan is to switch to this version during October. Please install this extension now and provide us with feedback.
  154  

  165  
  166: However, we are not done yet.. Now that we have extracted languages into extensions, the next challenge is to support the nesting of these languages, that is, embed JavaScript or CSS inside HTML. We will be working on this in October.
  167  

  269  
  270: When debugging transpiled code (for example TypeScript) where your build process generates JavaScript code into a specific directory, it is necessary to help the Node.js debugger finding the generated code. In previous version of VS Code, this was done by specifying the root directory of the generated source code via the `outDir` attribute.
  271  
  272: In the September release, it is now possible to use multiple glob patterns for including and excluding files from the set of generated JavaScript files. For this, a new array typed attribute `outFiles` has been introduced. The old `outDir` is still supported, but we plan to deprecate this in the future.
  273  

  356  
  357: ### Authoring in JavaScript
  358  
  359: The Yeoman generator has also been updated to make use of the new TypeScript 2.0.x features to help write JavaScript. If you want to migrate an existing extension to use TypeScript 2.0.3 for JavaScript authoring do the following.
  360  

  366  - Add a developer dependency for the Mocha typing using `"@types/mocha": "^2.2.32"`.
  367: - We also recommend using ESLint for linting JavaScript source code. To do so, add the following entry as a developer dependency as well: `"eslint": "^3.6.0"`. In addition we recommend installing the [ESLint extensions](https://marketplace.visualstudio.com/items?itemName=dbaeumer.vscode-eslint).
  368  

release-notes/v1_7.md:
   11  
   12: We are releasing 1.7.2 today which includes a new version of the TypeScript Server (to 2.0.10). The update to the server will re-enable the Automatic Type Acquisition (ATA) feature by default for JavaScript users. This feature greatly improves the IntelliSense in JavaScript projects and removes the need to manually install TypeScript declaration files (.d.ts files). This feature is powered by a query to the npmjs service to retrieve relevant declaration files for used modules. More details in relation to this feature, including details on how to disable it are [included in the relevant section of these release notes](#better-javascript-intellisense).
   13  

   19  
   20: We are releasing a 1.7.1 recovery build to disable the automatic JavaScript typings file acquisition [feature](#better-javascript-intellisense). We need to tune the acquisition to avoid unnecessary load on the NPM registry and we're working closely with the TypeScript and npmjs.org teams. We expect to enable this feature in a future release.
   21  

   36  * **[Disable extensions](#disable-extensions)** - Quickly disable an Extension globally or for a specific workspace.
   37: * **[Improved TypeScript and JavaScript Grammar](#improved-typescript-and-javascript-grammar)** - The Dark+ themes now colorize variable and function references.
   38  * **[Extension Packs](#extension-packs)** - View dependencies of an extension pack right in the extension details.

   43  * **[Editor](#editor)** - Keyboard shortcuts reference, finer formatting control.
   44: * **[Languages](#languages)** - JavaScript and CSS improvements.
   45  * **[Extensions](#extensions)** - New categories for Keymaps and Formatters for easier search.

  111  
  112: We also added new configuration options to enable/disable the default formatters for JavaScript, TypeScript, JSON, and HTML. Use these options when you have another extension installed that provides formatting for the same language.
  113  

  119  
  120: ### Better JavaScript IntelliSense
  121  

  123  
  124: VS Code uses the TypeScript language server to provide IntelliSense in JavaScript files. In the past, you had to create a `jsconfig.json` file. You also had to manually install typings (Type Declaration) files for all the modules and libraries you were using. That's not an easy chore, particularly when you are a pure JavaScript developer.
  125  

  143  
  144: ### Improved TypeScript and JavaScript Grammar
  145  
  146: TypeScript and JavaScript syntax highlighting is based on the [TypeScript textmate grammar](https://github.com/microsoft/TypeScript-TmLanguage) authored by the TypeScript team.
  147  In the recent months the grammar has been completely rewritten.
  148  
  149: The main goal was to tackle as many of reported issues as possible. Additionally, we wanted to provide a better experience with existing color themes by generating scopes closer to what other popular JavaScript grammars such as the [Atom grammar](https://marketplace.visualstudio.com/items?itemName=ms-vscode.js-atom-grammar) do, while still supporting features like the JavaScript React syntax.
  150  

  152  
  153: Note: If you have already been helping us testing the latest grammar using the [Latest TypeScript and JavaScript grammar extension](https://marketplace.visualstudio.com/items?itemName=ms-vscode.typescript-javascript-grammar): You can uninstall that extension now.
  154  

  193  
  194: Often you have more than one workspace and various extensions installed to support these workspaces. Most of the times, these extensions are exclusive to a single workspace and not needed for others. For example, if you have JavaScript and Go language workspaces, you do not need the JavaScript linting extension in a Go workspace and vice-versa. With this release, you can now run only those extensions which you think are necessary for a workspace and disable rest of them. You can also disable extensions for the complete VS Code application, if you do not want to uninstall them and do not want them to run.
  195  

release-notes/v1_8.md:
   34  * **[Keyboard shortcuts](#keyboard-shortcuts)** - Create custom shortcuts with command arguments, find popular Keymaps.
   35: * **[JavaScript IntelliSense in HTML](#javascript-language-support-in-html)** - Get full JavaScript language support in HTML files.
   36  * **[UI for Multitarget Debugging](#multitarget-debugging)** - Launch simultaneous debug sessions.
   37  * **[TypeScript 2.1](#typescript-update)** - Improved language support with the latest TypeScript update.
   38: * **[JavaScript](#javascript)** - Support for Object Rest/Spread.
   39  

  246  
  247: ### JavaScript language support in HTML
  248  
  249: Coding assistance for JavaScript embedded in HTML is back! You get code completions and signature help for DOM and JQuery APIs, validation, hovers, Find References and Go To Definition, symbol highlighting and outline (Ctrl + Shift + o) and format. Note that the language support doesn't follow script includes, it only knows about definitions made in the same file.
  250  
  251: ![JavaScript editing in HTML](images/1_8/javascript-in-html.gif)
  252  

  262  
  263: We now use [TypeScript 2.1](https://devblogs.microsoft.com/typescript/announcing-typescript-2-1/) for JavaScript and TypeScript language support. TypeScript 2.1 brings a number of new language and tooling features. [Read about what's new in TypeScript 2.1](https://github.com/microsoft/TypeScript/wiki/What's-new-in-TypeScript#typescript-21).
  264  
  265: ### JavaScript
  266  
  267: The JavaScript in VS Code is powered by TypeScript and the new TypeScript version bundled with VS Code brings several improvements for JavaScript support:
  268  
  269: * [Support for Object Rest and Spread](https://github.com/microsoft/TypeScript/wiki/What's-new-in-TypeScript#object-spread-and-rest). This was a heavily requested feature request by JS developers working with React. Now you no longer need to disable JavaScript validation when using Object Spread/Rest.
  270  * [Configuration inheritance](https://github.com/microsoft/TypeScript/wiki/What's-new-in-TypeScript#configuration-inheritance) for `jsconfig.json` files.

  288  
  289: The `vscode-tslint` extension now supports [TSLint 4.0](https://palantir.github.io/tslint/2016/11/17/new-for-4.0.html). This version of TSLint provides additional quick fixes for warnings. In addition, `vscode-tslint` adds a quick fix to disable a TSLint rule on the next line. The new TSLint version also adds support for linting JavaScript files. See the [CHANGELOG](https://github.com/microsoft/vscode-tslint/blob/main/tslint/CHANGELOG.md) for more details.
  290  

  292  
  293: The `vscode-eslint` extension now supports validating file types other than JavaScript. To enable this, you need to do the following:
  294  
  295  - Configure ESLint with an additional plugin to do the actual validation. For example, to validate HTML files install `eslint-plugin-html` using `npm install eslint-plugin-html` and update the eslint configuration (e.g. `.eslintrc.json` file) with `"plugin": [ "html" ]`.
  296: - Add the corresponding language identifier to the `eslint.validate` setting. Something like `"eslint.validate": [ "javascript", "javascriptreact", "html" ]`. If the setting is missing, it defaults to `["javascript", "javascriptreact"]`
  297  

  340  
  341: This [blog](https://medium.com/@auchenberg/introducing-simultaneous-nirvana-javascript-debugging-for-node-js-and-chrome-in-vs-code-d898a4011ab1#.fehi3batj) explains in detail how to setup a compound configuration for a Node.js backend and a browser frontend.
  342  

  573    *  support .jsx file [PR #126](https://github.com/microsoft/vscode-tslint/pull/126)
  574:   *  Support javascript files [PR #120](https://github.com/microsoft/vscode-tslint/pull/120)
  575  

release-notes/v1_9.md:
  409  
  410: You can now more easily switch which version of TypeScript is being used in your workspace by opening a TypeScript or JavaScript file in the workspace and clicking on the TypeScript version number in the status bar:
  411  

  514  
  515: Depending on the active file, VS Code can now automatically choose a debug environment instead of explicitly asking the user. For example, if a user has a JavaScript file active in an editor and wants to setup their `launch.json`, a  `launch.json` for JavaScript is automatically generated.
  516  

  546  - **Attach to Process**: Open the process picker to select a node or gulp process for debugging. With this launch configuration you can even attach to a node or gulp process that was not started in debug mode.
  547: - **Nodemon Setup**: Use nodemon to relaunch a debug session automatically whenever the JavaScript source has changed. Make sure that you have nodemon installed globally. Please note that terminating the debug session only terminates the program to debug, not nodemon itself. To terminate nodemon, press Control-C in the integrated terminal.
  548  - **Mocha Tests**: Debug mocha tests in a `test` folder of your project. Make sure that your project has 'mocha' installed in its node_modules folder.

  581  
  582: If this feature is enabled, VS Code restarts a debug session whenever it detects the termination of Node.js. This feature can be used in combination with the `nodemon` utility which restarts Node.js whenever it detects that JavaScript source has been modified.
  583  

  603  
  604: Starting with this release, source map support is enabled by default, so it is no longer necessary to set `sourceMaps` to `true`. However, it is still necessary to let the Node.js debugger know where the generated JavaScript lives by specifying the `outFiles` glob patterns. Source map support can be disabled by setting `sourceMaps` to `false`.
  605  

  716  
  717: If the font you are using is monospace (most of the programming fonts are monospace), if a certain line consists only of ASCII characters (most of the lines in source code stick to the ASCII range 32-126 or tabs), and if certain editor decorations (like the color boxes in CSS) are not present on a line, we can skip interrogating the browser about where the text has ended up painted and simply do the math in JavaScript.
  718  

release-notes/v1_10.md:
  262  
  263: VS Code will now provide a [JSDoc](https://jsdoc.app) comment template for JavaScript and TypeScript functions when you type `/**`:
  264  

  574  * [Joshua Wester (@elemeht)](https://github.com/elemeht):  Jenkinsfile are groovy too [PR #16339](https://github.com/microsoft/vscode/pull/16339)
  575: * [Fred Bricon (@fbricon)](https://github.com/fbricon):  Auto-close javadoc [PR #19076](https://github.com/microsoft/vscode/pull/19076)
  576  * [Gama11 (@Gama11)](https://github.com/Gama11):  Some typo fixes [PR #19928](https://github.com/microsoft/vscode/pull/19928)

release-notes/v1_11.md:
   38  * **[New Debug menu](#debug-menu)** - Run Debug commands directly from the main menu.
   39: * **[Async call stacks](#async-call-stacks)** - Async JavaScript call stacks now displayed in the debugger.
   40  * **[Source Control API released](#source-control)** - The Source Control API is now public, opening up VS Code to new SCM providers.

  297  
  298: Added a new `"typescript.tsserver.log"` setting to simplify the collection of logs from the TypeScript server that powers VS Code's TypeScript and JavaScript language support. These logs can be used to debug issues with JS and TS language support, and make it easier for users to provide these logs during issue investigations.
  299  

  341  
  342: When debugging async JavaScript in Node.js or Chrome, we now show the async frames that led to the current call stack across async calls. This is currently only supported when debugging with the [inspector protocol](https://code.visualstudio.com/updates/v1_10#_node2-transitioning) via `"protocol": "inspector"`. It can be disabled by setting `"showAsyncStacks": false` in the launch config.
  343  

  355  
  356: It is now possible to access the loaded scripts of a JavaScript runtime. This is useful if you need to set a breakpoint in a script that is not part of your workspace and therefore cannot be easily located and opened through normal VS Code file browsing. A typical scenario for this is a remote debugging session: you attach to a remote Node.js program and have no code available locally. See issue [#20355](https://github.com/microsoft/vscode/issues/20355) for other scenarios that drove this enhancement.
  357  

  463  * [David Wilson (@daviwil)](https://github.com/daviwil):  Add new "files.defaultLanguage" configuration setting. [PR #23220](https://github.com/microsoft/vscode/pull/23220)
  464: * [Mackenzie McClane (@Aarilight)](https://github.com/Aarilight):  Add typescript and javascript format.insertSpaceBeforeFunctionParenthesis [PR #21712](https://github.com/microsoft/vscode/pull/21712)
  465  * [Anand Dyavanapalli (@adyavanapalli)](https://github.com/adyavanapalli):  TypeScript should use double quotes for string in import snippet. [PR #22255](https://github.com/microsoft/vscode/pull/22255)

release-notes/v1_12.md:
   31  * **[New source control providers available](#source-control)** - SCM extensions for TFVC, Perforce and Mercurial.
   32: * **[Type checking in JavaScript](#type-checking-for-javascript-files)** - Catch JavaScript programming mistakes early with type checking.
   33  * **[Improved China download speed](#china-downloads)** - Users should see faster downloads (as much as 300x).

  134  
  135: ### Type checking for JavaScript files
  136  
  137: TypeScript 2.3 also brings type checking to plain JavaScript files. This is a great way to catch common programming mistakes and these type checks also enable some exciting quick fixes for JavaScript.
  138  
  139: ![Using type checking and quick fixes in a JavaScript file](images/1_12/ts-checkjs-example.gif)
  140  
  141: TypeScript can infer types in `.js` files same as in `.ts` files. When types cannot be inferred, they can be specified using JSDoc comments. You can read more about how TypeScript uses JSDoc for JavaScript type checking [here](https://github.com/microsoft/TypeScript/wiki/Type-Checking-JavaScript-Files).
  142  
  143: Type checking of JavaScript is optional and opt-in. Existing JavaScript validation tools such as ESLint can be used alongside the new built-in type checking functionality.
  144  

  148  
  149: The easiest way to enable type checking in a JavaScript file is by adding `// @ts-check` to the top of a file.
  150  

  160  
  161: To enable type checking for all JavaScript files without changing any code, just add `"js/ts.implicitProjectConfig.checkJs": true` to your workspace or user settings. This enables type checking for any JavaScript file that is not part of a `jsconfig.json` or `tsconfig.json` project.
  162  

  170  
  171: You can also disable individual errors in a JavaScript file using a `// @ts-ignore` comment on the line before the error:
  172  

  180  
  181: To enable type checking for JavaScript files that are part of a `jsconfig.json` or `tsconfig.json`, simply add `"checkJs": true` to the project's compiler options:
  182  

  209  
  210: This enables type checking for all JavaScript files in the project. You can use `// @ts-nocheck` to disable type checking per file.
  211  
  212: JavaScript type checking requires TypeScript 2.3. If you are unsure what version of TypeScript is currently active in your workspace, simply run the **TypeScript: Select TypeScript Version** command to check.
  213  

  315  
  316: VS Code tries to implement the **Add to Watch** and **Copy Value** actions by using the data from the **VARIABLES** view and a JavaScript-biased heuristic for building expressions that can be used with the evaluate request.
  317  

release-notes/v1_13.md:
  327  
  328: To facilitate remote debugging, VS Code already supports mapping JavaScript paths between a local VS Code project and a (remote) location by means of the `localRoot` and `remoteRoot` attributes. Because remote debugging typically involves "attaching" to a remote target, the `localRoot` and `remoteRoot` attributes were only available for launch configurations of request type `"attach"`.
  329  

  404  
  405: VS Code previously tried to implement the **Add to Watch** and **Copy Value** actions by using the data from the **VARIABLES** view and a JavaScript-biased heuristic for building expressions that can be used with the evaluate request.
  406  

  508  
  509: * [ESLint](https://marketplace.visualstudio.com/items?itemName=dbaeumer.vscode-eslint): Performance improvements to lower CPU load when linting large JavaScript files with lots of code actions.
  510  * [VSCodeVim](https://marketplace.visualstudio.com/items?itemName=vscodevim.vim): We [refactored](https://github.com/VSCodeVim/Vim/pull/1642) the source code to make it easier to contribute to the project.

  534  * [@ashirley](https://github.com/ashirley): Add git.commitType configuration [PR #25855](https://github.com/microsoft/vscode/pull/25855)
  535: * [Bradley Meck (@bmeck)](https://github.com/bmeck):  Add .mjs to known JavaScript file extensions [PR #25747](https://github.com/microsoft/vscode/pull/25747)
  536  * [Bugra Cuhadaroglu (@BugraC)](https://github.com/BugraC):  Fix - #24242 #24550 [PR #25756](https://github.com/microsoft/vscode/pull/25756)

release-notes/v1_14.md:
   11  
   12: * The refactoring to convert a JavaScript ES5-style function class to an ES6 class is disabled.
   13  

   37  * **[Workbench](#workbench)** - Restore loose files, quickly switch running windows (instances).
   38: * **[Languages](#languages)** - TypeScript 2.4, more relevant suggestions in JavaScript files.
   39  * **[Debugging](#debugging)** - Simplifications for Node.js debug configurations.

  395  
  396: ![JavaScript method suggestions from parent class](images/1_14/js-super-suggestions.png)
  397  

  399  
  400: **More relevant suggestions in JavaScript files**
  401  
  402: In VS Code 1.13, suggestions in JavaScript files include suggestions for types:
  403  
  404: ![VS Code 1.13 JavaScript suggestions that include type suggestions](images/1_14/js-old-suggest.png)
  405  
  406: This meant that many suggestions that are generally not useful in JavaScript were shown, such as `EvalErrorConstructor` or `EventInit`.
  407  
  408: VS Code 1.14 better filters JavaScript suggestions to only include those you typically care about while working in plain old JavaScript:
  409  

  431  
  432: ### Refactoring support for JavaScript and TypeScript
  433  

  435  
  436: VS Code 1.14 includes initial support for refactoring JavaScript and TypeScript code. The first supported refactoring converts a JavaScript ES5-style function class to an ES6 class:
  437  

  484      "emmet.includeLanguages": {
  485:         "javascript": "javascriptreact",
  486          "vue-html": "html",

  526      * `inMarkupAndStylesheetFilesOnly` - Emmet abbreviations in the suggestion list for languages that are markup and stylesheet based ('html','pug','slim','haml','xml','xsl','css','scss','sass','less','stylus') (default).
  527:     * `always` - Emmet abbreviations in the suggestion list in languages that are markup and stylesheet based as well as `javascriptreact`, `typescriptreact` and any other language that has been mapped in the new setting `emmet.includeLanguages`.
  528  
  529:     **Note:** In the `always` mode, the new Emmet implementation is not context aware. For example, if you are editing a JavaScript React file, you will get Emmet suggestions not only when writing markup but also while writing JavaScript.
  530  

  536  
  537: With this release, you can have auto indentation adjustment while typing, moving lines and pasting content in TypeScript, JavaScript, HTML, CSS, JSON or languages that have indentation rules. To enable this feature, set `editor.autoIndent` to `true`. The indentation rules are still under development so let us know if you run into any issues.
  538  

  551  
  552: TypeScript, JavaScript, CSS, HTML and JSON have built-in indentation rules. We don't ship indentation rules for other languages yet but if you use an extension which defines rules for another language, you will see the `editor.autoIndent` feature working.
  553  

release-notes/v1_16.md:
   17  
   18: * **[JavaScript/TypeScript refactoring](#javascript-and-typescript-refactorings)** - Easily extract source code into methods and functions.
   19  * **[HTML tag auto close](#html-close-tags)** - Improved editor productivity with automatic close tags.

  177  
  178: ### JavaScript and TypeScript refactorings
  179  
  180: The new **Extract method** and **Extract function** code actions allow you to quickly refactor complex JavaScript or TypeScript code into new methods or functions:
  181  

  187  
  188: You can now use write JSDoc type assertions in JavaScript files:
  189  

  196  
  197: This is particularly useful when using `@ts-check` to enable [type checking in your JavaScript code](https://code.visualstudio.com/Docs/languages/javascript#_type-checking).
  198  
  199: ### Better loose JavaScript/TypeScript file isolation
  200  
  201: Loose JavaScript and TypeScript files that are not part of a `jsconfig.json` or `tsconfig.json` project are now split into an implicit project per root folder. Previously, loose files across all root folders in the workspace were grouped into the same implicit project. The change means that you should no longer see suggestions from files in one JavaScript folder showing up in JavaScript files in a different folder.
  202  

  331  We've added support for retrieving loaded scripts (`LoadedSourcesRequest`) and receiving loaded script events (`LoadedSourceEvent`).
  332: **Please note**: VS Code does not yet support this feature in the UI. The newly introduced Loaded Scripts Explorer for JavaScript debugging does not yet use this protocol but we are planning to migrate it to the new protocol.
  333  

  480    *  Replace all instances off "Focussed" with "Focused" except ContextKey [PR #32904](https://github.com/microsoft/vscode/pull/32904)
  481: * [Hearstzhang (@Coresi7)](https://github.com/Coresi7):  Fix #33155: treat .pac file as javascript file [PR #33245](https://github.com/microsoft/vscode/pull/33245)
  482  * [David Lechner (@dlech)](https://github.com/dlech):  Fix spelling in TaskDefinition doc comment [PR #32104](https://github.com/microsoft/vscode/pull/32104)

release-notes/v1_17.md:
   22  * **[Integrated Terminal performance](#integrated-terminal)** - Terminal rendering is up to 45 times faster.
   23: * **[Automatic import suggestions](#import-path-quick-suggestions-in-javascript-and-typescript)** - See module and path import suggestions while coding.
   24  * **[Debugging shows source location](#debug-console-messages-show-source-location)** - Easily navigate from the Debug Console to source code.

   26  * **[Improved multiple SCM support](#source-control)** - New UI to view changes in multiple source control repositories.
   27: * **[New online documentation](#new-documentation)** - Java language, 'Tips and Tricks', and Debugging Recipes topics.
   28  * **[Preview: Multi-root workspaces](#preview-multi-root-workspaces)** - No reload on workspace updates, combined view of available tasks.

  107  
  108: * TypeScript/JavaScript:  `//#region` and `//#endregion`  and `//region` and `//endregion`
  109  * C#: `#region` and `#endregion`

  138  
  139: The VS Code snippet engine now supports variable transformations. Transformations can change the value of a variable before inserting it. The format is `var_name/regular_expression/format_string/options`. The sample below is a snippet that creates a public Java class whose name is derived from the filename.
  140  

  144      "body": [
  145:       "public class ${1:${TM_FILENAME/(.*)\\.java/${1:/capitalize}/}} {",
  146        "\tpublic $1 (${2:params}) {",

  154  
  155: The new part is this: `${TM_FILENAME/(.*)\\.java/${1:/capitalize}/}` and this is what it does:
  156  
  157: 1. Resolve the value for `TM_FILENAME`, for example `myClass.java`.
  158: 2. Use the regular expression `/(.*)\\.java` to create a matching group for everything that precedes the `.java` ending, for example `myClass`.
  159  3. Take the value of the first matching group, ensure it start with capital letters (`/capitalize`), and insert it (`MyClass`).

  280  
  281: ### Import path quick suggestions in JavaScript and TypeScript
  282  
  283: JavaScript and TypeScript have provided IntelliSense for import paths ever since VS Code 1.9. However, you may not have known about this feature because it required manually triggering IntelliSense while typing the import. With VS Code 1.17, we now automatically show module and path suggestions as soon as you start typing an `import` or `require` path:
  284  

  290  
  291: ![Dark+ colorization of a JavaScript regular expression](images/1_17/regexp-colorization-improvements.png)
  292  

  304  
  305: The extract method and extract function refactoring for JavaScript and TypeScript will now automatically trigger a rename on the extracted method or function.
  306  

  312  
  313: ### JavaScript and TypeScript IntelliSense now supports Markdown
  314  
  315: Suggestions and parameter hints for JavaScript and TypeScript can now render Markdown content.
  316  

  320  
  321: JavaScript expressions inside of JSX tags now are correctly marked as being of the JavaScript language. This fixes a number of bugs around basic language features such as bracket matching and code commenting.
  322  

  374  
  375: ### Java language support
  376  
  377: A new [Java](https://code.visualstudio.com/docs/languages/java) language topic describes how to install and use the [Java Extension Pack](https://marketplace.visualstudio.com/items?itemName=vscjava.vscode-java-pack) for great Java code intelligence and debugging support in VS Code.
  378  

  428  
  429: We have extended the API for `CompletionItems` and `SignatureHelp` such that documentation can be provided as `MarkdownString`. This allows for fancy rendering, embedded code snippets, and links to further documentation. Our own TypeScript and JavaScript extension is already using `MarkdownString`.
  430  

release-notes/v1_18.md:
   22  * **[Several performance improvements](#performance-improvements)** - Faster Windows start-up and editor performance tuning.
   23: * **[Auto imports for JS/TS](#auto-import-for-javascript-and-typescript)** - Relevant imports are added as you call local symbols.
   24: * **[Extract local variable for JS/TS](#extract-local-refactoring-for-javascript-and-typescript)** - Refactor a new local variable based on your selection.
   25  * **[Install @types for TypeScript](#install-types-quick-fix-for-typescript)** - A new Quick Fix adds missing @types files to your project.

  138  
  139: ### Auto Import for JavaScript and TypeScript
  140  
  141: Speed up your coding with auto imports for JavaScript and TypeScript. The suggestion list now includes all exported symbols in the current project. Just start typing:
  142  

  150  
  151: ### Localizable error messages and Quick Fix descriptions for JavaScript and TypeScript
  152  
  153: JavaScript and TypeScript error messages and Quick Fix descriptions are now displayed in your current [display language](https://code.visualstudio.com/docs/getstarted/locales):
  154  

  158  
  159: ### Extract local refactoring for JavaScript and TypeScript
  160  
  161: VS Code 1.18 adds several new JavaScript and TypeScript refactorings in addition to the extract method refactoring added in VS Code 1.16. The extract constant refactoring creates a new local variable for the currently selected expression:
  162  

  187  
  188: Quick suggestions are disabled inside of strings and comments by default. In some cases, such as in JavaScript template strings, a string or comment may contain blocks of code where quick suggestions should be enabled. Grammars can now hint that VS Code should re-enable quick suggestions by adding a `meta.embedded` scope on tokens inside of a string or comment:
  189  

  357    env: {
  358:     JAVA_HOME: '<path>'
  359    }

  457  * [Yemi Bedu @ P&R (@pr-yemibedu)](https://github.com/pr-yemibedu):  expand editor code region styles - fsharp [PR #35919](https://github.com/microsoft/vscode/pull/35919)
  458: * [Raj (@prog-rajkamal)](https://github.com/prog-rajkamal):  Fix #35322: Modernize javascript snippets [PR #35444](https://github.com/microsoft/vscode/pull/35444)
  459  * [jmdowns2 (@jmdowns2)](https://github.com/jmdowns2): Fix overlapping of emmet expansions in multi cursor mode [PR #35463](https://github.com/microsoft/vscode/pull/35463)

release-notes/v1_19.md:
  297  
  298: ### Java topics
  299  
  300: There is new set of [Java](https://code.visualstudio.com/docs/java/java-tutorial) topics showing how to use the [Java Extension Pack](https://marketplace.visualstudio.com/items?itemName=vscjava.vscode-java-pack) for debugging, cloud deployment, and Azure Functions development.
  301  

  324  
  325: The yeoman generators for TypeScript and JavaScript extensions now provide additional options to enable more checking of your extensions. For TypeScript extensions the generator provides options to setup [TSLint](https://palantir.github.io/tslint/) and to enable the `strict` TypeScript [compiler options](https://www.typescriptlang.org/docs/handbook/compiler-options.html).
  326  
  327: For JavaScript, there is a prompt to enable the [`checkJS`](https://github.com/microsoft/TypeScript/wiki/Type-Checking-JavaScript-Files) option which enables type checking in JavaScript files.
  328  

  409  
  410: * [Abinav Seelan (@abinavseelan)](https://github.com/abinavseelan):  Add logging snippets for Javascript & typescript [PR #37889](https://github.com/microsoft/vscode/pull/37889)
  411  * [David Valachovic (@AdenFlorian)](https://github.com/AdenFlorian):  Support middle mouse click on folding decorator to recursively toggle folding [PR #38727](https://github.com/microsoft/vscode/pull/38727)

release-notes/v1_20.md:
   26  * **[Debugging support for multi-root workspaces](#improved-debugging-support-for-multi-root-workspaces)** - Manage configurations across multiple projects.
   27: * **[Quick Fix all for JavaScript/TypeScript](#quick-fix-all-for-javascript-and-typescript)** - Apply the same Quick Fix to all occurrences in a file.
   28  * **[New Node.js deployment tutorials](#new-documentation)** - Deploy your Node.js app with Docker or Azure App Service.

  160  
  161: VS Code now supports global snippets meaning snippets that aren't scoped to a single language but can target any kind of files. Using the  **Preferences: Configure User Snippets** command, select the **New Global Snippets file...** option which will open a `.code-snippets` file for new snippets.  Use the `scope` attribute to list the languages that are targeted by a snippet. For instance, the snippet below can add a copyright header for JavaScript and TypeScript files:
  162  

  164  "JS & TS Stub": {
  165:   "scope": "javascript,typescript",
  166    "prefix": "stub",

  482  
  483: ### Quick Fix all for JavaScript and TypeScript
  484  
  485: Fix errors in a flash with new Quick Fix all for JavaScript and TypeScript. Move your cursor to a fixable error such as an unused variable, and trigger Quick Fixes using the lightbulb or by pressing `kb(editor.action.quickFix)`. If one of the available Quick Fixes can be applied to multiple errors in the current file, you'll see a new **Fix all in file** Code Action.
  486  

  494  
  495: Spaces got you down? When you type `.`, VS Code now shows all known properties for JavaScript and TypeScript, even if a property name contain whitespaces or other non-identifier characters.
  496  

  504  
  505: Tired of typing `this.` to access class properties in JavaScript and TypeScript? Now you can just start typing to see available members.
  506  

  518  
  519: JavaScript users will also see `?` for completions that come from `*.d.ts` Type Declaration (typings) packages.
  520  

  522  
  523: Auto-imports for JavaScript and TypeScript now support importing default exported objects based on filename:
  524  

  528  
  529: [TypeScript plugins](https://github.com/microsoft/TypeScript/wiki/Writing-a-Language-Service-Plugin) let developers extend VS Code's JavaScript and TypeScript language support. For example, a TypeScript plugin might add additional linting to a file or add IntelliSense when working within JavaScript template strings.
  530  

  924  * [Felix Becker (@felixfbecker)](https://github.com/felixfbecker):  Run hygiene in a dedicated Travis job [PR #41372](https://github.com/microsoft/vscode/pull/41372)
  925: * [Deleted user (@ghost)](https://github.com/ghost):  Revert - move striping logic back to javascript [PR #41905](https://github.com/microsoft/vscode/pull/41905)
  926  * [Sindre Tellevik (@graknol)](https://github.com/graknol):  Git branches sorted by committerdate, latest first. [PR #38563](https://github.com/microsoft/vscode/pull/38563)

  986    * Allow alt+F4 to close window in integrated terminal on Windows Fixes #35646 [PR #40953](https://github.com/microsoft/vscode/pull/40953)
  987:   * Revert - move striping logic back to javascript for running extensions [PR #42022](https://github.com/microsoft/vscode/pull/42022)
  988    * Add time variables for snippets [PR #41653](https://github.com/microsoft/vscode/pull/41653)

release-notes/v1_22.md:
   20  * **[New Hint suggestions](#hints-in-the-editor)** - Makes it easy to spot suggested fixes or refactorings in the editor.
   21: * **[Convert to ES6 refactoring](#suggestion-code-actions-for-javascript-and-typescript)** - New Code Actions to convert to ES6 classes and modules.
   22  * **[Auto attach to process](#node-debugging)** - Automatically attach the debugger to running Node.js processes.

   27  * **[Improved updates on Windows](#automatic-background-updates-on-windows)** - Automatically updates in the background for less downtime.
   28: * **[Preview: Organize JS/TS imports](#organize-imports-for-javascript-and-typescript)** - Remove unused and sort remaining imports.
   29  

   51  
   52: Support for TypeScript and JavaScript is also available, and can be enabled by the setting `"typescript.experimental.syntaxFolding": true`.
   53  

   85  
   86: > **Tip**: In this release, we have added several hints for JavaScript/TypeScript [refactorings](#suggestion-code-actions-for-javascript-and-typescript).
   87  

  353  
  354: ### Suggestion Code Actions for JavaScript and TypeScript
  355  
  356: We've also improved discoverability of JavaScript and TypeScript suggestion Code Actions. These are proposed changes that can help you quickly improve or clean up your source code. They are shown using the lightbulb widget but unlike Quick Fixes, they do not address a specific error or warning in your source code. Example suggestion Code Actions include: convert ES5 class to ES6 class and convert CommonJS module to ES6 module.
  357  

  371  
  372: Suggestion Code Actions are enabled by default in JavaScript and TypeScript. You can disable them by setting: `"typescript.suggestionActions.enabled": false` or `"javascript.suggestionActions.enabled": false`
  373  

  560  
  561: ### Organize imports for JavaScript and TypeScript
  562  

  566  
  567: The command works in ES6 modules for both JavaScript and TypeScript.
  568  

release-notes/v1_23.md:
   38  * **[Debugging](#debugging)** - Logpoint expressions support smart completions and displaying structured objects.
   39: * **[Languages](#languages)** - JavaScript/TypeScript Organize Imports action, persistent Markdown previews.
   40  * **[Extension Authoring](#extension-authoring)** - New webview and FileSystem Provider APIs, 'Source' file level actions.

   61  
   62: The new `editor.codeActionsOnSave` setting lets you configure a set of Code Actions that are run when a file is saved. For example, for JavaScript, TypeScript, and other extensions that contribute an organize imports Code Action, you can enable organize imports on save by [setting](https://code.visualstudio.com/docs/getstarted/settings):
   63  

  230  
  231: ### JavaScript and TypeScript Organize Imports
  232  
  233: The JavaScript and TypeScript organize imports feature is now out of preview. Run **Organize Imports** (`kb(editor.action.organizeImports)`) to quickly remove unused imports and sort the remaining imports in your JavaScript and TypeScript source code.
  234  

  653    * Error with stack trace [PR #637](https://github.com/microsoft/vscode-chrome-debug/pull/637)
  654: * [Alexey Velikiy (@jonyrock)](https://github.com/jonyrock):  change format 'json' to 'javascript' in code [PR #640](https://github.com/microsoft/vscode-chrome-debug/pull/640)
  655  

release-notes/v1_24.md:
   19  
   20: * **[Unused variable detection](#highlight-unused-variables-and-imports)** - Unused variables are grayed-out in your JavaScript/TypeScript files.
   21  * **[Move to new file refactoring](#move-to-new-file-refactoring)** - Easily pull classes and functions into their own files.
   22: * **[Update imports on move/rename](#update-import-paths-when-a-file-is-moved-or-renamed)** - Automatically update import paths in JavaScript/TypeScript.
   23  * **[Duplicate workspace in new window](#duplicate-workspace-in-new-window)** - Great for expanding over multi-mon setups.

   38  * **[Debugging](#debugging)** - Switch to debug view on break, Go to Next/Previous Breakpoint.
   39: * **[Languages](#languages)** - JavaScript/TypeScript getter/setter refactoring, SCSS @-keyword completions.
   40  * **[Extension Authoring](#extension-authoring)** - Expanded custom views API, Task API to stable, new theme colors.

  197  
  198: VS Code can now automatically update import paths when a JavaScript or TypeScript file is moved or renamed:
  199  

  201  
  202: This feature requires TypeScript 2.9. By default, VS Code will prompt you if we can update paths. You can control the prompting behavior with the `javascript.updateImportsOnFileMove.enabled` and `typescript.updateImportsOnFileMove.enabled` settings.
  203  

  209  
  210: To make sure all paths are updated as expected, make sure your project includes a [`jsconfig.json`](https://code.visualstudio.com/Docs/languages/javascript#_javascript-projects-jsconfigjson) or [`tsconfig.json`](https://code.visualstudio.com/docs/languages/typescript#_tsconfigjson).
  211  

  213  
  214: Unused variables, parameters, and imports are now greyed out in JavaScript and TypeScript:
  215  

  225  
  226: This can be disabled by setting `"javascript.showUnused": false` and `"typescript.showUnused": false`.
  227  

  229  
  230: A new **Move to a new file** refactoring for JavaScript and TypeScript lets you quickly move classes and functions to their own file:
  231  

  249  
  250: A new **Generate 'get' and 'set' accessors** refactoring lets you quickly encapsulate a field in JavaScript and TypeScript:
  251  

  261  
  262: Syntax aware folding is now enabled by default for JavaScript and TypeScript. A preview of this feature first shipped with VS Code 1.22 but there were a few bugs that we wanted to fix before turning it on for everyone.
  263  

  266  ```json
  267: "[javascript]": {
  268    "editor.foldingStrategy": "indentation"
  269  },
  270: "[javascriptreact]": {
  271    "editor.foldingStrategy": "indentation"

  282  
  283: You can now explicitly specify the quote and path styles that VS Code uses for auto imports and other generated JavaScript and TypeScript code.
  284  
  285: The new `javascript.preferences.quoteStyle` and `typescript.preferences.quoteStyle` settings specify the type of quotes to use.
  286  

  292  
  293: The `javascript.preferences.importModuleSpecifier` and `typescript.preferences.importModuleSpecifier` settings specify the type of path to use for imports.
  294  

  304  
  305: Blocks of import statements are now foldable in JavaScript and TypeScript:
  306  

  441  
  442: We've noticed that some extensions written in TypeScript are still using the older task version `0.1.0` to compile TypeScript to JavaScript. Task version `2.0.0` has been out for a while and there is a [guide](https://code.visualstudio.com/docs/extensions/developing-extensions#_compiling-typescript) describing how to update an extension from using task version `0.1.0` to version `2.0.0`.
  443  

release-notes/v1_25.md:
  205  
  206: Last release brought automatic import path updating when you move or rename a JavaScript or TypeScript file. This feature now also works when you move or rename a directory. Again, by default, VS Code will prompt you if we can update paths. You can control the prompting behavior with the `javascript.updateImportsOnFileMove.enabled` and `typescript.updateImportsOnFileMove.enabled` settings.
  207  

  508  ```js
  509: // Inside a webview's JavaScript
  510  const vscode = acquireVsCodeApi();

release-notes/v1_26.md:
   23  * **[Terminal column selection](#column-selection)** - Alt+click to select blocks of text in the integrated terminal.
   24: * **[Add all missing imports](#add-all-missing-imports-quick-fix)** - Single action to add all missing imports in a JavaScript/TypeScript file.
   25: * **[JSX tag completion](#jsx-tag-completion)** - Work with JSX tags in JavaScript/TypeScript just like you do in HTML.
   26  * **[Better JS/TS error reporting](#better-error-reporting)** - Concise, clear messages with relevant source code links.

  186  
  187: The TypeScript team has done a lot of work to make JavaScript and TypeScript error messages smarter and clearer. Some error messages now include links to relevant locations in the source code.
  188  

  200  
  201: JSX tags are now closed automatically when you type `>` in a JavaScript or TypeScript file:
  202  

  204  
  205: This behavior matches what VS Code already provided in HTML files. Auto closing of tags can be disabled by setting `"javascript.autoClosingTags": false` and `"typescript.autoClosingTags": false`.
  206  

  208  
  209: The **Add missing import** Quick Fix can now be applied to all missing imports in a JavaScript/TypeScript file:
  210  

  214  
  215: To use this Quick Fix in JavaScript files, [enable semantic checking](https://code.visualstudio.com/docs/languages/javascript#_type-checking).
  216  

  224  
  225: Two new refactorings let you quickly convert between named imports and namespace imports in JavaScript and TypeScript:
  226  

  351      "ms-dotnettools.csharp",
  352:     "vscjava.vscode-java-debug"
  353  ]

release-notes/v1_27.md:
  518  * **Spanish:** Alejandro Medina, José M. Aguilar, Roberto Fonseca, Javier Moreno, Andy Gonzalez, Alberto Poblacion, Nancy Todd, Antonio Sanmartín.
  519: * **Telugu:** Hari Jujjavarapu, Sridhar L.
  520  

release-notes/v1_28.md:
   73    "description": "Adds copyright...",
   74:   "scope": "javascript,typescript"
   75  }

  208  
  209: * If you have enabled Emmet in JavaScript files, then you can now have Emmet abbreviation expansion inside the `<script>` tags in an HTML file.
  210  * The **Emmet: Wrap with Abbreviation** feature is no longer restricted to files with the `.html` extension.

  297  
  298: ![Renaming an JavaScript import to rename a file](images/1_28/ts-rename-import.gif)
  299  

  301  
  302: The new **Convert to async function** suggestion for JavaScript and TypeScript rewrites functions that use `.then` Promise chaining to use `async` and `await`:
  303  

  305  
  306: > Note that this feature requires that the setting `javascript.validate.enable` is set to true.
  307  

  309  
  310: We've cleaned up the settings names for JavaScript and TypeScript suggestions, and added a few additional settings that provide finer grained control:
  311  
  312: * All suggestion related settings are now under `javascript.suggest.*` and `typescript.suggest.*`.
  313: * `typescript.useCodeSnippetOnMethodSuggest` has be renamed to `javascript.suggest.completeFunctionCalls` and `typescript.suggest.completeFunctionCalls`.
  314: * `javascript.nameSuggestions` has been renamed to `javascript.suggest.names`.
  315: * `typescript.autoImportSuggestions.enabled` has been renamed to `javascript.suggest.autoImports` and `typescriptscript.suggest.autoImports`.
  316: * The new `javascript.suggest.enabled` and `typescript.suggest.enabled` let you completely disable JS or TS suggestions.
  317  

  319  
  320: Semicolon is now a commit character for JavaScript and TypeScript suggestions. This means that you can accept that current suggestion just by typing `;`. Existing commit characters also include `.` and `(`.
  321  

release-notes/v1_29.md:
   53  
   54: It is also now possible to use [backreferences](https://www.regular-expressions.info/backref.html) and [lookahead](https://www.regular-expressions.info/lookaround.html) assertions in regex searches, by setting `"search.usePCRE2": true`. This configures [ripgrep](https://github.com/BurntSushi/ripgrep) to use the [PCRE2](https://pcre.org/) regex engine. While PCRE2 supports many other features, we only support regex expressions that are still valid in JavaScript, because open editors are still searched using the editor's JavaScript-based search.
   55  

   57  
   58: If you are still missing lookbehind assertions, don't worry! That feature is just recently supported by JavaScript and should come to VS Code in a later Electron shell update.
   59  

  264  
  265: The following picture from the Node.js debugger shows the TypeScript source for JavaScript files (as available in source maps):
  266  

  954  * **Tamil:** Nadar Solomon Sunder, Sarath Jasrin, Sakthi Raj, rajakvk, Avinash, ஜெகன் லங்கா சாமி துரை, Anand AV, Jeyanthinath Muthuram, Narayanan Singaram.
  955: * **Telugu:** Rama Chandu, Hari Jujjavarapu, Sai Pavan Koundinya Upadhyayula.
  956  * **Ukrainian:** Svitlana Galianova, Borys Lebeda, Dmytro Kyrychuk, Victor Kubrak, Volodymyr Holovka.

release-notes/v1_30.md:
   25  * **[Snippet comment variables](#snippet-comment-variables)** - Snippet variables insert correct comment per language.
   26: * **[JS/TS callback display](#improved-display-of-javascript-and-typescript-callbacks)** - Now you can see the context of anonymous callbacks.
   27  * **[JSDoc Markdown highlighting](#highlighting-of-markdown-elements-in-jsdoc-comments)** - Including syntax highlighting for Markdown code blocks in JSDoc.

   96  
   97: The snippet below inserts `/* Hello World */` in JavaScript files and `<!-- Hello World -->` in HTML files
   98  

  101      "hello": {
  102:         "scope": "javascript,html",
  103          "prefix": "hello",

  136  
  137: ### Improved display of JavaScript and TypeScript callbacks
  138  
  139: JavaScript and TypeScript anonymous callbacks were all previously labeled as `<function>` in the Outline view, breadcrumbs view, and document symbol list. This made it impossible to tell which function you were really after:
  140  

  148  
  149: Renames now handle JavaScript and TypeScript destructuring and will introduce an alias if needed:
  150  

  158  
  159: This Quick Fix works in TypeScript and in [type checked JavaScript](https://code.visualstudio.com/docs/languages/javascript#_type-checking).
  160  

  162  
  163: Building on [work in VS Code 1.29](https://code.visualstudio.com/updates/v1_29#_file-and-folder-icons-in-intellisense), the IntelliSense widget now shows file icons for JavaScript and TypeScript path suggestions:
  164  

  338  
  339: VS Code runs extensions in a separate Node.js process – the extension host. This isolates extension code from VS Code itself, but it doesn’t isolate different extensions from each other. Due to the single threaded nature of JavaScript, an extension can, willingly or not, monopolize the extension host thread, block all other extensions, and make operations appear unresponsive.
  340  

  621  
  622: When VS Code started, JavaScript wasn't what it is today. For instance, there was no [native promise](https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Promise) and back then the team decided to use `WinJS.Promise`. Fast forwarding to today, the situation is different: native promises are real and `WinJS.Promise` is obsolete.
  623  

release-notes/v1_31.md:
  697  
  698: When VS Code started, JavaScript wasn't what it is today. For instance, there were no native promises and so the team decided to use `WinJS.Promise` for asynchronous work. Today, the situation is different: native promises are real and `WinJS.Promise` is obsolete. Midway through last year, we started an effort to remove `WinJS.Promise` from the codebase, which we completed in December.
  699  

  747  
  748: ### Improved JavaScript and TypeScript documentation
  749  
  750: We've refreshed our JavaScript and TypeScript articles to make sure they are up-to-date and provide more helpful information.
  751  
  752: The [JavaScript](https://code.visualstudio.com/docs/languages/javascript) and [TypeScript](https://code.visualstudio.com/docs/languages/typescript) pages now provide an overview of the features that VS Code offers for these languages. More detailed explanations of these features and tutorials have been moved to new pages under **Node.js / JavaScript** and **TypeScript** respectively in the table of contents.
  753  

release-notes/v1_32.md:
  211  
  212: ```javascript
  213  var express = require('express');

  375  
  376: VS Code is written TypeScript, and TypeScript is compiled into JavaScript. TypeScript can target different JavaScript versions and with this release, we target ES6 JavaScript. ES6 is much closer to TypeScript and produces less code, which means faster loading times.
  377  
  378: **Note:** This means our JavaScript output uses [classes](https://developer.mozilla.org/docs/Web/JavaScript/Reference/Classes) as defined in JavaScript. We have a utility in place that still allows functions to "extend" from those classes and we have created a [tracking item](https://github.com/microsoft/vscode/issues/68698) for extensions authors to now emit ES6 as well. Everything should still work as before but we encourage everyone to get on the ES6 train.
  379  

  417  
  418: ### Working with JavaScript
  419  
  420: A new [Working with JavaScript](https://code.visualstudio.com/docs/nodejs/working-with-javascript) article describes advanced JavaScript features supported by VS Code. You'll learn the benefits of adding [JavaScript project files](https://code.visualstudio.com/docs/nodejs/working-with-javascript#_javascript-projects-jsconfigjson) (jsconfig.json) to your code as well as how to enable [type checking](https://code.visualstudio.com/docs/nodejs/working-with-javascript#_type-checking-javascript).
  421  

release-notes/v1_33.md:
   83  ```json
   84: "[javascript]": {
   85    "editor.defaultFormatter": "HookyQR.beautify"

  108  "header": {
  109:   "scope": "javascript,typescript",
  110    "prefix": "workspace",

release-notes/v1_34.md:
   87  
   88: The [Vetur](https://github.com/vuejs/vetur) extension now offers semantic diagnostics, hover information, jump to definition, and find references for the JavaScript expression inside Vue's template interpolation region:
   89  
   90: ![Vetur JavaScript support in interpolations](images/1_34/vetur-interpolation.gif)
   91  

  290  
  291: * [Tony Xia (@tony-xia)](https://github.com/tony-xia): JavaScipt -> JavaScript [PR #18](https://github.com/microsoft/node-jsonc-parser/pull/18)
  292  

release-notes/v1_35.md:
  22  * **[Breadcrumb navigation displayed by default](#breadcrumbs-displayed)** - Quickly go to files and symbols via breadcrumbs.
  23: * **[Smart selection for JavaScript/TypeScript](#smart-selection-for-javascript-and-typescript)** - Expand text selection based on language semantics.
  24  * **[Extract to type alias TypeScript refactoring](#extract-to-type-alias-refactoring-for-typescript)** - Extract part type into its own type alias.

  67  
  68: VS Code now ships with [TypeScript 3.5.1](https://devblogs.microsoft.com/typescript/announcing-typescript-3-5/). This update brings TypeScript language improvements, along with tooling enhancements for both JavaScript and TypeScript. It also fixes a number of important bugs, including fixes for performance issues that some users were seeing when working with styled-components.
  69  
  70: ### Smart selection for JavaScript and TypeScript
  71  
  72: JavaScript and TypeScript now support [smart selection](https://code.visualstudio.com/updates/v1_33#_smart-select-api). This feature uses semantic knowledge to intelligently expand selections for expressions, types, statements, classes, and imports:
  73  

  96  
  97: ### JavaScript and TypeScript suggestion sorting
  98  
  99: We've tuned our suggestion sorting for JavaScript and TypeScript to more heavily prioritize suggestions for local variables over suggestions for globals or auto-imports:
  100  

release-notes/v1_36.md:
   25  * **[Disable debug console word wrap](#disable-console-word-wrap)** - Lets you keep debugging output to one line.
   26: * **[JavaScript/TypeScript nightly builds](#javascript-and-typescript-nightly-extension)** - New extension integrates JS/TS nightly builds.
   27: * **[New Java installer](#installer-for-java-developers)** - Installs VS Code, the Java extension pack, and required Java dependencies.
   28  * **[Remote Development (Preview) improvements](#remote-development-preview)** - Save to local file system, drag and drop files to remotes, and more.

  166  
  167: ### Use syntax only feature of JavaScript and TypeScript more quickly
  168  
  169: VS Code's JavaScript and TypeScript language features is powered by a [TypeScript server](https://github.com/microsoft/TypeScript/wiki/Standalone-Server-%28tsserver%29). This server powers complex features such as IntelliSense and error reporting, along with simpler features such as code folding and document outlines.
  170  
  171: Features such as IntelliSense require that the TypeScript server evaluate the entire JavaScript or TypeScript project before it can return any results, and this can take time for larger projects. While this processing is happening, the server is not able to handle any other requests, including requests for simple features like code folding that only require a basic semantic understanding of the current file. You may have seen this issue if you've ever noticed a delay before code folding or the document outline become available.
  172  

  204  
  205: ### JavaScript and TypeScript nightly extension
  206  
  207: The new [JavaScript and TypeScript nightly extension](https://marketplace.visualstudio.com/items?itemName=ms-vscode.vscode-typescript-next) uses the nightly build of TypeScript (typescript@next) for VS Code's built-in TypeScript version, which powers JavaScript and TypeScript IntelliSense. This makes it easy to test the latest TypeScript features and provide feedback about them!
  208  

  212  
  213: ### Installer for Java developers
  214  
  215: There is a new [Visual Studio Code Installer for Java](https://devblogs.microsoft.com/visualstudio/announcing-visual-studio-code-java-installer/) to help first-time developers set up their Java environment. When you [run the Java Pack Installer](https://aka.ms/vscode-java-installer-win), it automatically detects whether the JDK (Java Development Kit), Visual Studio Code, and required extensions are already installed. If not, the installer can download and configure the missing dependencies for you. You can also use the installer to add the Java-related components to your existing Visual Studio Code installation.
  216  
  217: ![The Java installer UI](images/1_36/java-installer.png)
  218  
  219: With the Java extensions installed, Visual Studio Code provides comprehensive Java development features such as smart code completion, refactoring, debugging, and testing as well as project management and application server integration.
  220  

release-notes/v1_37.md:
   74  
   75: Back in the 1.29 release, we added the setting `search.usePCRE2` to make search use the PCRE2 regex engine. This enabled searching with some advanced regex features such as [backreferences](https://www.regular-expressions.info/backref.html) and [lookahead](https://www.regular-expressions.info/lookaround.html) assertions. Thanks to some upstream work in [ripgrep](https://github.com/BurntSushi/ripgrep), you can now use these features without enabling a special setting. ripgrep will fall back to the PCRE2 engine automatically if the regex uses a feature that isn't supported by the Rust regex engine, and `search.usePCRE2` is now deprecated. As a reminder, VS Code only supports regexes that are valid in JavaScript, because open editors are still searched using the editor's JavaScript-based search.
   76  

  209  
  210: ### Use syntax only feature of JavaScript and TypeScript more quickly
  211  
  212: Last release, [we added an experimental setting](https://code.visualstudio.com/updates/v1_36#_use-syntax-only-feature-of-javascript-and-typescript-more-quickly) that splits the TypeScript server that powers VS Code's JavaScript and TypeScript language features into separate syntax and semantic servers.
  213  
  214: With VS Code 1.37, the split server is now enabled by default. This means that for large JavaScript and TypeScript projects, syntax-based operations, such as code folding or document outlines, should be available more quickly.
  215  

  251  
  252: ### Java supports smart selection
  253  
  254: The [Microsoft Java extension](https://marketplace.visualstudio.com/items?itemName=vscjava.vscode-java-pack) now supports [smart semantic selection](https://code.visualstudio.com/docs/java/java-editing#_smart-selection). You can expand or shrink the selection range based on the semantic information of the caret position in your source code.
  255  

release-notes/v1_38.md:
  219  
  220: VS Code now ships with TypeScript 3.6.2. This major update brings some TypeScript language improvements—including [stricter generators](https://devblogs.microsoft.com/typescript/announcing-typescript-3-6/#stricter-generators) and [support for `import.meta`](https://devblogs.microsoft.com/typescript/announcing-typescript-3-6/#import-meta-support-in-systemjs), as well as some new tooling features for both JavaScript and TypeScript. As always, this release also includes a number of important bug fixes.
  221  

  227  
  228: ![Detect missing calls to await in JavaScript using @ts-check and Quick Fix them](images/1_38/js-await-quickfix.gif)
  229  
  230: This Quick Fix is available in TypeScript and JavaScript source code that has [type checking enabled](https://code.visualstudio.com/Docs/languages/javascript#_type-checking).
  231  
  232: ### Semicolon aware editing for JavaScript and TypeScript
  233  
  234: When you add an import or apply a refactoring in JavaScript or Typescript source code, VS Code now tries to infer whether or not to  include semicolons from existing code in the file:
  235  

  241  
  242: Previously, our JavaScript and TypeScript IntelliSense would combine multiple JSDoc comments if they appeared before a definition. In the example below, notice how the documentation for the `User` type is merged with that of the `getUser` function:
  243  

release-notes/v1_39.md:
  267  
  268: * Syntax highlighting of optional chaining and nullish coalescing in JavaScript and TypeScript files.
  269  * Completion support for optional chaining.
  270: * Control over semicolons with the new `javascript.format.semicolons` and `typescript.format.semicolons` settings.
  271  

  295  
  296: Here you can see that the [Java extension](https://marketplace.visualstudio.com/items?itemName=redhat.java) is using `SymbolTag.Deprecated` to show source code that references deprecated types or members with a strike-through line.
  297  
  298: ![Java deprecated method](images/1_39/java-deprecated-method.png)
  299  

  431  
  432: ### JavaScript minification via terser
  433  
  434: We changed the minifier used for minification of JavaScript for the product build to be [terser](https://github.com/terser/terser). Previously we had been using an older version of `uglify-es`. The terser developers have been very helpful supporting us during the adoption.
  435  

  461  
  462: The [Node.js deployment tutorials](https://code.visualstudio.com/docs/azure/deployment) have moved to the [Azure JavaScript Developer Center](https://learn.microsoft.com/azure/developer/javascript) on [learn.microsoft.com](https://learn.microsoft.com).
  463  

  465  
  466: * [Deploy Azure Functions](https://learn.microsoft.com/azure/developer/javascript/tutorial/azure-function-cosmos-db-mongo-api)
  467  * [Deploy to Azure App Service](https://learn.microsoft.com/azure/app-service/tutorial-nodejs-mongodb-app)
  468: * [Deploy Docker containers](https://learn.microsoft.com/azure/developer/javascript/tutorial/tutorial-vscode-docker-node/tutorial-vscode-docker-node-01)
  469  * [Create a static website](https://learn.microsoft.com/azure/static-web-apps/getting-started)

release-notes/v1_40.md:
  138  "editor.fontLigatures": true,
  139: "[javascript]": {
  140    "editor.fontLigatures": "'ss02', 'ss19'",

  143  
  144: The above settings configure the editor to use the **Fira Code** font family, turn on font ligatures for all languages, and in JavaScript files enable the 'Horizontal Bar' ('ss02') and the 'Dotted zero' ('ss19') font feature settings. These make the `>=` ligature render with a horizontal bar and the `0` render with a dot inside it in JavaScript:
  145  

  507  
  508: You can start using TypeScript 3.7 features in VS Code today by installing the [JavaScript and TypeScript Nightly extension](https://marketplace.visualstudio.com/items?itemName=ms-vscode.vscode-typescript-next).
  509  

  574  * [Jonas Platte (@jplatte)](https://github.com/jplatte): linux/bin/code.sh: use command -v instead of which [PR #82097](https://github.com/microsoft/vscode/pull/82097)
  575: * [JavaScript Joe (@jsjoeio)](https://github.com/jsjoeio): fix: remove TypeScript from ExtensionSuggestions [PR #82125](https://github.com/microsoft/vscode/pull/82125)
  576  * [Jesús Alonso Abad (@Kencho)](https://github.com/Kencho): Perl5 support to fold POD blocks [PR #71448](https://github.com/microsoft/vscode/pull/71448)

release-notes/v1_41.md:
   26  * **[HTML mirror cursor in tags](#html-mirror-cursor)** - Automatic multi-cursor in matching HTML tags.
   27: * **[Optional chaining in JS/TS](#optional-chaining-support-for-javascript-and-typescript)** - Use the `?.` operator to simplify working with nested structures.
   28  * **[Extract interface refactoring](#extract-interface-refactoring-for-typescript)** - Quickly extract an inline type to a TypeScript interface.

   38  
   39: In the File Explorer, we now render single child folders in a compact form. In such a form, single child folders will be compressed in a combined tree element. Useful for Java package structures, for example.
   40  

  188  
  189: Last milestone, we have added the capability to filter certain types, like variables, from the Outline view and breadcrumbs navigation. This release refines this features and allows language-specific filtering, for example don't show TypeScript variables but do show JavaScript variables.
  190  
  191: Below you can see how the `value` constant is displayed in the Outline view for the JavaScript file but not the TypeScript version.
  192  

  348  
  349: VS Code now ships with TypeScript 3.7.3. This major update brings some TypeScript language improvements - including [optional chaining](https://devblogs.microsoft.com/typescript/announcing-typescript-3-7/#optional-chaining), [nullish coalescing](https://devblogs.microsoft.com/typescript/announcing-typescript-3-7/#nullish-coalescing), and [assertion functions](https://devblogs.microsoft.com/typescript/announcing-typescript-3-7/#assertion-functions) - as well as some new tooling features for both JavaScript and TypeScript. As always, this release also includes a number of important bug fixes.
  350  

  352  
  353: ### Optional chaining support for JavaScript and TypeScript
  354  
  355: Thanks to TypeScript 3.7, VS Code now supports [option chaining](https://developer.mozilla.org/docs/Web/JavaScript/Reference/Operators/Optional_chaining) out of the box for both JavaScript and TypeScript. This includes syntax highlighting and IntelliSense:
  356  

  362  
  363: Automatic insertion of `?.` depends on [strict null checking](https://www.typescriptlang.org/docs/handbook/release-notes/typescript-2-0.html#--strictnullchecks) being enabled. Automatic `?.` insertion can be disabled with the `"typescript.suggest.includeAutomaticOptionalChainCompletions"` or `"javascript.suggest.includeAutomaticOptionalChainCompletions"` settings.
  364  

  374  
  375: ### Semicolon formatter options for JavaScript and TypeScript
  376  
  377: The new `javascript.format.semicolons` and `typescript.format.semicolons` formatting settings let you control how the formatter handles semicolons in JavaScript and TypeScript files.
  378  

  412  
  413: Below you can see quickly starting to debug an Express JavaScript application and then creating a `launch.json` file if more control is needed.
  414  

  465  
  466: ### JavaScript Debugger
  467  

  837  * [Wojciech Buczek (@Wowol)](https://github.com/Wowol): Add support of relative paths for git.ignoredRepositories [PR #83466](https://github.com/microsoft/vscode/pull/83466)
  838: * [ZHAO Jinxiang (@xiaoxiangmoe)](https://github.com/xiaoxiangmoe): Add .cjs to known JavaScript file extensions [PR #85460](https://github.com/microsoft/vscode/pull/85460)
  839  

release-notes/v1_42.md:
   25  * **[Define global tasks](#user-level-tasks)** - Per user tasks can be used across all your folders and workspaces.
   26: * **[Java extension updates](#contributions-to-extensions)** - Java support for Data Breakpoints and Call Hierarchy view.
   27  * **[Remote Development](#remote-development)** - New Forwarded Ports view for mapping SSH and Containers ports.

   40  
   41: ![Rename preview](images/1_42/preview-rename-java.gif)
   42  

  393  
  394: ### Semantic highlighting for TypeScript & JavaScript
  395  
  396: Semantic highlighting support for TypeScript and JavaScript is in development and not yet enabled by default. You can try it out by adding the following setting:
  397  

  409  
  410: ### New JavaScript debugger
  411  
  412: We've been working on a new debugger for Node.js and Chrome. It's installed by default on Insiders, and can be installed [from the Marketplace](https://marketplace.visualstudio.com/items?itemName=ms-vscode.js-debug-nightly) in VS Code Stable. You can start using it with your existing launch configurations by enabling the `debug.javascript.usePreview` setting. Below are some of the new features we added this month.
  413  
  414: The new JS debugger will automatically debug commands you run in the new JavaScript Debug terminal, which you can open via the **Debug: Create JavaScript Debug Terminal** command:
  415  
  416: ![JavaScript debug terminal](images/1_42/js-debug-terminal.gif)
  417  

  421  
  422: ![JavaScript debug CodeLens](images/1_42/js-debug-code-lens.png)
  423  
  424: You can configure the visibility and location (top or inline) of the CodeLens via the `debug.javascript.codelens.npmScripts` setting.
  425  

  451  
  452: * IntelliSense and syntax highlighting of [private fields](https://devblogs.microsoft.com/typescript/announcing-typescript-3-8-beta/#ecmascript-private-fields) in JavaScript and TypeScript files.
  453: * Call Hierarchy support for JavaScript and TypeScript.
  454  * The convert to template string refactoring!

  459  
  460: ### Java debugger supports Data Breakpoints
  461  
  462: The [Debugger for Java](https://marketplace.visualstudio.com/items?itemName=vscjava.vscode-java-debug) extension now supports [Data Breakpoints](https://code.visualstudio.com/updates/v1_38#_debugging), introduced in VS Code 1.38. This feature allows you to create breakpoints that will get hit when the value of a variable changes.
  463  

  465  
  466: ![Java Data Breakpoints](images/1_42/data-breakpoints.png)
  467  
  468: ### Java Call Hierarchy view
  469  
  470: The [Language Support for Java](https://marketplace.visualstudio.com/items?itemName=redhat.java) extension now supports a [Call Hierarchy](https://code.visualstudio.com/updates/v1_40#_extension-authoring) view, which shows all calls from or to a function and allows you to drill into callers of callers and call of calls.
  471  

  473  
  474: ![Java Call Hierarchy view](images/1_42/call-hierarchy.png)
  475  

release-notes/v1_43.md:
   27  * **[Display whitespace on selection](#render-whitespace-on-selection)** - Render whitespace characters only in selected text.
   28: * **[Convert to template string](#convert-to-template-string-refactoring)** - Convert concatenations to JavaScript/TypeScript template strings.
   29: * **[JS/TS Call Hierarchy view](#call-hierarchy-support-for-javascript-and-typescript)** - Review all calls to or from a function and drill into callers of callers.
   30  * **[Remote Development](#remote-development)** - Support for Windows and macOS SSH hosts, SSH connection sharing.

  185  
  186: >**Note**: File operations, like renaming a file, are not yet supported. For example, renaming a class name in Java (where the file name gets renamed as well) is not yet supported with cross-file undo.
  187  

  245  
  246: You can use the new **Convert to template string** refactoring for JavaScript and TypeScript to quickly convert string concatenations to [template strings](https://developer.mozilla.org/docs/Web/JavaScript/Reference/Template_literals):
  247  

  249  
  250: ### Call hierarchy support for JavaScript and TypeScript
  251  
  252: TypeScript 3.8 brings [call hierarchy](https://code.visualstudio.com/updates/v1_33#_call-hierarchy) support in JavaScript and TypeScript.
  253  

  261  
  262: `@link` to URLs work for both JavaScript and TypeScript and are rendered as clickable links in hovers, suggestion details, and signature help.
  263  

  265  
  266: Semantic highlighting is now on by default for TypeScript and JavaScript. Semantic highlighting is provided by the TypeScript language server and goes on top of the syntax highlighting based on TextMate grammars. The default syntax (TextMate) highlighter classifies many tokens as `variables` and these are now resolved into namespaces, classes, parameters, and so on.
  267  

  302  
  303: The VS Code Debug Console now supports **output grouping**. Debug extensions can indicate when Debug Console output should be grouped together under a common parent. For now, only the Mock Debug extension implements output grouping, but soon other debug extensions will follow - most notably the JavaScript debugger.
  304  

  404  
  405: ### New JavaScript debugger
  406  
  407: This month we've continued making progress on our new JavaScript debugger. It's installed by default on Insiders, and can be installed [from the Marketplace](https://marketplace.visualstudio.com/items?itemName=ms-vscode.js-debug-nightly) in VS Code Stable. You can start using it with your existing launch configurations by enabling the `debug.javascript.usePreview` setting. Here are some new features we added this month:
  408  

  416  
  417: You can turn off the suggestion prompt by selecting **Never**, or changing the setting `debug.javascript.suggestPrettyPrinting` to `false`.
  418  

  654  
  655: For example, here's how our built-in JavaScript and TypeScript extension contributes documentation:
  656  

release-notes/v1_44.md:
  236  
  237: ### Auto import style in JavaScript
  238  
  239: The new `javascript.preferences.importModuleSpecifierEnding` setting lets you control the style of imports that VS Code's auto imports use. This can be useful if you are writing code for platforms such as browsers that support native ES6 modules.
  240  

  242  
  243: * `auto` - The default. Uses the project's [jsconfig](https://code.visualstudio.com/docs/nodejs/working-with-javascript#_javascript-projects-jsconfigjson) to determine the import style to use.
  244  * `minimal` - Use's Node.js style imports. This shortens imports for `src/component/index.js` to `src/component`.

  300  
  301: ### New JavaScript debugger
  302  
  303: This month we've continued making progress on our new JavaScript debugger. It's installed by default on Insiders, and can be installed [from the Marketplace](https://marketplace.visualstudio.com/items?itemName=ms-vscode.js-debug-nightly) in VS Code Stable. You can start using it with your existing launch configurations by enabling the `debug.javascript.usePreview` setting. Here are some new features added this month:
  304  

  306  
  307: You could use the debug terminal (**Debug: Create JavaScript Debug Terminal**) to automatically debug any Node.js process. Now, the debugger also handles links to start debugging your browser whenever you `Cmd/Ctrl+Click` on links, no configuration needed.
  308  

  324  * Refactorings that better preserve newlines and formatting.
  325: * Auto imports in JavaScript can now add common JS style imports (`require(...)`).
  326  

  428  "semanticTokenColors": {
  429:     "variable.declaration.readonly:java": { "foreground": "#00ff00" "fontStyle": "bold" }
  430  }

  432  
  433: The rule above defines that all declarations of readonly variables in Java should be colored green and bold.
  434  

  440  
  441: * All symbols from the JavaScript default library get a `defaultLibrary` modifier.
  442  * Function parameters that are callbacks are classified as `function`.

  558  collection.prepend('PATH', `/foo${separator}`);
  559: collection.replace('JAVA_HOME', '/bar');
  560  ```

  730  * **Czech** David Knieradl.
  731: * **Danish (Denmark)** Javad Shafique, Lasse Stilvang.
  732  * **English (United Kingdom)** Martin Littlecott, Oren Recht, Faris Ansari.

release-notes/v1_45.md:
   26  * **[Remote Development](#remote-development)** - Container configuration recommendations, WSL 2 support.
   27: * **[JavaScript debugger preview](#new-javascript-debugger)** - CPU profiling, improved Auto Attach to Node.js processes.
   28  * **[New Docker Compose topic](#docker-compose)** - Learn how to use Docker Compose to work with multiple containers.

   79  
   80: You can now customize semantic theming rules in your user settings. Semantic coloring is available for TypeScript and JavaScript, with support for Java and C++ under development. It is enabled by default for built-in themes and is being adopted by theme extensions.
   81  

  180  
  181: The following screen cast shows the feature for the new JavaScript debugger (in preview) and our educational Mock Debug:
  182  

  256  
  257: ### New JavaScript debugger
  258  
  259: This month we continued making progress on our new JavaScript debugger. It's installed by default on Insiders, and can be installed [from the Marketplace](https://marketplace.visualstudio.com/items?itemName=ms-vscode.js-debug-nightly) in VS Code stable. You can start using it with your existing launch configurations by enabling the `debug.javascript.usePreview` setting.
  260  

  274  
  275: When `debug.javascript.usePreview` is turned on, VS Code's [Auto Attach](https://code.visualstudio.com/docs/nodejs/nodejs-debugging#_auto-attach-feature) will use a new method provided by `js-debug` that allows all terminals to work similarly to the Debug Terminal.
  276  

  298  
  299: ### TypeScript/JavaScript symbol search across all open projects
  300  
  301: When using TypeScript 3.9+, VS Code's [workspace symbol search](https://code.visualstudio.com/docs/editor/editingevolved#_open-symbol-by-name) now includes results from all opened JavaScript and TypeScript projects by default. We previously only searched the project of the currently active file.
  302  

  549  
  550: ### Java topics
  551  
  552: The Java topics have been updated and include new topics on [Linting](https://code.visualstudio.com/docs/java/java-linting) and [Refactoring](https://code.visualstudio.com/docs/java/java-refactoring) Java source code using the [Java extensions](https://marketplace.visualstudio.com/items?itemName=vscjava.vscode-java-pack).
  553  

  694  * **Czech** David Knieradl.
  695: * **Danish (Denmark)** Javad Shafique, Lasse Stilvang.
  696  * **English (United Kingdom)** Martin Littlecott, Oren Recht, Faris Ansari.

release-notes/v1_46.md:
   24  * **[Automatic debugger configuration](#automatic-debug-configurations-improvements)** - Save and modify generated debug configurations.
   25: * **[JavaScript CommonJS auto imports](#commonjs-auto-imports)** - Auto imports will now use `require` for CommonJS modules.
   26  * **[JS/TS refactorings preserve newlines](#refactorings-preserve-newlines)** - Formatting is preserved during refactoring operations.

  153  
  154: VS Code currently recognizes CR (Carriage Return), LF (Line Feed), and CRLF as line terminators. Some programming languages have different definitions for what constitutes a line terminator. This varies across languages, for example LS (Line Separator) and PS (Paragraph Separator) are line terminators in C# and JavaScript, but not in HTML, PHP, or Java. These line ending differences can cause problems when VS Code communicates with a language server, since various concepts are communicated between VS Code and the language server using `(line;char)` coordinates. If there are different definitions of a line terminator, it can result in different mappings of lines and locations in the file.
  155  

  244  
  245: If VS Code detects that you are working in a CommonJS style JavaScript module, [auto imports](https://code.visualstudio.com/docs/languages/javascript#_auto-imports) will now use `require` instead of `import`.
  246  

  250  
  251: Refactorings for JavaScript and TypeScript, such as **Extract to method** and **Move to new file**, now try to preserve the original formatting of the refactored source code. This includes any newlines present in the selection:
  252  

  256  
  257: VS Code has long supported a Quick Fix that adds all missing imports in a JavaScript or TypeScript file. This iteration, we introduced a new **Add all missing imports** source action that lets you trigger this from anywhere in a file.
  258  

  283  
  284: By default, [workspace symbol search](https://code.visualstudio.com/docs/editor/editingevolved#_open-symbol-by-name) for JavaScript and TypeScript now searches all opened `jsconfig` and `tsconfig` projects. It previously only included search results from the project the focused file belonged to.
  285  

  289  
  290: The **Adding missing import** Quick Fix for JavaScript and TypeScript can now be [marked as the preferred fix](https://code.visualstudio.com/docs/editor/refactoring#_keybindings-for-code-actions) for an error. This lets you add the missing import with a single keypress using `kb(editor.action.autoFix)`.
  291  
  292: Note that **Adding missing import** will only be marked as the preferred fix if there is a single valid import. If there are multiple potential imports in your projects, you still need to use the normal Code Actions menu to select which import to use. Also, to enable **Add missing import** Quick Fixes in JavaScript, you must [enable type checking](https://code.visualstudio.com/docs/nodejs/working-with-javascript#_type-checking-javascript).
  293  

  380  
  381: ### New JavaScript debugger
  382  
  383: This month we continued making progress on our new JavaScript debugger. Since mid-May, it has become the default debugger on Insiders, and is included (but not enabled by default) on VS Code Stable in this release. You can start using it with your existing launch configurations by enabling the `debug.javascript.usePreview` setting.
  384  

  388  * **Improved tab disambiguation:** The debug session names more accurately disambiguate multiple tabs. Additionally, we added a **Focus Tab** action in the context menu for the debug session in the Call Stack view, which you can use to make sure you're looking at the right page.
  389: * **Option to auto-expand getters:** Matching the behavior of Chrome, property getters are not evaluated by default when shown in the Variables view or the Debug Console. You can now configure this behavior by setting the `debug.javascript.autoExpandGetters` option.
  390  * **Performance improvements for types of webpack bundles:** Certain types of webpack bundles, those built with `eval` sourcemaps, ran slowly under js-debug. They no longer do so.

  590  collection.prepend('PATH', `/foo${separator}`);
  591: collection.replace('JAVA_HOME', '/bar');
  592  ```

  803    * Add stepping granularities to the step requests. [PR #112](https://github.com/microsoft/debug-adapter-protocol/pull/112)
  804: * [Vitalii Akimov (@awto)](https://github.com/awto): Effectful JavaScript debugger reference in adapters.md [PR #113](https://github.com/microsoft/debug-adapter-protocol/pull/113)
  805  * [@tomcec](https://github.com/tomcec): Update adapters.md [PR #115](https://github.com/microsoft/debug-adapter-protocol/pull/115)

release-notes/v1_47.md:
   25  * **[Windows ARM builds](#stable-windows-arm-builds)** - Windows on ARM is now available in stable.
   26: * **[New JavaScript debugger](#new-javascript-debugger)** - Debug in the terminal, profiling support.
   27  * **[Source Control unified view](#single-view)** - All repositories displayed in a single view.

   32  * **[Remote Development tutorials](#remote-development)** - Learn to develop over SSH, inside Containers, and in WSL.
   33: * **[Java Pack Installer for macOS](#java-pack-installer-for-macos)** - Get set up to develop in Java with VS Code on macOS.
   34  

  132  
  133: ### New JavaScript Debugger
  134  
  135: Our new JavaScript debugger, after being the default debugger on Insiders last month, is now the default debugger for JavaScript (Node.js and Chrome) in VS Code. If you skipped the "Preview Features" section of the last few VS Code changelogs, you can catch up on the [what's new section](https://github.com/microsoft/vscode-js-debug#whats-new) of the debugger README.
  136  

  156  
  157: The first debug extension that has opted into this feature is the new JavaScript debugger, which could eliminate a parent debug session whenever there is only a single child session.
  158  

  251  
  252: ### Partial IntelliSense support while large JavaScript or TypeScript projects are loading
  253  
  254: The TypeScript 4.0 beta also brings a new feature that should help reduce the time you spend waiting while a large JavaScript or TypeScript project is being loading. To explain how this works, we first need to cover a little background on how current versions of TypeScript work.
  255  
  256: When you open a JavaScript or TypeScript file in VS Code, the TypeScript language service determines which project that file belongs to and then loads the associated project for it. Sometimes this project can be quite large, such as with the core VS Code codebase, which consists of many thousands of TypeScript files. While a project is being loaded, VS Code able to handle basic syntax operations, such as getting the document outline and enabling code folding, but it cannot currently provide IntelliSense or other more advanced language features because they depend on understanding the entire project. In order to provide auto imports, for example, the TypeScript language service needs to know all exported symbols in a project.
  257  

  259  
  260: If you work with large JavaScript and TypeScript projects, we are interested in hearing your feedback on this new feature. You can try it today using the  [TypeScript nightly extension](https://marketplace.visualstudio.com/items?itemName=ms-vscode.vscode-typescript-next). Our hope is that it allows you to start work with your code almost instantly until the more complete, project-wide IntelliSense becomes available.
  261  

  263  
  264: We are working on being able to undo and redo Code Actions and refactorings. A prominent example is the Java class rename refactoring, which makes a textual change as well as renaming the file on disk. This can now be undone but it still requires triggering undo two times. Stay tuned as we further improve this and please provide early feedback.
  265  

  319  
  320: * [Debugging in a JavaScript Notebook](https://github.com/microsoft/vscode-nodebook/blob/main/README.md) sample
  321  

  323  
  324:   ![Running and evaluating JavaScript Notebook cells](images/1_47/debugging-in-nodebook.gif)
  325  

  517  
  518: ### Java Pack installer for macOS
  519  
  520: The [Visual Studio Code for Java Pack Installer](https://aka.ms/vscode-java-installer-mac) downloads the necessary dependencies and extensions for Java development in Visual Studio Code on macOS.
  521  
  522: ![Java Pack installer for macOS](images/1_47/java-installer-macos.png)
  523  

release-notes/v1_48.md:
   28  * **[New Dev Container topics](#new-dev-container-topics)** - Learn how to attach to a container and create a new dev container.
   29: * **[Java lightweight mode](#java-lightweight-mode)** - Start working with your Java source files more quickly.
   30  

  106  
  107: You can adjust the debug configuration used in this command via the `debug.javascript.debugByLinkOptions` setting.
  108  
  109: ### JavaScript Debugger improvements
  110  
  111: The previous release of VS Code included our new JavaScript debugger. We'd like to thank the community for your feedback on it, and this release includes dozens of resulting [fixes and improvements](https://github.com/issues?q=is%3Aopen+is%3Aclosed+label%3Abug+assignee%3Aconnor4312+milestone%3A%22July+2020%22). If you run into any issues with debugging, please make sure to [file an issue](https://github.com/microsoft/vscode-js-debug/issues/new/choose) if you haven't already.
  112  

  301  
  302: ### Java lightweight mode
  303  
  304: The [Language Support for Java](https://marketplace.visualstudio.com/items?itemName=redhat.java) extension now supports a [lightweight mode](https://code.visualstudio.com/docs/java/java-project#_lightweight-mode), for when you want to quickly work with your Java source files. You'll still get powerful language features such as code completion, navigation, outlining, and syntax checking for your source code, as well as the JDK.
  305  

release-notes/v1_49.md:
   27  * **[Filter Debug Console output](#debug-console-filter)** - Quickly filter and find debugging output.
   28: * **[Improved JS debugger Auto Attach](#javascript-debugger-improvements)** - "Smart" Auto Attach to Node.js scripts or test runners.
   29  * **[TypeScript optional chaining refactoring](#convert-to-optional-chain-refactoring)** - Convert multiple checks to a concise optional chain.
   30: * **[JSDoc @deprecated tag support](#deprecated-tag-support-for-javascript-and-typescript)** - IntelliSense clearly shows APIs marked as deprecated.
   31  * **[Notebook UX updates](#notebooks)** - Cell Status bar contributions, enhanced notebook diff editor.

  140  
  141: ### JavaScript debugger improvements
  142  

  150  
  151: You can switch back to the old behavior, or choose to debug **all** Node.js scripts, using the **debug.javascript.autoAttachFilter** setting. If you want to change when the "smart" mode attaches, you can configure it in the **debug.javascript.autoAttachSmartPattern** setting.
  152  

  156  
  157: Previously, the stack trace when logging a JavaScript error like `console.log(error)` would show the locations in your compiled code. If sourcemaps are available, VS Code will now process the stack trace to use the source locations. This is useful when debugging web apps that use bundlers like Webpack.
  158  

  166  * When working in a remote (SSH, Containers, or WSL), VS Code did not support attaching to browsers already running locally; this is now fixed.
  167: * You can now choose to stop if a conditional breakpoint throws an error by toggling the **debug.javascript.breakOnConditionalError** setting.
  168  

  184  
  185: ### Deprecated tag support for JavaScript and TypeScript
  186  
  187: VS Code now supports the `@deprecated` JSDoc tag in JavaScript and TypeScript files. To mark an API as deprecated, simply add a `@deprecated` JSDoc comment:
  188  

  207  
  208: VS Code can now show why a requested JavaScript/TypeScript refactoring cannot be applied:
  209  

  215  
  216: We are now better at searching your installed npm packages for potential JavaScript and TypeScript auto imports. Packages that are listed in your `package.json` dependencies are now scanned for imports even if they are not yet referenced anywhere in your codebase. This can be especially helpful after you've installed a new package and want to start using it.
  217  

  223  
  224: To explain how this feature works, you first need to understand how VS Code worked previously. When you open a JavaScript or TypeScript file in VS Code, the TypeScript language service tries to load the project that file belongs to. Sometimes this project can be quite large, such as with the core VS Code codebase, which consists of many thousands of TypeScript files. While a project is being loaded, VS Code is able to handle basic syntax operations—such as getting the document outline and enabling code folding—but it previously could not provide IntelliSense or other more advanced language features because they depend on understanding the entire project.
  225  

  227  
  228: Partial mode IntelliSense will only be used while a project is loading. Once the project as loaded, VS Code will automatically switch over to full IntelliSense. If you work with large JavaScript or TypeScript projects, partial IntelliSense should let you start working with your code almost instantly until more complete, project-wide IntelliSense becomes available.
  229  

  296  
  297: Take the following Java exception for example:
  298  
  299  ```
  300: Exception in thread "main" java.lang.ArrayIndexOutOfBoundsException: 9
  301:     at MyProgram.main(MyFile.java:10)
  302  ```
  303  
  304: Using terminal link providers, it is now possible to have a link for `java.lang.ArrayIndexOutOfBoundsException` that goes to API documentation and create links for the symbols `MyProgram` or `main`.
  305  

  420  
  421: ![Java variables context menu](images/1_49/java-variables.png)
  422  

  434  
  435: Typically, menu contributions in the Variables view should only apply to a specific debug type. This can be easily achieved by adding a `when` clause to the contribution. Here is one for Java:
  436  
  437  ```js
  438: "when": "debugConfigurationType == 'java'"
  439  ```

  450            "command": "variables-view.showArrayAsCustomDataView",
  451:           "when": "debugConfigurationType == 'java' &&
  452                       debugProtocolVariableMenuContext == 'array'"

  514  * [101110](https://github.com/microsoft/vscode/issues/101110): Allow to configure workbench.editor.restoreViewState per language
  515: * [102199](https://github.com/microsoft/vscode/issues/102199): JavaScript debugging: run to cursor can skip to next statement if cursor is after semicolon
  516  * [103052](https://github.com/microsoft/vscode/issues/103052): Order of files in "Search files by name" results is incorrect

release-notes/v1_50.md:
   23  * **[Improved debugging experience](#debugging)** - Improved hover and filtering in debug console.
   24: * **[New JS debugger features](#javascript-debugging)** - Toggle auto attach flows and see performance in real-time.
   25  * **[Panel layout improvements](#panel-layout-improvements)** - New panel maximization settings and bottom panel size.

  143  
  144:   While debugging, the debug hover takes precedence over the language hover, making it impossible to see the language hover. Starting with this release, you can switch from the debug hover back to the language hover by holding down the `Alt` modifier key. As long as `Alt` is pressed, the language hover is shown instead of the debug hover. This makes it much easier to read Javadoc while debugging.
  145  

  157  
  158: ### JavaScript debugging
  159  

  161  
  162: Last month, we introduced [new auto attach modes](https://code.visualstudio.com/docs/nodejs/nodejs-debugging#_auto-attach-feature) as an experimental feature. This month, they have left the experimental state. The previous **debug.autoAttach** setting is deprecated in favor of the **debug.javascript.autoAttachFilter** option. The auto attach badge in the status bar now shows the current mode and allows you to toggle between modes.
  163  

  165  
  166: The [flame chart extension](https://marketplace.visualstudio.com/items?itemName=ms-vscode.vscode-js-profile-flame) will now show a real-time view of performance metrics while debugging JavaScript code. CPU and memory usage are shown for Node.js programs and extension debugging. Debugging Chrome or Edge will additionally show metrics for DOM nodes, relayouts, and restyles.
  167  

  283  
  284: The **[Template String Converter](https://marketplace.visualstudio.com/items?itemName=meganrogge.template-string-converter)** extension converts quotes to backticks when a `$` and `{` are entered within a string in JavaScript and TypeScript files.
  285  

release-notes/v1_51.md:
  154  
  155: ### Empty brace formatting option for JavaScript and TypeScript
  156  
  157: The new `javascript.format.insertSpaceAfterOpeningAndBeforeClosingEmptyBraces` and `typescript.format.insertSpaceAfterOpeningAndBeforeClosingEmptyBraces` formatting configuration option controls if spaces are inserted between empty braces. The default value for these settings is true. For example, for the JavaScript:
  158  
  159: ```java
  160  class Foo {

  164  
  165: Setting `"javascript.format.insertSpaceAfterOpeningAndBeforeClosingEmptyBraces": false` and formatting the code results in:
  166  
  167: ```java
  168  class Foo {

release-notes/v1_52.md:
  217  
  218: For now, only the Mock Debug extension has (fake) Exception Breakpoint condition support, but soon other debug extensions will follow - such as the JavaScript debugger.
  219  

  241  
  242: There is now help text on the bottom of the debug hover to make the `kbstyle(Alt)` switch to editor language hover while debugging more discoverable. As a reminder, when you are debugging, the debug hover takes precedence over the language hover, making it impossible to see the language hover. You can switch from the debug hover back to the language hover by holding down the `kbstyle(Alt)` modifier key. As long as `kbstyle(Alt)` is pressed, the language hover is shown instead of the debug hover. This makes it much easier to read hovers like Javadoc descriptions while debugging.
  243  

  279  
  280: ### JavaScript debugger
  281  

  289  
  290: There is a user setting, `debug.javascript.defaultRuntimeExecutable`, which allows you to specify the default locations of Node.js or Chrome binaries. For example, `{ "pwa-chrome": "dev" }` will use the "dev" build of Chrome whenever you debug with Chrome-type configurations.
  291  

  483  
  484: This release of VS Code includes [TypeScript 4.1.2](https://devblogs.microsoft.com/typescript/announcing-typescript-4-1). This major TypeScript update brings support for a number of new language features—including [template literal types](https://devblogs.microsoft.com/typescript/announcing-typescript-4-1/#template-literal-types) and support for [React 17's factories—as improving language tooling for JavaScript and TypeScript. As always, it also includes a number of bug fixes.
  485  

  512  
  513: There are two new settings that control IntelliSense and type checking behavior in JavaScript and TypeScript files that are not part of an explicit tsconfig or jsconfig project.
  514  

  518  
  519:   Strict null checks are also helpful while working in JavaScript. When strict null checks are enabled, hover and IntelliSense information will show which types can `undefined` and `null`. If you [enable type checking in your JavaScript](https://code.visualstudio.com/Docs/languages/javascript#_type-checking), VS Code can also use strict null checks to catch some common programming mistakes.
  520  

  528  
  529: The other implicit project settings for JavaScript and TypeScript have been renamed to make them more accurate:
  530  
  531: * `javascript.implicitProjectConfig.checkJs` -> `js/ts.implicitProjectConfig.checkJs`
  532: * `javascript.implicitProjectConfig.experimentalDecorators` -> `js/ts.implicitProjectConfig.experimentalDecorators`
  533  
  534: These settings were renamed because they apply to both JavaScript and TypeScript files that are not part of a jsconfig or tsconfig project. The previous setting names suggested they only applied to JavaScript files.
  535  

  844  
  845: Did you know you can run VS Code on a Chromebook? We think this is a great option for students and beginning programmers. Learn how to set up VS Code on Chrome OS (via [Crostini](https://chromeos.dev/en/linux)) with our [Learning with VS Code on Chromebook](https://code.visualstudio.com/blogs/2020/12/03/chromebook-get-started) blog post, which includes instructions on getting started with coding using JavaScript and Python.
  846  

  887  * [Jonathan Belcher (@belcherj)](https://github.com/belcherj): Fix composition logic for Firefox [PR #106873](https://github.com/microsoft/vscode/pull/106873)
  888: * [@BTNDev](https://github.com/BTNDev): updated javascript for in snippet [PR #111062](https://github.com/microsoft/vscode/pull/111062)
  889  * [Borja Zarco (@bzarco)](https://github.com/bzarco): Don't fail when resolving config variables without a `folderUri`. [PR #97203](https://github.com/microsoft/vscode/pull/97203)
  890  * [@chanmaoooo](https://github.com/chanmaoooo): add 'deleteWordEntire' command [PR #109511](https://github.com/microsoft/vscode/pull/109511)
  891: * [chenjigeng (@chenjigeng)](https://github.com/chenjigeng): Fixed Hover style incorrect when writing javascript in HTML [PR #111110](https://github.com/microsoft/vscode/pull/111110)
  892  * [@dataleaky](https://github.com/dataleaky): Update package.json [PR #111661](https://github.com/microsoft/vscode/pull/111661)

release-notes/v1_53.md:
   24  * **[Customize search mode](#default-search-mode)** - Use the Search view or open a new Search editor.
   25: * **[JavaScript debugging](#javascript-debugger)** - Support for conditional exception breakpoints and Node.js worker_threads.
   26  * **[Notebook UX updates](#notebooks)** - Outline view for Notebook cells, and breadcrumbs for improved navigation.

   84  
   85: Extensions can participate when you create, move, rename, or delete files. This is useful when automatically running refactorings, for example, when you rename a Java file and also need to rename its public class.
   86  

  130  {
  131:   "scope": "javascript",
  132    "prefix": "newVars",

  160  
  161: Note that while the new UI supports editing of all breakpoint types, conditions, and hit counts are only respected if a debug extension actually supports them. Currently, we are not aware of any debuggers supporting conditions and hit counts for function breakpoints, but we expect some support soon. For exception breakpoints, condition support has been added to the built-in JavaScript debugger in this release.
  162  

  182  
  183: When debugging an extension, calls to `console` APIs are now processed through the built-in JavaScript debugger, which allows for richer representation of complex objects like source mapped stacktraces.
  184  
  185: ### JavaScript debugger
  186  

  190  
  191: [Conditional exception breakpoints](https://code.visualstudio.com/updates/v1_52#_support-for-conditional-exceptions) are now supported in the JavaScript debugger. The `error` variable will contain the currently thrown exception:
  192  

  302  
  303: If you are using TypeScript 4.2, you can also try the new **Find References to File** command for JavaScript and TypeScript to find all places where a file is being referenced.
  304  

release-notes/v1_54.md:
  204  
  205: Since this new feature is based on additions to the Debug Adapter Protocol (see below), it requires an opt-in of debug extensions. In this release, only VS Code's built-in JavaScript debugger supports the new feature.
  206  

  234  
  235: VS Code now ships with TypeScript 4.2.2. This major update includes many TypeScript language improvements, along with many improvements and bug fixes for JavaScript and TypeScript tooling.
  236  

  257  
  258: To use this Quick Fix in JavaScript, you must [enable type checking](https://code.visualstudio.com/Docs/languages/javascript#_type-checking).
  259  

  282  
  283: You can disable `@returns` in JSDoc comments with `javascript.suggest.jsdoc.generateReturns` and `typescript.suggest.jsdoc.generateReturns`.
  284  

release-notes/v1_55.md:
  207  Please note that debug extensions have to opt into this feature in order to make individual actions available.
  208: For now, only the Mock Debug extension has (simulated) support for all three access types, but we expect other debug extensions to follow soon - such as the Java extension.
  209  

  217  
  218: ### JavaScript debugging
  219  

  388  
  389: ### VS Code and JavaScript in the classroom
  390  
  391: Read the [case study](https://code.visualstudio.com/learn/educators/nodejs) of a Computer Science lecturer at Naresuan University in Thailand, who uses VS Code in his introductory Web Development classes with JavaScript and Node.js. Learn about the settings and extensions he recommends for his students, as well as a helpful [Node.js and JavaScript Education Extension Pack](https://marketplace.visualstudio.com/items?itemName=tanhakabir.node-js-education-extension-pack).
  392  

  435  - [@DonJayamanne (Don Jayamanne)](https://github.com/DonJayamanne): Repro for bug https://github.com/microsoft/vscode/issues/118470 [PR #118471](https://github.com/microsoft/vscode/pull/118471)
  436: - [@Flanker32 (Hanxiao Liu)](https://github.com/Flanker32): Add comments to add java workspace tags to GDPR inventory [PR #117740](https://github.com/microsoft/vscode/pull/117740)
  437  - [@GitMensch (Simon Sobisch)](https://github.com/GitMensch): rpm-spec: fix the wrong claim about working on EL7 [PR #117994](https://github.com/microsoft/vscode/pull/117994)

release-notes/v1_56.md:
  182  
  183: We have improved the flow if a user wants to start debugging but hasn't installed the necessary language extension that provides debugging support (like Python or Java). When this happens, VS Code now prompts the user to install the appropriate extension.
  184  

  200  
  201: The [Debugger for Java](https://marketplace.visualstudio.com/items?itemName=vscjava.vscode-java-debug) extension is one of the first debugger extensions to adopt the API. In the screenshot below, the accurate values of the Java variables are displayed right next to their usage.
  202  
  203: ![Java extension displaying inline values in the editor while debugging](images/1_56/java-inline-values.png)
  204  

  210  
  211: ### JavaScript debugging
  212  

  224  
  225: [Private class fields](https://developer.mozilla.org/docs/Web/JavaScript/Reference/Classes/Private_class_fields) are now visible and can be inspected in the debugger.
  226  

release-notes/v1_57.md:
   25  * **[Terminal tabs](#terminal-tabs)** - Tabs let you easily create, manage, and group multiple open terminals.
   26: * **[Edge browser debugging](#javascript-debugging)** - Integrates the Microsoft Edge Developer Tools directly into VS Code.
   27  * **[JSDoc @link support](#jsdoc-link-support)** - Add @link tags in your comments for fast symbol navigation.

  382  
  383: ### JavaScript debugging
  384  

  388  
  389: The JavaScript debugger integrates with the Microsoft Edge Developer Tools to provide a DOM, style, and network inspector for browser debugging, accessible via the new "Inspect" icon in the debug toolbar.
  390  

  401  
  402: A long-requested feature, the JavaScript debugger now supports renamed identifiers in sourcemaps. This is particularly useful when debugging minified code:
  403  

  420  
  421: VS Code now ships with TypeScript 4.3.2. This major update includes many TypeScript language improvements, along with many improvements and bug fixes for JavaScript and TypeScript tooling.
  422  

  426  
  427: VS Code now supports [JSDoc @link tags](https://jsdoc.app/tags-inline-link.html) in JavaScript and TypeScript comments. These let you create clickable links to a symbol in your documentation:
  428  

  436  
  437: Auto import in JavaScript and TypeScript automatically add imports when you accept a suggestion. With VS Code 1.57, they now also work when writing an import statement itself:
  438  

  444  
  445: Many modern JavaScript bundlers and frameworks use `import` statements to import assets such as images and stylesheets. We now support navigating through these imports with **Go to Definition**:
  446  

  452  
  453: The **Sort imports** Code Action for JavaScript and TypeScript sorts your imports. Unlike **Organize imports** however, it does not remove any unused imports.
  454  

release-notes/v1_58.md:
  176  
  177: In the short video below, the user selects the Node.js debug environment for debugging a single JavaScript file and that choice is remembered when a new debug session starts for that file.
  178  

  417  
  418: We have updated our TypeScript projects to allow using recent JavaScript APIs, like `Promise.allSettled` or `String.replaceAll`. We also output more modern JavaScript, ES2020, which reduces the overall size of our main bundle slightly.
  419  

release-notes/v1_59.md:
   29  * **[Debug Disassembly view preview](#disassembly-view)** - Display disassembled C++ code in VS Code.
   30: * **[Live Preview extension](#live-preview)** - Live HTML preview within VS Code with JavaScript debugging support.
   31  * **[Dev Containers devcontainer CLI](#dev-containers-devcontainer-cli)** - Command line interface for working with development containers.

  159  
  160: Use the setting `editor.foldingImportsByDefault` to have import statements automatically folded. The fold state is stored once a file has been opened once. The feature works with TypeScript, JavaScript, Java, C#, C++, and with all languages that have a folding range provider that annotates import statements with `FoldingRangeKind.Imports`.
  161  

  235  
  236: ![Debug/run split button shown for Java](images/1_59/run-debug-splitbutton.gif)
  237  

  249  
  250: * Compatibility with the built-in JavaScript debugger for external previews.
  251    * Run **Live Preview: Show Debug Preview** to try it out!

  346  
  347: * Inlay hints for parameter names and types in both JavaScript and TypeScript files.
  348: * Basic spelling suggestions in plain JavaScript files. These are only shown if the TypeScript language service is confident in the error and in the fix.
  349  

  382  
  383: One of the first extensions to adopt the testing API was the Microsoft [Test Runner for Java](https://marketplace.visualstudio.com/items?itemName=vscjava.vscode-java-test) included in the [Extension Pack for Java](https://marketplace.visualstudio.com/items?itemName=vscjava.vscode-java-pack).
  384  
  385: ![Java extension using the native test API in VS Code](images/1_59/java-extension-test-support.png)
  386  

release-notes/v1_60.md:
   27  * **[Notebook improvements](#notebooks)** - Markdown link navigation, faster rendering of large outputs.
   28: * **[JavaScript/TypeScript inlay hints](#inlay-hints-for-javascript-and-typescript)** - Inline hints for parameter names and types, and more.
   29  * **[Locked editor group preview](#locked-editor-groups)** - Keep a preferred editor layout by locking the editor group.

  214  
  215: ### JavaScript debugging
  216  

  220  
  221: With this release, the **old** debuggers have been removed from the product and marked as deprecated on the Marketplace. If you're among the majority of VS Code users who didn't opt out of the new JavaScript debugger, nothing will change for you.
  222  

  264  
  265: Behind the scenes, VS Code stores notebook outputs as binary data using [Uint8Arrays](https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Uint8Array). Previously, when transferring output data between the extension host process and the renderer process, data was first converted to an array of number values and then serialized to JSON.
  266  

  302  
  303: ### Inlay hints for JavaScript and TypeScript
  304  

  312  
  313: To enable parameter name hints, set `javascript.inlayHints.parameterNames.enabled` or `typescript.inlayHints.parameterNames.enabled` settings. There are three possible values:
  314  

  318  
  319: In addition, VS Code also offers inlay hints that show implicit type information in your JavaScript and TypeScript code.
  320  

  322  
  323: Settings - `javascript.inlayHints.variableTypes.enabled` and `typescript.inlayHints.variableTypes.enabled`
  324  

  328  
  329: Settings- `javascript.inlayHints.propertyDeclarationTypes.enabled` and `typescript.inlayHints.propertyDeclarationTypes.enabled`
  330  

  334  
  335: Settings - `javascript.inlayHints.parameterTypes.enabled` and `typescript.inlayHints.parameterTypes.enabled`
  336  

  340  
  341: Settings - `javascript.inlayHints.functionLikeReturnTypes.enabled` and `typescript.inlayHints.functionLikeReturnTypes.enabled`
  342  

  346  
  347: ### Spelling suggestions in JavaScript files
  348  
  349: VS Code now helps you catch simple spelling mistakes in JavaScript files:
  350  

  357  ```json
  358: "javascript.suggestionActions.enabled": false
  359  ```
  360  
  361: For more comprehensive checking, try [enabling full semantic checking in your JavaScript code](https://code.visualstudio.com/docs/nodejs/working-with-javascript#_type-checking-javascript). Not only can this help catch more errors, it also enables several helpful Quick Fixes.
  362  

release-notes/v1_61.md:
  226  
  227: ### New JavaScript and TypeScript language status item
  228  

  230  
  231: ![The JavaScript and TypeScript IntelliSense status item showing config file and TypeScript version](images/1_61/ts-intellisense-status.png)
  232  

  236  
  237: The language status item also shows the current file's `jsconfig/tsconfig` and will indicate if you are currently in [partial mode](https://code.visualstudio.com/docs/nodejs/working-with-javascript#_partial-intellisense-mode).
  238  

  240  
  241: All untitled JavaScript and TypeScript files are now treated as part of the same project. This means that global symbols defined in one untitled file will now show up as suggestions in others.
  242  

  246  
  247: IntelliSense now works across JavaScript and TypeScript files on [vscode.dev](https://vscode.dev) or [github.dev](https://github.dev) when VS Code is running in a browser.
  248  
  249: ![Cross file JavaScript IntelliSense on github.dev](images/1_61/ts-cross-file-github.png)
  250  

  254  
  255: When you fold a JSX tag in JavaScript or TypeScript, VS Code now continues to show the closing tag:
  256  

  470  
  471: ### Controller renderer scripts now use JavaScript modules
  472  
  473: `NotebookController.rendererScripts` lets notebook controllers preload a set of JavaScript files into the notebook before any renderers are run. These scripts can initialize the notebook or define global symbols that the renderers depend on.
  474  
  475: The renderer scripts were previously normal JavaScript files. These scripts could use a global symbol exported by VS Code to call VS Code specific APIs.
  476  
  477: This global symbol was not discoverable and also didn't give VS Code much control over the renderer scripts themselves. To fix that, renderer scripts now use JavaScript modules that export an `activate` function. This function is passed the VS Code API:
  478  

release-notes/v1_62.md:
   85  ```json
   86: "[javascript]": {
   87      "editor.language.brackets": [

  350  * [LuatOS Debug](https://marketplace.visualstudio.com/items?itemName=openluat-wendal.luatos-debug) ([OpenLuat Wendal Chen](https://marketplace.visualstudio.com/publishers/openluat-wendal))
  351: * [JavaScript Assistant: Refactoring Hints & Automation](https://marketplace.visualstudio.com/items?itemName=p42ai.refactor) ([P42](https://marketplace.visualstudio.com/publishers/p42ai))
  352  * [quickstarts-preview](https://marketplace.visualstudio.com/items?itemName=PatternFly.quickstarts-preview) ([PatternFly](https://marketplace.visualstudio.com/publishers/PatternFly))

  371  * [Color Highlight](https://marketplace.visualstudio.com/items?itemName=naumovs.color-highlight) ([Sergii Naumov](https://marketplace.visualstudio.com/publishers/naumovs))
  372: * [shuaihu.html-embedded-javascript](https://marketplace.visualstudio.com/items?itemName=shuaihu.html-embedded-javascript) ([shuaihu](https://marketplace.visualstudio.com/publishers/shuaihu))
  373  * [SCSS Formatter](https://marketplace.visualstudio.com/items?itemName=sibiraj-s.vscode-scss-formatter) ([Sibiraj](https://marketplace.visualstudio.com/publishers/sibiraj-s))

  380  * [Type4Py](https://marketplace.visualstudio.com/items?itemName=saltud.type4py) ([Software Analytics Lab (TU Delft)](https://marketplace.visualstudio.com/publishers/saltud))
  381: * [Java Code Generators](https://marketplace.visualstudio.com/items?itemName=sohibe.java-generate-setters-getters) ([Sohibe](https://marketplace.visualstudio.com/publishers/sohibe))
  382  * [Bash Options](https://marketplace.visualstudio.com/items?itemName=stenalpj.shell-script-options) ([Stenal P Jolly](https://marketplace.visualstudio.com/publishers/stenalpj))

release-notes/v1_63.md:
   28  * **[Pre-release extensions](#pre-release-extensions)** - Try out extension new features and fixes early.
   29: * **[New Java welcome experience](#java)** - To help you configure and learn about Java in VS Code.
   30  * **[More extensions for vscode.dev](#web-extensions)** - Check out recent additions for VS Code for the Web.

   54  
   55: You can now configure language specific editor settings for multiple languages at once. The following example shows how you can customize settings for `javascript` and `typescript` languages together in your `settings.json` file:
   56  
   57  ```json
   58: "[javascript][typescript]": {
   59    "editor.maxTokenizationLineLength": 2500

  164  
  165: You can read ["The Invisible JavaScript Backdoor" blog post](https://certitude.consulting/blog/en/invisible-backdoor/) or [this University of Cambridge article](https://www.trojansource.codes/) for how invisible or confusable Unicode characters can be used in Unicode spoofing attacks.
  166  

  219  
  220: This feature requires TypeScript 4.5 in the workspace and can be enabled/disable using `typescript.suggest.classMemberSnippets.enabled` and `javascript.suggest.classMemberSnippets.enabled`.
  221  

  223  
  224: When completing JSX attributes in JavaScript and TypeScript, VS Code will now automatically insert the attribute value:
  225  

  227  
  228: The behavior of these completions can be configured using `javascript.preferences.jsxAttributeCompletionStyle` and `typescript.preferences.jsxAttributeCompletionStyle`.
  229  

  297  
  298: ### Java
  299  
  300: The [Extension Pack for Java](https://marketplace.visualstudio.com/items?itemName=vscjava.vscode-java-pack) now has an in-product welcome experience to help you configure and learn about Java in VS Code. The walkthroughs cover installing the Java runtime and useful frameworks, opening and debugging your project, and running tests directly inside VS Code.
  301  
  302: ![Extension Pack for Java walkthrough](images/1_63/java-walkthrough.png)
  303  
  304: You can also check out the Java tutorials and user guides at [https://code.visualstudio.com/docs/java](https://code.visualstudio.com/docs/java) to help get you started.
  305  

release-notes/v1_64.md:
  108  
  109: The new search algorithm also prioritizes whole word matches, which means that if one has both the Java and JavaScript extensions, the Java settings will show up first when searching "java".
  110  
  111: ![Settings editor search showing Java results before JavaScript ones when searching "java"](images/1_64/settings-editor-search-java-first.png)
  112  

  277  
  278: Memory viewing and editing relies on the memory-related features of the Debug Adapter Protocol and debug extensions have to implement these features in order to enable the corresponding UI in VS Code. For details, see section [Debugger extension authoring](#debugger-extension-authoring) below. In this release, only the built-in JavaScript debugger supports viewing and editing of binary data, but we expect other debug extensions to follow soon.
  279  
  280: ### JavaScript debugging
  281  

  283  
  284: Sometimes you might set a breakpoint or add a debugger statement, but only want to pause when called from a certain code path. DOM event handlers like `mousemove` are a good example for this. In this release, the JavaScript debugger added the ability to "exclude a caller" from pausing at a breakpoint or debugger statement.
  285  

  327  
  328: Many of the JavaScript and TypeScript snippets have been updated to support surrounding selected text.
  329  

release-notes/v1_65.md:
   26  * **[Source Control diff editor management](#diff-editor-management)** - Automatically close diff editors after Git operations.
   27: * **[Debugger lazy variable evaluation](#lazy-variables)** - Lazy evaluation of JavaScript/TypeScript property getters.
   28  * **[Preview: Terminal shell integration](#terminal-shell-integration)** - Rerun terminal commands, command status decorations.

  149  
  150: Below is an example of using this across JavaScript, TypeScript, Markdown, Python, PHP, and C++ (many more languages are supported):
  151  

  157  
  158: Language feature extension recommendations now take into consideration other prominent language extensions in the Marketplace while recommending. For example, VS Code does not recommend the [Java Extension Pack](https://marketplace.visualstudio.com/items?itemName=vscjava.vscode-java-pack) if you have the [Apache NetBeans Java](https://marketplace.visualstudio.com/items?itemName=ASF.apache-netbeans-java) extension installed.
  159  

  224  
  225: Accessing the value of a variable may have side-effects or be expensive. VS Code's generic debugger can now show a button for the user to fetch the variable value on demand. This is available for debug extensions that support the new ["lazy" variable feature](#debugger-extension-authoring). Currently this has only been implemented by the built-in JavaScript debugger for property getters, but we expect that other debugger extensions will follow soon.
  226  

  264  
  265: ### Syntax error reporting in JavaScript files
  266  
  267: Thanks to TypeScript 4.6, VS Code now reports some common syntax errors in JavaScript files. This includes parsing errors, as well as invalid redeclarations of block scoped variables:
  268  
  269: ![Detecting a redeclaration of a const variable in a JavaScript file](images/1_65/js-syntax-errors.png)
  270  
  271: Previously these errors were only reported when you [enable semantic checking in your JavaScript](https://code.visualstudio.com/docs/languages/javascript#_type-checking).
  272  

  275  ```json
  276: "javascript.validate.enable": false
  277  ```

  280  
  281: More of the JavaScript and TypeScript settings can now be configured as [language-specific settings](https://code.visualstudio.com/docs/getstarted/settings#_languagespecific-editor-settings). Language-specific settings are useful if you want different settings for `javascript` vs `javascriptreact`, for example.
  282  

  284  
  285: * `javascript.preferences.quoteStyle`, `typescript.preferences.quoteStyle`
  286: * `javascript.preferences.importModuleSpecifier`, `typescript.preferences.importModuleSpecifier`
  287: * `javascript.preferences.importModuleSpecifierEnding`, `typescript.preferences.importModuleSpecifierEnding`
  288: * `javascript.preferences.jsxAttributeCompletionStyle`, `typescript.preferences.jsxAttributeCompletionStyle`
  289: * `javascript.preferences.renameShorthandProperties`, `typescript.preferences.renameShorthandProperties`
  290: * `javascript.preferences.useAliasesForRenames`, `typescript.preferences.useAliasesForRenames`
  291: * `javascript.suggest.enabled`, `typescript.suggest.enabled`
  292: * `javascript.suggest.completeJSDocs`, `typescript.suggest.completeJSDocs`
  293: * `javascript.suggest.jsdoc.generateReturns`, `typescript.suggest.jsdoc.generateReturns`
  294: * `javascript.autoClosingTags`, `typescript.autoClosingTags`
  295  

  626  
  627: ### Java GUI applications
  628  
  629: The new [Java GUI Applications](https://code.visualstudio.com/docs/java/java-gui) topic explains how to use the [Extension Pack for Java](https://marketplace.visualstudio.com/items?itemName=vscjava.vscode-java-pack) to develop JavaFX, AWT, and Swing application in VS Code.
  630  

  669  * [VSCode Language JSONata](https://marketplace.visualstudio.com/items?itemName=bigbug.vscode-language-jsonata) ([Markus Gutbrod](https://marketplace.visualstudio.com/publishers/bigbug))
  670: * [Babel JavaScript](https://marketplace.visualstudio.com/items?itemName=mgmcdermott.vscode-language-babel) ([Michael McDermott](https://marketplace.visualstudio.com/publishers/mgmcdermott))
  671  * [Create Project](https://marketplace.visualstudio.com/items?itemName=publictheta.vscode-create-project) ([Public Theta](https://marketplace.visualstudio.com/publishers/publictheta))

release-notes/v1_66.md:
   25  * **[Built-in CSS/LESS/SCSS formatters](#css-formatter)** - Code formatting for CSS, LESS, and SCSS.
   26: * **[JavaScript heap profiles](#javascript-debugging)** - Collect and view JS memory allocations while debugging.
   27  * **[VS Code for the Web](#vs-code-for-the-web)** - Drag and drop files and folders into vscode.dev.

  334  
  335: ### JavaScript debugging
  336  
  337: The JavaScript debugger now supports collecting and visualizing heap profiles. Heap profiles allow you to see where and how much memory is allocated over time. These have been added as an option in the **Debug: Take Performance Profile** command, which is also accessible via a record ⏺ button in the CALL STACK view.
  338  

  353  
  354: ### JavaScript semantic highlighting in HTML
  355  
  356: We've aligned the semantic highlighting of JavaScript source in HTML files with what you see in normal `.js` files.
  357  

  734    * Fix disabled breakpoint icon in disassembly view [PR #143925](https://github.com/microsoft/vscode/pull/143925)
  735: * [@xmedeko (Ondrej Medek)](https://github.com/xmedeko): fix markdownDescription for javascript.suggest.jsdoc.generateReturns [PR #144486](https://github.com/microsoft/vscode/pull/144486)
  736  * [@yume-chan (Simon Chan)](https://github.com/yume-chan): Wait for extension contributions in `welcome.showAllWalkthroughs` [PR #135632](https://github.com/microsoft/vscode/pull/135632)

release-notes/v1_67.md:
   27  * **[Find All References in Markdown](#markdown-find-all-references-to-headers)** - Quickly find all references to headers, files, URLs.
   28: * **[Java extension updates](#java)** - Now supporting inlay hints and lazy variable resolution.
   29  * **[UX Guidelines for extension authors](#ux-guidelines)** - Guidance for VS Code extension UI best practices.

   47  * `explorer.fileNesting.expand` - Controls whether nested files are expanded by default.
   48: * `explorer.fileNesting.patterns` - Controls how files are nested. The default configuration provides nesting intelligence for TypeScript and JavaScript projects, but you're encouraged to modify this to fit your own project's structure. Some examples:
   49  

  393  
  394: ### Java
  395  

  397  
  398: The Java language service included in the [Extension Pack for Java](https://marketplace.visualstudio.com/items?itemName=vscjava.vscode-java-pack) now supports [inlay hints](https://code.visualstudio.com/docs/editor/editingevolved#_inlay-hints) to show parameter names for method signatures.
  399  
  400: ![Java file with parameter name inlay hints displayed for literal arguments, displayed for all arguments, and disabled](images/1_67/java-inlay-hints.gif)
  401  
  402: There are three modes for Java parameter name inlay hints:
  403  

  409  
  410: The [Debugger for Java](https://marketplace.visualstudio.com/items?itemName=vscjava.vscode-java-debug) extension now supports ['lazy' variables](https://code.visualstudio.com/updates/v1_65#_support-for-lazy-variables). This feature lets you defer the operations for an expensive variable until you explicitly expand the debugger UI to see it's value.
  411  
  412: ![Debugger for Java supporting lazy variable resolution during a debugging session](images/1_67/java-lazy-variable.gif)
  413  

  515  
  516: * Jump directly to a JavaScript implementation of a library function using the new **Go to Source Definition** command. You can learn more about this feature and share feedback in [TypeScript issue #49003](https://github.com/microsoft/TypeScript/issues/49003).
  517  * Snippets for completing methods as object members.

release-notes/v1_68.md:
   26  * **[Git branch protection](#git-branch-protection)** - Branch protection available right inside VS Code.
   27: * **[TypeScript Go to Source Definition](#go-to-source-definition)** - Jump directly to a symbol's JavaScript implementation.
   28  * **[VS Code for the Web localization](#core-localization-support)** - vscode.dev now matches your chosen browser language.

  110  
  111: The Settings editor now shows a default value override indicator for language-specific settings. You can view [language-specific settings](https://code.visualstudio.com/docs/getstarted/settings#_languagespecific-editor-settings) by adding a language filter in the Settings editor search bar, either by typing it out explicitly (`@lang:javascript`), or by clicking the filter button on the right of the search bar, and selecting the **Language** option.
  112  

  186              "type": "shell",
  187:             "command": "echo JavascriptFile",
  188              "group": {

  254  
  255: One of VS Code's longest standing and most upvoted feature requests is to make VS Code navigate to the JavaScript implementation of functions and symbols from external libraries. Currently, **Go to Definition** jumps to the type definition file (the `.d.ts` file) that defines the types for the target function or symbol. This is useful if you need to inspect the types or the documentation for these symbols but hides the actual implementation of the code. The current behavior also confuses many JavaScript users who may not understand the TypeScript type from the `.d.ts`.
  256  
  257: While changing **Go to Definition** to navigate to the JavaScript implementation of a symbol may sound simple, there's a reason why this feature request has been open for so long. JavaScript (and especially the compiled JavaScript shipped by many libraries) is much more difficult to analyze than a `.d.ts`. Trying to analyze all the JavaScript code under `node_modules` would be both slow and would also dramatically increase memory usage. There are also many JavaScript patterns that the VS Code IntelliSense engine is not able to understand.
  258  
  259: That's where the new **Go to Source Definition** command comes in. When you run this command from either the editor context menu or from  the Command Palette, TypeScript will attempt to track down the JavaScript implementation of the symbol and navigate to it. This may take a few seconds and we may not always get the correct result, but it should be useful in many cases.
  260  

  270  
  271: When inside an object literal, you should see two suggestions for each possible method: one that inserts just the method name and one that inserts the full signature of the method. You can also fully disable object method snippets by setting `"typescript.suggest.classMemberSnippets.enabled": false` or `"javascript.suggest.classMemberSnippets.enabled": false`.
  272  

  274  
  275: The **Organize Imports** command for JavaScript and TypeScript lets you quickly clean up your list of imports. When run, it both removes unused imports and also sorts the imports alphabetically.
  276  

  329  
  330: [Strict null checks](https://www.typescriptlang.org/tsconfig#strictNullChecks) are enabled in implicit projects by default for both JavaScript and TypeScript. This should result in more accurate IntelliSense and improved type checking that can catch common programming mistakes.
  331  

  861  * [@prashantvc (Prashant Cholachagudda)](https://github.com/prashantvc): Added extension search text length to telemetry [PR #148785](https://github.com/microsoft/vscode/pull/148785)
  862: * [@quanzhuo (Quan Zhuo)](https://github.com/quanzhuo): Add newpromise snippets in javascript [PR #148755](https://github.com/microsoft/vscode/pull/148755)
  863  * [@r3m0t (Tomer Chachamu)](https://github.com/r3m0t): Fix access token coming from wrong provider [PR #150473](https://github.com/microsoft/vscode/pull/150473)

release-notes/v1_69.md:
   29  * **[Debug Step Into Target support](#improved-step-into-target-ui)** - Allows you to step directly into functions when paused.
   30: * **[JavaScript sourcemap toggling](#javascript-debugging)** - Switch to debugging compiled rather than source code.
   31  * **[Color theme tester](#theme-tester-supports-built-in-themes)** - Use vscode.dev to preview color themes.

  362  
  363: ### JavaScript debugging
  364  

  368  
  369: ![Toggling sourcemaps off and on during a JavaScript debugging session](images/1_69/js-debug-toggle-sourcemaps.gif)
  370  

  384  
  385: The JavaScript debugger now supports **Step Into Target**, allowing you to easily step into function calls on a line of code.
  386  

  390  
  391: #### Unbound breakpoint warning icon in JavaScript debugging
  392  
  393: If you are debugging a TypeScript/JavaScript project and having trouble configuring sourcemaps or getting your breakpoints to bind, VS Code will now show a hint message in the Breakpoints view with a link to the JavaScript debugger's breakpoint troubleshooting tool. You will also see the hint when hovering the gray breakpoint icon in the editor.
  394  

  597  
  598: A Settings Profile is comprised of settings, keyboard shortcuts, extensions, state, tasks, and snippets. You can customize VS Code for different development environments like Web, Machine Learning, or for multiple programming language classrooms like Python, Java or for personal modes like Work or Demo and save them as Settings Profiles. You can open multiple workspaces (folders) with different profiles simultaneously based on the projects you are working on or the classroom you are attending or when you are presenting.
  599  

release-notes/v1_70.md:
  280  
  281: ### JavaScript debugging
  282  
  283: When you create a launch config to debug a JavaScript/TypeScript program, you can set `"console": "integratedTerminal"` to run that program in a terminal (rather than the process being spawned directly). A few months ago, we noticed that `"args"` in the `launch.json` configuration were partly escaped for the shell, but not entirely. This meant that attempting to pass an argument to your program could accidentally trigger special behavior in your shell. We cleaned this up, then realized that setting arguments that include characters with special meanings for the shell is a useful thing to do, and that some users were relying on this behavior.
  284  

  627  
  628: Inside of the webview, you can also set the contexts for specific areas of the HTML using the `data-vscode-context` [data attribute](https://developer.mozilla.org/docs/Learn/HTML/Howto/Use_data_attributes) (or in JavaScript with `dataset.vscodeContext`). The `data-vscode-context` value is a JSON object that specifies the contexts to set when the user right-clicks on the element. The final context is determined by going from the document root to the element that was clicked.
  629  

release-notes/v1_71.md:
  423  
  424: The `browser` entrypoint must be a JavaScript module that exports a default function that activates the plugin:
  425  

release-notes/v1_72.md:
   419  
   420: ### Notebook JavaScript output is now evaluated as a module
   421  
   422: JavaScript output in notebooks is now treated as a module. This means that variables declared inside the output will no longer leak into other outputs (and in the case of `const` variables, potentially even prevent other outputs with conflicting variable names from being run).
   423  
   424: This also means you can now use `import` inside of JavaScript outputs:
   425  
   426  ```js
   427: %%javascript
   428  import { myFunction } from './myModules.js';

   464  
   465: In the video below, the user's changes to a JavaScript file that were made when using VS Code for the Web are applied when they create and switch to working in a new GitHub codespace.
   466  

   523  
   524: [Dev Container Features](https://code.visualstudio.com/blogs/2022/09/15/dev-container-features) let you easily add pre-packaged capabilities to your dev containers. Whether it is tools like Git or Docker or support for programming languages such as Go or Java, you can review the list of [Available Features](https://containers.dev/features) and add them to your `devcontainer.json`. You can also create your own Features to publish and share with others using the [Feature template](https://github.com/devcontainers/feature-template).
   525  

   803  
   804: Inside of the webview, you can also set the contexts for specific areas of the HTML using the `data-vscode-context` [data attribute](https://developer.mozilla.org/docs/Learn/HTML/Howto/Use_data_attributes) (or in JavaScript with `dataset.vscodeContext`). The `data-vscode-context` value is a JSON object that specifies the contexts to set when the user right-clicks on the element. The final context is determined by going from the document root to the element that was clicked.
   805  

   900  
   901: ### Extensible JavaScript notebook renderer
   902  
   903: Our built-in [notebook renderers](https://code.visualstudio.com/api/extension-guides/notebook#notebook-renderer) now expose an experimental API that lets extensions customize rendering of JavaScript content. This API currently exposes a single hook, `preEvaluate`, which is invoked before the JavaScript content is evaluated.
   904  

   911        "id": "vscode-samples.my-custom-js-extension",
   912:       "displayName": "My custom javascript renderer extension",
   913        "entrypoint": {

   932  
   933:   builtinRenderer.experimental_registerJavaScriptRenderingHook({
   934      // Invoked before th js has been evaluated

  1191  * Our Node.js entry point in the Electron main process that is always getting called first.
  1192: * Our bootstrap JavaScript files in the Electron renderer process for opening windows.
  1193  
  1194: Bundling in these two areas allows us to reduce the cost of looking up JavaScript files on startup to just one call for the Electron main process and one call for the window itself.
  1195  

  1205  
  1206: For pull requests, we run automatic unit, integration, and smoke testing. All this happens in parallel but each step requires that our TypeScript sources are transpiled into JavaScript code. Originally, we used the TypeScript compiler for this. It emits JavaScript but also does type checking. The latter is time consuming and for testing not really needed. The overall time cost, by which testing was delayed, was around 5 minutes. We then switched to a custom transpile-only solution that uses the TypeScript compiler API. This was much faster but still took around 2 minutes.
  1207  

release-notes/v1_73.md:
  146  
  147: The following example sets the folding provider from the (hypothetical) extension `aeschli.better-folding` to be the default for JavaScript.
  148  
  149  ```json
  150:     "[javascript]": {
  151              "editor.defaultFoldingRangeProvider": "aeschli.better-folding"

  428  
  429: This contribution point is controlled by the `contribNotebookStaticPreloads` API proposal. Extensions can use preloads to load or define globals in the notebook JavaScript environment.
  430  
  431: The preload script must be a JavaScript module that exports an `activate` function. All preloads are evaluated before any [renderer scripts](https://code.visualstudio.com/api/extension-guides/notebook#notebook-renderer).
  432  

release-notes/v1_74.md:
   28  * **[Manage unsafe repositories](#manage-unsafe-git-repositories)** - Prevent Git operations on folders not owned by you.
   29: * **[JavaScript console.profile collection](#javascript-debugging)** - Easily create CPU profiles for viewing in VS Code.
   30: * **[Go to Definition from return](#go-to-definition-on-return)** - Jump to the top of JavaScript/TypeScript functions.
   31  * **[Remote Tunnels](#remote-development)** - Create a connection to any machine, without needing SSH.

  181  
  182: ### JavaScript debugging
  183  

  185  
  186: The JavaScript debugger now supports [console.profile](https://developer.mozilla.org/docs/Web/API/console/profile). When running under the debugger, a CPU profile will be collected for code between `console.profile()` and `console.profileEnd()`.
  187  

  199  
  200: The JavaScript debugger will now automatically resolve sourcemaps recursively, so that the original source files can be debugged without extra steps.
  201  

  286  
  287: JavaScript and TypeScript now support running **Go to Definition** on the `return` keyword to quickly jump to the top of the function being returned from. This is helpful when dealing with long, complicated, or highly nested functions. You can use the **Go to Definition** command/keybinding for this (`kb(editor.action.revealDefinition)`) or simply `Cmd/Alt + Click` on the `return` keyword.
  288  

release-notes/v1_75.md:
   72  
   73: We are happy to announce that the **Profiles** feature is now generally available in VS Code. A Profile can include extensions, settings, keyboard shortcuts, UI state, tasks, and user snippets. You can customize VS Code for different development scenarios like data science, documentation writing, or for multiple programming languages like Python or Java. If you have different VS Code setups based on workflow such as "Work" or "Demo", you can also save those as different profiles. You can open multiple workspaces (folders) with different profiles applied simultaneously.
   74  

  467  
  468: ### JavaScript debugging
  469  

  477  
  478: ### JavaScript React language label is now JavaScript JSX
  479  
  480: The `JavaScript React` language mode has been renamed to `JavaScript JSX` to reflect that JSX syntax is used by more than just React. `TypeScript React` has also been renamed to `TypeScript JSX`.
  481  
  482: Note that only the language names shown in the UI have been changed. The internal language IDs (`javascriptreact` and `typescriptreact`) remain unchanged for compatibility reasons.
  483  

release-notes/v1_76.md:
  279  | ----------- | ----------- |
  280: | ![Search results for "mono debugger" showing Java debugger extension as the top result](images/1_76/search_before.png)      | ![Search results for "mono debugger" showing Mono debug extension as the top result](images/1_76/search_after.png)       |
  281  

release-notes/v1_77.md:
   26  * **[Notebook Format on Save](#format-on-save)** - Automatically format notebooks cells on save.
   27: * **[TS/JS switch case completions](#switch-case-completions-for-javascript-and-typescript)** - Quickly fill in TypeScript/JavaScript switch statements.
   28  * **[Python move symbol refactoring](#move-symbol-refactoring)** - Move Python symbols to an existing or new file.

  136  
  137: ### Switch case completions for JavaScript and TypeScript
  138  
  139: VS Code can now help scaffold out switch statements over literal types in JavaScript or TypeScript:
  140  

  348  * [Ruby in VS Code](https://code.visualstudio.com/docs/languages/ruby) - Learn about Ruby language support (snippets, linting, debugging) using the [Ruby LSP](https://marketplace.visualstudio.com/items?itemName=Shopify.ruby-lsp) extension.
  349: * [Polyglot Notebooks](https://code.visualstudio.com/docs/languages/polyglot) - The [Polyglot Notebooks](https://marketplace.visualstudio.com/items?itemName=ms-dotnettools.dotnet-interactive-vscode) extension enables polyglot programming for C#, PowerShell, JavaScript, and more.
  350  

  392  * [@lawvs (Whitewater)](https://github.com/lawvs): composition enter should not accept rename [PR #174829](https://github.com/microsoft/vscode/pull/174829)
  393: * [@mickaelistria (Mickael Istria)](https://github.com/mickaelistria): onEnterRules add prefix on newline inside Javadoc [PR #176800](https://github.com/microsoft/vscode/pull/176800)
  394  * [@nikdmello (Nikhil D'Mello)](https://github.com/nikdmello): fix screencast mode: only keyboard shortcuts no longer show command names [PR #176149](https://github.com/microsoft/vscode/pull/176149)

release-notes/v1_78.md:
   23  * **[New color themes](#new-default-color-themes)** - "Modern" light and dark color theme defaults.
   24: * **[Profile templates](#profile-templates)** - Built-in templates for Python, Java, Data Science, and more.
   25  * **[Drag and drop selector](#drop-selector)** - Choose how you'd like item links placed into the editor.

  234  
  235: ### Strict nulls for JavaScript script blocks in HTML
  236  
  237: You can now use the `js/ts.implicitProjectConfig.strictNullChecks` setting to enable strict nulls for JavaScript in HTML script blocks:
  238  

  421  
  422: You can disable this behavior using `javascript.preferences.renameMatchingJsxTags` and `typescript.preferences.renameMatchingJsxTags`.
  423  

  598  
  599: * [@markw65](https://github.com/markw65): Fix the race for the javascript terminal too [PR #1654](https://github.com/microsoft/vscode-js-debug/pull/1654)
  600  

release-notes/v1_79.md:
  252  
  253: You can disable this behavior using `javascript.preferences.renameMatchingJsxTags` and `typescript.preferences.renameMatchingJsxTags`.
  254  

  262  
  263: In JavaScript files, `@param` completions create placeholders for the parameter type description:
  264  
  265: <video title="@param completions in a JavaScript file" src="images/1_79/js-param-snippets.mp4" controls autoplay loop muted></video>
  266  

  485  
  486: [vscode.dev](https://insiders.vscode.dev) is a lightweight version of VS Code running fully in your browser. This iteration, we've significantly enriched vscode.dev's JavaScript and TypeScript support so that it can analyze all files in your workspace instead of being limited to currently opened files. This greatly improves navigation through code, letting you **Go to Definition** and **Find All References** to a symbol. It also improves IntelliSense by making sure settings from your `tsconfig.json` / `jsconfig.json` are respected. We even now support auto-imports while writing code.
  487  

  496  * There is not currently IntelliSense support for third party libraries.
  497: * There is not currently support for [automatic type acquisition](https://code.visualstudio.com/docs/nodejs/working-with-javascript#_typings-and-automatic-type-acquisition) for JavaScript projects.
  498  * Because of the above limitations, all typing errors are disabled on vscode.dev.

  500  
  501: We plan on addressing these limitations going forward, and are excited to continue enriching our JavaScript and TypeScript support on the web!
  502  

  532  * A new **Inline constant** refactoring.
  533: * A new [Move to file](#move-to-file-refactoring-for-javascript-and-typescript) refactoring that lets you move a symbol into an existing file.
  534  

  536  
  537: ### Move to file refactoring for JavaScript and TypeScript
  538  

  542  
  543: When you select **Move to file**, VS Code shows you a list of all files in the current TypeScript or JavaScript project. You can start typings to quickly find the file you want.
  544  

release-notes/v1_80.md:
  561  
  562: Last year we started [mangling the names of private properties and methods](https://code.visualstudio.com/updates/v1_74#_name-mangling-of-properties-and-method) to reduce our code size. We now also mangle exported symbol names, which reduces the size of our main workbench JavaScript file a further 8%.
  563  
  564: Our name mangling build step now saves a total of 3.9 MB of JavaScript across core VS Code and our built-in extensions. This reduction speeds up downloads, reduces VS Code's install size, and speeds up code loading every time you start VS Code.
  565  

release-notes/v1_81.md:
  183  
  184: ### JavaScript debugger
  185  

  187  
  188: The JavaScript debugger now supports the [Fast Node Manager](https://github.com/Schniz/fnm) (fnm) in its runtime version. Users of fnm can now set the `runtimeVersion` property of `launch.json` to select the Node.js version.
  189  

  401  
  402: A recent engineering effort reduced the size of VS Code's shipping JavaScript by 20%. In the [Shrinking VS Code with name mangling](https://code.visualstudio.com/blogs/2023/07/20/mangling-vscode) blog post, you can learn how VS Code engineers [Matt Bierner](https://hachyderm.io/@mattbierner) and [Johannes Rieken](https://twitter.com/johannesrieken) researched identifier name mangling to optimize code size and came up with effective solution using TypeScript.
  403  

  419  * [133542](https://github.com/microsoft/vscode/issues/133542) Reattached to the wrong terminal
  420: * [168021](https://github.com/microsoft/vscode/issues/168021) Better object completions in the JavaScript debugger
  421  * [184894](https://github.com/microsoft/vscode/issues/184894) Cannot click and drag scroll bar in terminal

release-notes/v1_82.md:
   29  * **[Copy Notebook output](#notebooks)** - Easily copy cell output as well as generated images.
   30: * **[WebAssembly debugging](#javascript-debugger)** - Decompile WASM code to step through and set breakpoints.
   31  * **[New TypeScript refactorings](#typescript-52)** - Move to File and Inline Variables refactorings.

  257  
  258: ### JavaScript Debugger
  259  

  261  
  262: The JavaScript debugger will now automatically decompile WebAssembly modules to the WebAssembly Text Format, and allow you to step through and set breakpoints in the decompiled modules.
  263  

  311  
  312: The **Move to file** refactoring for JavaScript and TypeScript lets you move a class, function, or constant into an existing file. This will also automatically update all references to the symbol and update imports as needed:
  313  

  315  
  316: When you select **Move to file**, VS Code shows you a list of all files in the current TypeScript or JavaScript project. You can start typings to quickly filter to the file you want.
  317  

  321  
  322: The **Inline variable** refactoring for JavaScript and TypeScript replaces all occurrences of a variable with its constant value.
  323  

  349  "typescript.inlayHints.parameterNames.enabled": "all",
  350: "javascript.inlayHints.parameterNames.enabled": "all"
  351  ```

  356  
  357: We plan to enable **Go to Definition** for other JavaScript and TypeScript inlay hints in upcoming releases.
  358  

release-notes/v1_83.md:
  204  
  205: ### JavaScript Debugger
  206  

  208  
  209: The JavaScript debugger can now debug code compiled into WebAssembly if it includes [DWARF](https://dwarfstd.org) debug information. For example, C++ code compiled using [Emscripten](https://emscripten.org) can be debugged:
  210  

  214  
  215: To enable this, you'll want to install the [WebAssembly DWARF Debugging](https://marketplace.visualstudio.com/items?itemName=ms-vscode.wasm-dwarf-debugging) extension, which plugs in to the built-in JavaScript debugger. Read more about this in [Debugging WebAssembly](/docs/nodejs/nodejs-debugging#debugging-webassembly).
  216  

  359  
  360: [Unicode character class escapes](https://developer.mozilla.org/docs/Web/JavaScript/Reference/Regular_expressions/Unicode_character_class_escape) are now supported in regexes to validate string and string array settings. In other words, string and string array settings can now specify a `pattern` field with a value such as `"\\p{Letter}+"`, allowing string values that only contain letters.
  361  

release-notes/v1_84.md:
   27  * **[FastAPI tutorial](#fastapi-tutorial)** - Learn about developing Python FastAPI apps with VS Code.
   28: * **[Gradle for Java](#gradle-for-java)** - Improved support for Java Gradle projects.
   29  * **[Preview: GitHub Copilot](#github-copilot)** - Chat "agents", generate commit messages, terminal support.

  139  
  140: ### JavaScript Debugger
  141  

  220  
  221: You can ask Copilot Chat to explain a code selection in your active editor either through the `@workspace /explain` command or through the **Explain with Copilot** action in the context menu. Copilot Chat now includes the implementations of referenced symbols such as functions and classes, leading to more accurate and useful explanations. This works best across files when you have an extension contributing language services installed for one of the following languages: TypeScript/JavaScript, Python, Java, C#, C++, Go, or Ruby.
  222  

  494  
  495: ### Gradle for Java
  496  
  497: Java development in VS Code just got easier with the improved [Gradle for Java](https://marketplace.visualstudio.com/items?itemName=vscjava.vscode-gradle) extension. The pre-release version has better support for building Gradle projects thanks to adopting the [Build Server Protocol](https://build-server-protocol.github.io) (BSP). Similar to other protocols used in VS Code, for example the [Language Server Protocol](https://microsoft.github.io/language-server-protocol) (LSP), the BSP provides an abstraction layer between development environments and build tools such as Gradle.
  498  
  499: To try out the new Gradle support, install both the [Extension Pack for Java](https://marketplace.visualstudio.com/items?itemName=vscjava.vscode-java-pack) and pre-release version of the [Gradle for Java](https://marketplace.visualstudio.com/items?itemName=vscjava.vscode-gradle) extension. You can learn more about Gradle and the BSP in this recent [blog post from the Java extension team](https://devblogs.microsoft.com/java/new-build-server-for-gradle).
  500  
  501: ![Gradle for Java pre-release extension](images/1_84/gradle-extension.png)
  502  

release-notes/v1_85.md:
   25  * **[Source Control incoming and outgoing view](#source-control)** - Easily review pending repository changes.
   26: * **[JavaScript heap snapshots](#javascript-debugger)** - Visualize heap snapshots including memory object graphs.
   27  * **[TypeScript Go to Definition from inlay hints](#jump-to-definition-for-inlay-hints)** - Jump to definition from inlay hint hovers.

  216  
  217: ### JavaScript Debugger
  218  

  226  
  227: Heap snapshots can be captured using the **Take Performance Profile** command while debugging any JavaScript code. They can also be captured via the **Memory** tab in browser DevTools.
  228  

  258  
  259: Types in JavaScript and TypeScript [inlay hints](https://code.visualstudio.com/docs/editor/editingevolved#_inlay-hints) are now interactive. Quickly jump to a type's definition by hovering over the type and clicking while holding `kbstyle(Ctrl)` on Windows and Linux or `kbstyle(Cmd)` on macOS:
  260  

release-notes/v1_86.md:
  749  * [@effectivecui](https://github.com/effectivecui): avoid to enter the infinite loop when item.children is empty. [PR #201701](https://github.com/microsoft/vscode/pull/201701)
  750: * [@Flanker32 (Hanxiao Liu)](https://github.com/Flanker32): Update java workspace tags [PR #197729](https://github.com/microsoft/vscode/pull/197729)
  751  * [@gayanper (Gayan Perera)](https://github.com/gayanper): Add support for breakpoint dependencies [PR #166202](https://github.com/microsoft/vscode/pull/166202)

  865    * Small wording fix in the site [PR #4254](https://github.com/microsoft/monaco-editor/pull/4254)
  866:   * Remove 2 java-only operators from c++ tokenizer [PR #4255](https://github.com/microsoft/monaco-editor/pull/4255)
  867    * Fix suggestion for #4253 [PR #4256](https://github.com/microsoft/monaco-editor/pull/4256)

release-notes/v1_87.md:
  433  
  434: The [Extension Pack for Java](https://marketplace.visualstudio.com/items?itemName=vscjava.vscode-java-pack) has already adopted the Test Coverage API. Developers can already see the coverage results running Java tests. Now you can get to test coverage by selecting the **Run Test With Coverage** button, and view the **Test Coverage** panel in the Test Explorer view. Learn more about the Test Coverage with the Extension Pack for Java in the team's [December](https://devblogs.microsoft.com/java/java-on-visual-studio-code-update-december-2023/) and [January](https://devblogs.microsoft.com/java/java-on-visual-studio-code-update-january-2024/) update.
  435  

release-notes/v1_88.md:
  263  
  264: Using test coverage requires that your extension implements the new API. Some extensions, such as the [Test Runner for Java](https://marketplace.visualstudio.com/items?itemName=vscjava.vscode-java-test) and the [node:test runner](https://marketplace.visualstudio.com/items?itemName=connor4312.nodejs-testing) already support it. Learn more about the Test Coverage for Java in the team's [December](https://devblogs.microsoft.com/java/java-on-visual-studio-code-update-december-2023/) and [January](https://devblogs.microsoft.com/java/java-on-visual-studio-code-update-january-2024/) updates.
  265  

  383  
  384: The `@workspace /new` command has also been enhanced to more effectively manage context and history. This enables you to refine suggested workspaces structure and file contents by asking follow-up queries. For example, "use TypeScript instead of JavaScript" or "also add bootstrap".
  385  

  684  * [@rehmsen (Ole)](https://github.com/rehmsen): Log `resource` telemetry also for side-by-side views on browsers. [PR #208196](https://github.com/microsoft/vscode/pull/208196)
  685: * [@russelldavis (Russell Davis)](https://github.com/russelldavis): Fix decreaseIndentPattern for javascript and typescript [PR #201425](https://github.com/microsoft/vscode/pull/201425)
  686  * [@samdenty (Sam Denty)](https://github.com/samdenty): feat(web/lifecycleService): correct startupKind [PR #206563](https://github.com/microsoft/vscode/pull/206563)

release-notes/v1_89.md:
  209  
  210: ### JavaScript Debugger
  211  
  212: The JavaScript debugger now automatically looks for binaries that appear in the `node_modules/.bin` folder in the `runtimeExecutable` configuration. Now, it resolves them by name automatically.
  213  

release-notes/vApril.md:
  146  
  147: In some cases, you want more control, for example, you may want to provide completion support that requires a database lookup, or you want validation that cannot be expressed by a regular expression. To implement your own completion, validation, and hover support, you can use the regular VS Code APIs. To make this easier, we moved our JSON scanner and parsers to a node-module, [jsonc-parser](https://www.npmjs.com/package/jsonc-parser), that you can reuse. You can see this module in action with the dependency completion support for `package.json` and `bower.json` that is now part of the [JavaScript extension]( https://github.com/microsoft/vscode/tree/main/extensions/javascript) and for `project.json` soon to be part of the [C# extension](https://github.com/OmniSharp/omnisharp-vscode/).
  148  

release-notes/vDecember.md:
   89  
   90: We have made ES6 the default for JavaScript files. This means you don't need to create `jsconfig.json` files to enable new syntax and by default you get suggestions for ES6-types, like `Promise`, `Set`, `Map`, `String.startsWith` and much more. Thanks to a community [contribution](https://github.com/microsoft/vscode/pull/337).
   91  
   92: At the same time, the grammar used to colorize JavaScript was also updated to support the ES6 syntax.
   93  

   99  
  100: To improve the JavaScript and JSX support, the plan is to adopt [Salsa](https://github.com/microsoft/TypeScript/issues/4789). There is good progress on the Salsa project, but until VS Code has switched over to Salsa, we can only offer a **workaround** for using VS Code with JSX.
  101  

  159  
  160: Various fixes to the default light and dark theme. Due to the move to TextMate tokenizers in the last release, there were changes in the appearance of the default light and dark theme. Some themes got far more colorful, in particular JavaScript, while other languages lost colors, e.g. Jade and XML. The goal was to stay as close as possible to what we had in the 0.9.0 release so we use a few major colors: blue for keywords, green for comments and red for strings.
  161  

  191  * A gray filled circle represents a disabled breakpoint.
  192: * A gray hollow circle represents a breakpoint which could not be successfully registered with the debugger. For languages that are transpiled to JavaScript, this could mean that source maps are missing or invalid.
  193  

release-notes/vFebruary.md:
   10  
   11: - Salsa is now the default JavaScript language service.
   12  - Folding, the most requested feature, is now available.

   19  
   20: ## Languages - JavaScript
   21  
   22: The [Salsa](https://github.com/microsoft/TypeScript/issues/4789) JavaScript language service was available as preview in January and it is now the default language service for JavaScript in the February update.
   23  

   55  
   56: It is now possible to have mixed TypeScript and JavaScript projects. To enable JavaScript inside a TypeScript project, you can set the `allowJs` property to `true` in the `tsconfig.json`.
   57  

   59  
   60: Finally, the TypeScript compiler `tsc` can down-level compile JavaScript files from ES6 to another language level.
   61  

   67  
   68: Previously the JavaScript language support provided some linting options enabled by the `javascript.validate.lint.*` settings. With `jshint` and `eslint`, there are powerful linters for JavaScript available. Also, there are now extensions for VS Code available that integrate these linters. Therefore, we have decided to deprecate the built-in linter and Salsa now reports **syntax errors only**. We **strongly recommend that you install and configure a JavaScript linter if your project hasn't done so already**.
   69  
   70: In particular, the previous JavaScript infrastructure provided an implicit *lint rule* which warned about undeclared variables unless they are mentioned in a /\*global\*/ comment block. This rule is no longer active and needs to be configured in your linter of choice.
   71  

   79  
   80: This [.eslintrc.json](https://gist.github.com/egamma/65c0e2a832393e3b625a) corresponds roughly to the lint settings of the old JavaScript infrastructure.
   81  

   85  
   86: The previous JavaScript language service had a built-in list for folders that should be excluded from the project context. This list included the folders: `node_modules`, `bower_components`, `jspm_packages`, `tmp`, and `temp`. This implicit behavior has changed in favor of an explicit list defined by the user. Therefore if you use...
   87  

   93  
   94: **Tip:** After editing the `jsconfig.json`, do not forget to run the **Reload JavaScript** command to ensure that everything is up to date.
   95  

  101  
  102: Be aware that if you have no `jsconfig.json` defined to mark the root of your project, then each JavaScript file is considered an island by Salsa. Without a `jsconfig.json` file, cross-file and Typings file IntelliSense will not work.
  103  

  109  
  110: Salsa undoubtedly provides a much better experience writing JavaScript applications in VS Code. By moving to Salsa, we give up a few features previously available with our old JavaScript language service:
  111  
  112: - The source language level is now always ECMAScript 6. Previously, there was support to define a lower level using the `target` attribute inside `jsconfig.json`. This support has been removed and the `target` attribute is now only used by `tsc` to define the target version when a JavaScript file is compiled to a lower ECMAScript version.
  113: - The previous JavaScript infrastructure attempted to resolve references for `AMD` modules. This hasn't worked in all cases and support for `AMD` to resolve references across files is currently no longer supported.
  114  - There is no longer support for IntelliSense in `script` sections inside HTML documents.
  115: - The `javascript.validate.*` settings are no longer supported and are ignored (see above).
  116: - The previous JavaScript infrastructure provided quick fixes to add an undefined variable as a global and to fetch a type definition from definitely typed. These quick fixes are no longer available.
  117: - A file without a .js suffix that VS Code identifies as a JavaScript file is now treated as a .ts file and you get unexpected type errors ([#issue 7291](https://github.com/microsoft/TypeScript/issues/7291)).
  118  

  189  
  190: With the adoption of the Salsa JavaScript language service as the default, we could streamline our usage of web workers and now have a dedicated web worker that is language agnostic, which we use for diff computation, link detection or simple textual completions. This reduces the latency of these computations and is memory friendly, as it automatically shuts down when not needed.
  191  

release-notes/vJanuary.md:
   14  
   15: ## JavaScript - Salsa Preview
   16  
   17: The JavaScript language service in VS Code has always been powered by TypeScript. We are migrating to a new JavaScript language service implementation called [Salsa](https://github.com/microsoft/TypeScript/issues/4789). Salsa will become available with TypeScript 1.8 but for the January update, we are providing way to preview Salsa in VS Code.
   18  

   20  
   21: Salsa provides important improvements over the existing JavaScript language service.
   22  

   44  
   45: Salsa also understands JSX constructs inside JavaScript (`.js`) files to support React Native development. We haven't updated the grammar for `.js` files yet but you can enable JSX syntax coloring for JS using the [`js-is-jsx` extension](https://marketplace.visualstudio.com/items?itemName=eg2.js-is-jsx). This extension tell VS Code to treat `.js` files as `.jsx` files so that the JSX syntax coloring is used.
   46  
   47: It is now possible to have mixed TypeScript and JavaScript projects. To enable JavaScript inside a TypeScript project, you can set the `allowJs` property to `true` in the `tsconfig.json`.
   48  

   50  
   51: Finally, the TypeScript compiler `tsc` can down-level compile JavaScript files from ES6 to another language level.
   52  
   53: ### Changes from the existing VS Code JavaScript support
   54  
   55: Salsa will undoubtedly provide a much better experience writing JavaScript applications in VS Code. By moving to this new service, we give up a few features previously available with our custom JavaScript language service.
   56  
   57: * When using Salsa, the language level is always ECMAScript 6. In the existing JavaScript language service, the default level was ES6 but there was support to define a lower level using the `target` attribute inside `jsconfig.json`. This support has been removed and the `target` attribute is now only used by `tsc` to define the target version when a JavaScript file is compiled to a lower ECMAScript version.
   58: * The existing JavaScript language service implicitly excluded some folders from the project, see the [JavaScript topic](/docs/languages/javascript.md#javascript-projects-jsconfigjson). This is no longer the case and you must exclude these folders explicitly in your `jsconfig.json` file.
   59: * Salsa flags syntax errors but the JavaScript linting options `javascript.validate.lint.*` defined in the user settings are no longer supported. To get these linting options back, we recommend that you use a linter combined with a VS Code linter extension like [ESLint](https://marketplace.visualstudio.com/items?itemName=dbaeumer.vscode-eslint) or [JSHint](https://marketplace.visualstudio.com/items?itemName=dbaeumer.jshint).
   60  * Salsa doesn't support the `AMD` module system.

  254  
  255: When you write an extension for VS Code, you are developing it against a set of APIs that we define through a file called `vscode.d.ts`. You can see this file in our repository [here](https://github.com/microsoft/vscode/blob/main/src/vs/vscode.d.ts). This file is picked up from our TypeScript and JavaScript language service to provide you with rich validation and IntelliSense while you develop your extension.
  256  

release-notes/vMarch.md:
   15  * Added 9 localized display languages.
   16: * Improved JavaScript support with new TypeScript language service, codename "Salsa".
   17  * Simplified `jsconfig.json` and `tasks.json` file creation.

   25  
   26: ## Languages - JavaScript
   27  

   31  
   32: We improved the [JavaScript documentation](/docs/languages/javascript.md) and added more information about the `jsconfig.json` and its attributes.
   33  

   35  
   36: Some users want to use syntax constructs like the proposed **ES7 Object Rest/Spread Properties**. However, these are currently not supported by Salsa and are flagged as errors. For users who still want to use these **ES7** features, we have revived the `javascript.validate.enable` setting to disable all built-in syntax checking. If you do this, we recommend that you use a linter like **ESLint** to validate your code. Since the JavaScript support doesn't understand **ES7** constructs, features like IntelliSense might not be fully accurate.
   37  

   39  
   40: The JavaScript experience is much better when you have a `jsconfig.json` file in your workspace that defines the project context. Without a `jsconfig.json`, each JavaScript file is treated as an island. Only the file itself and the JavaScript files it references are considered for features like IntelliSense. By adding a `jsconfig.json` file, you can the define the root of your project, the folders to exclude, etc. For this reason we now provide a hint to create a `jsconfig.json` file.
   41  

   47  
   48: Similarly when your JavaScript project is growing too large, often because of library folders like _node_modules_, we will prompt you to edit the `exclude` list.
   49  

   51  
   52: During the transition to Salsa, the support for **Go to Symbol** was lost ([TypeScript #7134](https://github.com/microsoft/TypeScript/issues/7134)) for some JavaScript coding patterns. Thanks to the TypeScript team this feature is now back.
   53  
   54: ### No more "Reload JavaScript Project"
   55  
   56: Previously you often had to run the **Reload JavaScript Project** command to ensure that the JavaScript information was up to date. Now VS Code keeps the information up to date as you edit the `jsconfig.json` file or when you add a typings (`.d.ts`) file.
   57  

   93  
   94: The following formatter settings are now available for JavaScript:
   95  

   97  // Defines space handling after a comma delimiter
   98: "javascript.format.insertSpaceAfterCommaDelimiter": boolean,
   99  
  100  // Defines space handling after a semicolon in a for statement
  101: "javascript.format.insertSpaceAfterSemicolonInForStatements": boolean,
  102  
  103  // Defines space handling after a binary operator
  104: "javascript.format.insertSpaceBeforeAndAfterBinaryOperators": boolean,
  105  
  106  // Defines space handling after keywords in control flow statement
  107: "javascript.format.insertSpaceAfterKeywordsInControlFlowStatements": boolean,
  108  
  109  // Defines space handling after function keyword for anonymous functions
  110: "javascript.format.insertSpaceAfterFunctionKeywordForAnonymousFunctions": boolean,
  111  
  112  // Defines space handling after opening and before closing non empty parenthesis
  113: "javascript.format.insertSpaceAfterOpeningAndBeforeClosingNonemptyParenthesis": boolean,
  114  
  115  // Defines space handling after opening and before closing non empty brackets
  116: "javascript.format.insertSpaceAfterOpeningAndBeforeClosingNonemptyBrackets": boolean,
  117  
  118  // Defines whether an open brace is put onto a new line for functions or not
  119: "javascript.format.placeOpenBraceOnNewLineForFunctions": boolean,
  120  
  121  // Defines whether an open brace is put onto a new line for control blocks or not
  122: "javascript.format.placeOpenBraceOnNewLineForControlBlocks": boolean,
  123  ```

  439  - [2808](https://github.com/microsoft/vscode/issues/2808): Make it easier to add more file extensions to an existing colorizer/language
  440: - [2912](https://github.com/microsoft/vscode/issues/2912) Html code returned from a TextDocumentContentProvider can now embed JavaScript code.
  441  

release-notes/vNovember.md:
  40  
  41: We've updated the [`yo code` generator](/docs/extensions/yocode.md) to create a basic extension project (TypeScript or JavaScript) which has all the metadata and source files necessary for a working extension.
  42  

remote-release-notes/v1_49.md:
  44  
  45: In the example below, when configuring a Java DevContainer, there is the option to select the Java version:
  46  
  47: ![Java version picker](images/1_49/java-version-picker.png)
  48  

  50  
  51: ![Java option picker](images/1_49/java-option-picker.png)
  52  

remote-release-notes/v1_66.md:
  12  
  13: As an example, a badge to open the [vscode-remote-try-java](https://github.com/microsoft/vscode-remote-try-java) repo would look like:
  14  
  15: [![Open in Dev Containers](https://img.shields.io/static/v1?label=Dev%20-%20Containers&message=Open&color=blue&logo=visualstudiocode)](https://vscode.dev/redirect?url=vscode://ms-vscode-remote.remote-containers/cloneInVolume?url=https://github.com/microsoft/vscode-remote-try-java)
  16  

  19  ```markdown
  20: [![Open in Dev Containers](https://img.shields.io/static/v1?label=Dev%20-%20Containers&message=Open&color=blue&logo=visualstudiocode)](https://vscode.dev/redirect?url=vscode://ms-vscode-remote.remote-containers/cloneInVolume?url=https://github.com/microsoft/vscode-remote-try-java)
  21  

  23  
  24: You may also include an [open in dev container](https://vscode.dev/redirect?url=vscode://ms-vscode-remote.remote-containers/cloneInVolume?url=https://github.com/microsoft/vscode-remote-try-java) link directly.
  25  

remote-release-notes/v1_74.md:
  25  
  26: The JavaScript in the [@devcontainer/cli](https://www.npmjs.com/package/@devcontainers/cli) NPM package is now bundled in a single minified JavaScript file.
  27  

remote-release-notes/v1_76.md:
  21  * `fish`: Check the list of [available features](https://containers.dev/features) for replacements.
  22: * `maven`: `ghcr.io/devcontainers/features/java` has an option to install Maven.
  23: * `gradle`: `ghcr.io/devcontainers/features/java` has an option to install Gradle.
  24  * `homebrew`: Check the list of [available features](https://containers.dev/features) for replacements.

remote-release-notes/v1_77.md:
  40  
  41: We keep working towards replacing the built-in legacy features with their updated counterparts in the contributable container features. The legacy `maven`, `gradle` and `jupyterlab` features are now mapped to the corresponding options on the `ghcr.io/devcontainers/features/java` and `ghcr.io/devcontainers/features/python` features.
  42  
